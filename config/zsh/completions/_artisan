#compdef artisan

_artisan()
{
    local state com cur

    cur=${words[${#words[@]}]}

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    if [[ ${cur} == --* ]]; then
        state="option"
        opts=("--help:Display help for the given command. When no command is given display help for the <info>list</info> command" "--quiet:Do not output any message" "--verbose:Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug" "--version:Display this application version" "--ansi:Force \(or disable --no-ansi\) ANSI output" "--no-ansi:Negate the "--ansi" option" "--no-interaction:Do not ask any interactive question" "--env:The environment the command should run under")
    elif [[ $cur == $com ]]; then
        state="command"
        coms=("_complete:Internal command to provide shell completion suggestions" "about:Display basic information about your application" "clear-compiled:Remove the compiled class file" "completion:Dump the shell completion script" "db:Start a new database CLI session" "docs:Access the Laravel documentation" "down:Put the application into maintenance / demo mode" "env:Display the current framework environment" "help:Display help for a command" "inspire:Display an inspiring quote" "list:List commands" "migrate:Run the database migrations" "optimize:Cache the framework bootstrap files" "serve:Serve the application on the PHP development server" "test:Run the application tests" "tinker:Interact with your application" "ui:Swap the front-end scaffolding for the application" "up:Bring the application out of maintenance mode" "auth\:clear-resets:Flush expired password reset tokens" "cache\:clear:Flush the application cache" "cache\:forget:Remove an item from the cache" "cache\:prune-stale-tags:Prune stale cache tags from the cache \(Redis only\)" "cache\:table:Create a migration for the cache database table" "channel\:list:List all registered private broadcast channels" "config\:cache:Create a cache file for faster configuration loading" "config\:clear:Remove the configuration cache file" "config\:show:Display all of the values for a given configuration file" "db\:monitor:Monitor the number of connections on the specified database" "db\:seed:Seed the database with records" "db\:show:Display information about the given database" "db\:table:Display information about the given database table" "db\:wipe:Drop all tables, views, and types" "env\:decrypt:Decrypt an environment file" "env\:encrypt:Encrypt an environment file" "event\:cache:Discover and cache the application\'s events and listeners" "event\:clear:Clear all cached events and listeners" "event\:generate:Generate the missing events and listeners based on registration" "event\:list:List the application\'s events and listeners" "ide-helper\:eloquent:Add \\Eloquent helper to \\Eloquent\\Model" "ide-helper\:generate:Generate a new IDE Helper file." "ide-helper\:meta:Generate metadata for PhpStorm" "ide-helper\:models:Generate autocompletion for models" "inertia\:middleware:Create a new Inertia middleware" "inertia\:start-ssr:Start the Inertia SSR server" "inertia\:stop-ssr:Stop the Inertia SSR server" "key\:generate:Set the application key" "lang\:publish:Publish all language files that are available for customization" "make\:cast:Create a new custom Eloquent cast class" "make\:channel:Create a new channel class" "make\:command:Create a new Artisan command" "make\:component:Create a new view component class" "make\:controller:Create a new controller class" "make\:event:Create a new event class" "make\:exception:Create a new custom exception class" "make\:factory:Create a new model factory" "make\:job:Create a new job class" "make\:listener:Create a new event listener class" "make\:mail:Create a new email class" "make\:middleware:Create a new middleware class" "make\:migration:Create a new migration file" "make\:model:Create a new Eloquent model class" "make\:notification:Create a new notification class" "make\:observer:Create a new observer class" "make\:policy:Create a new policy class" "make\:provider:Create a new service provider class" "make\:request:Create a new form request class" "make\:resource:Create a new resource" "make\:rule:Create a new validation rule" "make\:scope:Create a new scope class" "make\:seeder:Create a new seeder class" "make\:test:Create a new test class" "make\:view:Create a new view" "migrate\:fresh:Drop all tables and re-run all migrations" "migrate\:install:Create the migration repository" "migrate\:refresh:Reset and re-run all migrations" "migrate\:reset:Rollback all database migrations" "migrate\:rollback:Rollback the last database migration" "migrate\:status:Show the status of each migration" "model\:prune:Prune models that are no longer needed" "model\:show:Show information about an Eloquent model" "notifications\:table:Create a migration for the notifications table" "nova\:action:Create a new action class" "nova\:asset:Create a new asset" "nova\:base-resource:Create a new base resource class" "nova\:card:Create a new card" "nova\:check-license:Verify your Nova license key" "nova\:custom-filter:Create a new custom filter" "nova\:dashboard:Create a new dashboard." "nova\:field:Create a new field" "nova\:filter:Create a new filter class" "nova\:install:Install all of the Nova resources" "nova\:lens:Create a new lens class" "nova\:partition:Create a new metric \(partition\) class" "nova\:progress:Create a new metric \(progress\) class" "nova\:publish:Publish all of the Nova resources" "nova\:resource:Create a new resource class" "nova\:resource-tool:Create a new resource tool" "nova\:stubs:Publish all stubs that are available for customization" "nova\:table:Create a new metric \(table\) class" "nova\:tool:Create a new tool" "nova\:translate:Create translation files for Nova" "nova\:trend:Create a new metric \(trend\) class" "nova\:upgrade:Upgrade Laravel Nova 3 to 4" "nova\:user:Create a new user" "nova\:value:Create a new metric \(single value\) class" "optimize\:clear:Remove the cached bootstrap files" "package\:discover:Rebuild the cached package manifest" "posts\:import:Command description" "queue\:batches-table:Create a migration for the batches database table" "queue\:clear:Delete all of the jobs from the specified queue" "queue\:failed:List all of the failed queue jobs" "queue\:failed-table:Create a migration for the failed queue jobs database table" "queue\:flush:Flush all of the failed queue jobs" "queue\:forget:Delete a failed queue job" "queue\:listen:Listen to a given queue" "queue\:monitor:Monitor the size of the specified queues" "queue\:prune-batches:Prune stale entries from the batches database" "queue\:prune-failed:Prune stale entries from the failed jobs table" "queue\:restart:Restart queue worker daemons after their current job" "queue\:retry:Retry a failed queue job" "queue\:retry-batch:Retry the failed jobs for a batch" "queue\:table:Create a migration for the queue jobs database table" "queue\:work:Start processing jobs on the queue as a daemon" "route\:cache:Create a route cache file for faster route registration" "route\:clear:Remove the route cache file" "route\:list:List all registered routes" "sail\:add:Add a service to an existing Sail installation" "sail\:install:Install Laravel Sail\'s default Docker Compose file" "sail\:publish:Publish the Laravel Sail Docker files" "sanctum\:prune-expired:Prune tokens expired for more than specified number of hours" "schedule\:clear-cache:Delete the cached mutex files created by scheduler" "schedule\:finish:Handle the completion of a scheduled command" "schedule\:interrupt:Interrupt the current schedule run" "schedule\:list:List all scheduled tasks" "schedule\:run:Run the scheduled commands" "schedule\:test:Run a scheduled command" "schedule\:work:Start the schedule worker" "schema\:dump:Dump the given database schema" "sentry\:publish:Publishes and configures the Sentry config." "sentry\:test:Generate a test event and send it to Sentry" "session\:table:Create a migration for the session database table" "storage\:link:Create the symbolic links configured for the application" "stub\:publish:Publish all stubs that are available for customization" "turbo\:install:Installs Turbo." "ui\:auth:Scaffold basic login and registration views and routes" "ui\:controllers:Scaffold the authentication controllers" "vendor\:publish:Publish any publishable assets from vendor packages" "view\:cache:Compile all of the application\'s Blade templates" "view\:clear:Clear all compiled view files" "webpush\:vapid:Generate VAPID keys.")
    fi

    case $state in
        command)
            _describe 'command' coms
        ;;
        option)
            case "$com" in

            _complete)
            opts+=("--shell:The shell type \("bash", "fish", "zsh"\)" "--input:An array of input tokens \(e.g. COMP_WORDS or argv\)" "--current:The index of the "input" array that the cursor is in \(e.g. COMP_CWORD\)" "--api-version:The API version of the completion script" "--symfony:deprecated")
            ;;

            about)
            opts+=("--only:The section to display" "--json:Output the information as JSON")
            ;;

            clear-compiled)
            opts+=()
            ;;

            completion)
            opts+=("--debug:Tail the completion debug log")
            ;;

            db)
            opts+=("--read:Connect to the read connection" "--write:Connect to the write connection")
            ;;

            docs)
            opts+=()
            ;;

            down)
            opts+=("--redirect:The path that users should be redirected to" "--render:The view that should be prerendered for display during maintenance mode" "--retry:The number of seconds after which the request may be retried" "--refresh:The number of seconds after which the browser may refresh" "--secret:The secret phrase that may be used to bypass maintenance mode" "--with-secret:Generate a random secret phrase that may be used to bypass maintenance mode" "--status:The status code that should be used when returning the maintenance mode response")
            ;;

            env)
            opts+=()
            ;;

            help)
            opts+=("--format:The output format \(txt, xml, json, or md\)" "--raw:To output raw command help")
            ;;

            inspire)
            opts+=()
            ;;

            list)
            opts+=("--raw:To output raw command list" "--format:The output format \(txt, xml, json, or md\)" "--short:To skip describing commands\' arguments")
            ;;

            migrate)
            opts+=("--database:The database connection to use" "--force:Force the operation to run when in production" "--path:The path\(s\) to the migrations files to be executed" "--realpath:Indicate any provided migration file paths are pre-resolved absolute paths" "--schema-path:The path to a schema dump file" "--pretend:Dump the SQL queries that would be run" "--seed:Indicates if the seed task should be re-run" "--seeder:The class name of the root seeder" "--step:Force the migrations to be run so they can be rolled back individually" "--isolated:Do not run the command if another instance of the command is already running")
            ;;

            optimize)
            opts+=()
            ;;

            serve)
            opts+=("--host:The host address to serve the application on" "--port:The port to serve the application on" "--tries:The max number of ports to attempt to serve from" "--no-reload:Do not reload the development server on .env file changes")
            ;;

            test)
            opts+=("--without-tty:Disable output to TTY" "--coverage:Indicates whether code coverage information should be collected" "--min:Indicates the minimum threshold enforcement for code coverage" "--parallel:Indicates if the tests should run in parallel" "--recreate-databases:Indicates if the test databases should be re-created" "--drop-databases:Indicates if the test databases should be dropped")
            ;;

            tinker)
            opts+=("--execute:Execute the given code using Tinker")
            ;;

            ui)
            opts+=("--auth:Install authentication UI scaffolding" "--option:Pass an option to the preset command")
            ;;

            up)
            opts+=()
            ;;

            auth:clear-resets)
            opts+=()
            ;;

            cache:clear)
            opts+=("--tags:The cache tags you would like to clear")
            ;;

            cache:forget)
            opts+=()
            ;;

            cache:prune-stale-tags)
            opts+=()
            ;;

            cache:table)
            opts+=()
            ;;

            channel:list)
            opts+=()
            ;;

            config:cache)
            opts+=()
            ;;

            config:clear)
            opts+=()
            ;;

            config:show)
            opts+=()
            ;;

            db:monitor)
            opts+=("--databases:The database connections to monitor" "--max:The maximum number of connections that can be open before an event is dispatched")
            ;;

            db:seed)
            opts+=("--class:The class name of the root seeder" "--database:The database connection to seed" "--force:Force the operation to run when in production")
            ;;

            db:show)
            opts+=("--database:The database connection" "--json:Output the database information as JSON" "--counts:Show the table row count <bg=red\;options=bold> Note: This can be slow on large databases </>" "--views:Show the database views <bg=red\;options=bold> Note: This can be slow on large databases </>")
            ;;

            db:table)
            opts+=("--database:The database connection" "--json:Output the table information as JSON")
            ;;

            db:wipe)
            opts+=("--database:The database connection to use" "--drop-views:Drop all tables and views" "--drop-types:Drop all tables and types \(Postgres only\)" "--force:Force the operation to run when in production")
            ;;

            env:decrypt)
            opts+=("--key:The encryption key" "--cipher:The encryption cipher" "--force:Overwrite the existing environment file" "--path:Path to write the decrypted file" "--filename:Filename of the decrypted file")
            ;;

            env:encrypt)
            opts+=("--key:The encryption key" "--cipher:The encryption cipher" "--force:Overwrite the existing encrypted environment file")
            ;;

            event:cache)
            opts+=()
            ;;

            event:clear)
            opts+=()
            ;;

            event:generate)
            opts+=()
            ;;

            event:list)
            opts+=("--event:Filter the events by name")
            ;;

            ide-helper:eloquent)
            opts+=()
            ;;

            ide-helper:generate)
            opts+=("--write_mixins:Write mixins to Laravel Model\?" "--helpers:Include the helper files" "--memory:Use sqlite memory driver")
            ;;

            ide-helper:meta)
            opts+=("--filename:The path to the meta file")
            ;;

            ide-helper:models)
            opts+=("--filename:The path to the helper file" "--dir:The model dir, supports glob patterns" "--write:Write to Model file" "--write-mixin:Write models to  and adds @mixin to each model, avoiding IDE duplicate declaration warnings" "--nowrite:Don\'t write to Model file" "--reset:Remove the original phpdocs instead of appending" "--smart-reset:Refresh the properties/methods list, but keep the text" "--phpstorm-noinspections:Add PhpFullyQualifiedNameUsageInspection and PhpUnnecessaryFullyQualifiedNameInspection PHPStorm noinspection tags" "--ignore:Which models to ignore")
            ;;

            inertia:middleware)
            opts+=("--force:Create the class even if the Middleware already exists")
            ;;

            inertia:start-ssr)
            opts+=("--runtime:The runtime to use \(\`node\` or \`bun\`\)")
            ;;

            inertia:stop-ssr)
            opts+=()
            ;;

            key:generate)
            opts+=("--show:Display the key instead of modifying files" "--force:Force the operation to run when in production")
            ;;

            lang:publish)
            opts+=("--existing:Publish and overwrite only the files that have already been published" "--force:Overwrite any existing files")
            ;;

            make:cast)
            opts+=("--force:Create the class even if the cast already exists" "--inbound:Generate an inbound cast class")
            ;;

            make:channel)
            opts+=("--force:Create the class even if the channel already exists")
            ;;

            make:command)
            opts+=("--force:Create the class even if the console command already exists" "--command:The terminal command that will be used to invoke the class" "--test:Generate an accompanying PHPUnit test for the Console command" "--pest:Generate an accompanying Pest test for the Console command")
            ;;

            make:component)
            opts+=("--force:Create the class even if the component already exists" "--inline:Create a component that renders an inline view" "--view:Create an anonymous component with only a view" "--test:Generate an accompanying PHPUnit test for the Component" "--pest:Generate an accompanying Pest test for the Component")
            ;;

            make:controller)
            opts+=("--api:Exclude the create and edit methods from the controller" "--type:Manually specify the controller stub file to use" "--force:Create the class even if the controller already exists" "--invokable:Generate a single method, invokable controller class" "--model:Generate a resource controller for the given model" "--parent:Generate a nested resource controller class" "--resource:Generate a resource controller class" "--requests:Generate FormRequest classes for store and update" "--singleton:Generate a singleton resource controller class" "--creatable:Indicate that a singleton resource should be creatable" "--test:Generate an accompanying PHPUnit test for the Controller" "--pest:Generate an accompanying Pest test for the Controller")
            ;;

            make:event)
            opts+=("--force:Create the class even if the event already exists")
            ;;

            make:exception)
            opts+=("--force:Create the class even if the exception already exists" "--render:Create the exception with an empty render method" "--report:Create the exception with an empty report method")
            ;;

            make:factory)
            opts+=("--model:The name of the model")
            ;;

            make:job)
            opts+=("--force:Create the class even if the job already exists" "--sync:Indicates that job should be synchronous" "--test:Generate an accompanying PHPUnit test for the Job" "--pest:Generate an accompanying Pest test for the Job")
            ;;

            make:listener)
            opts+=("--event:The event class being listened for" "--force:Create the class even if the listener already exists" "--queued:Indicates the event listener should be queued" "--test:Generate an accompanying PHPUnit test for the Listener" "--pest:Generate an accompanying Pest test for the Listener")
            ;;

            make:mail)
            opts+=("--force:Create the class even if the mailable already exists" "--markdown:Create a new Markdown template for the mailable" "--test:Generate an accompanying PHPUnit test for the Mailable" "--pest:Generate an accompanying Pest test for the Mailable")
            ;;

            make:middleware)
            opts+=("--test:Generate an accompanying PHPUnit test for the Middleware" "--pest:Generate an accompanying Pest test for the Middleware")
            ;;

            make:migration)
            opts+=("--create:The table to be created" "--table:The table to migrate" "--path:The location where the migration file should be created" "--realpath:Indicate any provided migration file paths are pre-resolved absolute paths" "--fullpath:Output the full path of the migration \(Deprecated\)")
            ;;

            make:model)
            opts+=("--all:Generate a migration, seeder, factory, policy, resource controller, and form request classes for the model" "--controller:Create a new controller for the model" "--factory:Create a new factory for the model" "--force:Create the class even if the model already exists" "--migration:Create a new migration file for the model" "--morph-pivot:Indicates if the generated model should be a custom polymorphic intermediate table model" "--policy:Create a new policy for the model" "--seed:Create a new seeder for the model" "--pivot:Indicates if the generated model should be a custom intermediate table model" "--resource:Indicates if the generated controller should be a resource controller" "--api:Indicates if the generated controller should be an API resource controller" "--requests:Create new form request classes and use them in the resource controller" "--test:Generate an accompanying PHPUnit test for the Model" "--pest:Generate an accompanying Pest test for the Model")
            ;;

            make:notification)
            opts+=("--force:Create the class even if the notification already exists" "--markdown:Create a new Markdown template for the notification" "--test:Generate an accompanying PHPUnit test for the Notification" "--pest:Generate an accompanying Pest test for the Notification")
            ;;

            make:observer)
            opts+=("--force:Create the class even if the observer already exists" "--model:The model that the observer applies to")
            ;;

            make:policy)
            opts+=("--force:Create the class even if the policy already exists" "--model:The model that the policy applies to" "--guard:The guard that the policy relies on")
            ;;

            make:provider)
            opts+=("--force:Create the class even if the provider already exists")
            ;;

            make:request)
            opts+=("--force:Create the class even if the request already exists")
            ;;

            make:resource)
            opts+=("--force:Create the class even if the resource already exists" "--collection:Create a resource collection")
            ;;

            make:rule)
            opts+=("--force:Create the class even if the rule already exists" "--implicit:Generate an implicit rule")
            ;;

            make:scope)
            opts+=("--force:Create the class even if the scope already exists")
            ;;

            make:seeder)
            opts+=()
            ;;

            make:test)
            opts+=("--force:Create the class even if the test already exists" "--unit:Create a unit test" "--pest:Create a Pest test")
            ;;

            make:view)
            opts+=("--extension:The extension of the generated view" "--force:Create the view even if the view already exists" "--test:Generate an accompanying PHPUnit test for the View" "--pest:Generate an accompanying Pest test for the View")
            ;;

            migrate:fresh)
            opts+=("--database:The database connection to use" "--drop-views:Drop all tables and views" "--drop-types:Drop all tables and types \(Postgres only\)" "--force:Force the operation to run when in production" "--path:The path\(s\) to the migrations files to be executed" "--realpath:Indicate any provided migration file paths are pre-resolved absolute paths" "--schema-path:The path to a schema dump file" "--seed:Indicates if the seed task should be re-run" "--seeder:The class name of the root seeder" "--step:Force the migrations to be run so they can be rolled back individually")
            ;;

            migrate:install)
            opts+=("--database:The database connection to use")
            ;;

            migrate:refresh)
            opts+=("--database:The database connection to use" "--force:Force the operation to run when in production" "--path:The path\(s\) to the migrations files to be executed" "--realpath:Indicate any provided migration file paths are pre-resolved absolute paths" "--seed:Indicates if the seed task should be re-run" "--seeder:The class name of the root seeder" "--step:The number of migrations to be reverted \& re-run")
            ;;

            migrate:reset)
            opts+=("--database:The database connection to use" "--force:Force the operation to run when in production" "--path:The path\(s\) to the migrations files to be executed" "--realpath:Indicate any provided migration file paths are pre-resolved absolute paths" "--pretend:Dump the SQL queries that would be run")
            ;;

            migrate:rollback)
            opts+=("--database:The database connection to use" "--force:Force the operation to run when in production" "--path:The path\(s\) to the migrations files to be executed" "--realpath:Indicate any provided migration file paths are pre-resolved absolute paths" "--pretend:Dump the SQL queries that would be run" "--step:The number of migrations to be reverted" "--batch:The batch of migrations \(identified by their batch number\) to be reverted")
            ;;

            migrate:status)
            opts+=("--database:The database connection to use" "--pending:Only list pending migrations" "--path:The path\(s\) to the migrations files to use" "--realpath:Indicate any provided migration file paths are pre-resolved absolute paths")
            ;;

            model:prune)
            opts+=("--model:Class names of the models to be pruned" "--except:Class names of the models to be excluded from pruning" "--chunk:The number of models to retrieve per chunk of models to be deleted" "--pretend:Display the number of prunable records found instead of deleting them")
            ;;

            model:show)
            opts+=("--database:The database connection to use" "--json:Output the model as JSON")
            ;;

            notifications:table)
            opts+=()
            ;;

            nova:action)
            opts+=("--destructive:Indicate that the action deletes / destroys resources" "--queued:Indicates the action should be queued")
            ;;

            nova:asset)
            opts+=()
            ;;

            nova:base-resource)
            opts+=()
            ;;

            nova:card)
            opts+=()
            ;;

            nova:check-license)
            opts+=()
            ;;

            nova:custom-filter)
            opts+=()
            ;;

            nova:dashboard)
            opts+=()
            ;;

            nova:field)
            opts+=()
            ;;

            nova:filter)
            opts+=("--boolean:Indicates if the generated filter should be a boolean filter" "--date:Indicates if the generated filter should be a date filter")
            ;;

            nova:install)
            opts+=()
            ;;

            nova:lens)
            opts+=()
            ;;

            nova:partition)
            opts+=()
            ;;

            nova:progress)
            opts+=()
            ;;

            nova:publish)
            opts+=("--force:Overwrite any existing files")
            ;;

            nova:resource)
            opts+=("--model:The model class being represented.")
            ;;

            nova:resource-tool)
            opts+=()
            ;;

            nova:stubs)
            opts+=("--force:Overwrite any existing files")
            ;;

            nova:table)
            opts+=()
            ;;

            nova:tool)
            opts+=()
            ;;

            nova:translate)
            opts+=("--force:Overwrite any existing files")
            ;;

            nova:trend)
            opts+=()
            ;;

            nova:upgrade)
            opts+=()
            ;;

            nova:user)
            opts+=()
            ;;

            nova:value)
            opts+=()
            ;;

            optimize:clear)
            opts+=()
            ;;

            package:discover)
            opts+=()
            ;;

            posts:import)
            opts+=()
            ;;

            queue:batches-table)
            opts+=()
            ;;

            queue:clear)
            opts+=("--queue:The name of the queue to clear" "--force:Force the operation to run when in production")
            ;;

            queue:failed)
            opts+=()
            ;;

            queue:failed-table)
            opts+=()
            ;;

            queue:flush)
            opts+=("--hours:The number of hours to retain failed job data")
            ;;

            queue:forget)
            opts+=()
            ;;

            queue:listen)
            opts+=("--name:The name of the worker" "--delay:The number of seconds to delay failed jobs \(Deprecated\)" "--backoff:The number of seconds to wait before retrying a job that encountered an uncaught exception" "--force:Force the worker to run even in maintenance mode" "--memory:The memory limit in megabytes" "--queue:The queue to listen on" "--sleep:Number of seconds to sleep when no job is available" "--rest:Number of seconds to rest between jobs" "--timeout:The number of seconds a child process can run" "--tries:Number of times to attempt a job before logging it failed")
            ;;

            queue:monitor)
            opts+=("--max:The maximum number of jobs that can be on the queue before an event is dispatched")
            ;;

            queue:prune-batches)
            opts+=("--hours:The number of hours to retain batch data" "--unfinished:The number of hours to retain unfinished batch data" "--cancelled:The number of hours to retain cancelled batch data")
            ;;

            queue:prune-failed)
            opts+=("--hours:The number of hours to retain failed jobs data")
            ;;

            queue:restart)
            opts+=()
            ;;

            queue:retry)
            opts+=("--queue:Retry all of the failed jobs for the specified queue" "--range:Range of job IDs \(numeric\) to be retried \(e.g. 1-5\)")
            ;;

            queue:retry-batch)
            opts+=("--isolated:Do not run the command if another instance of the command is already running")
            ;;

            queue:table)
            opts+=()
            ;;

            queue:work)
            opts+=("--name:The name of the worker" "--queue:The names of the queues to work" "--daemon:Run the worker in daemon mode \(Deprecated\)" "--once:Only process the next job on the queue" "--stop-when-empty:Stop when the queue is empty" "--delay:The number of seconds to delay failed jobs \(Deprecated\)" "--backoff:The number of seconds to wait before retrying a job that encountered an uncaught exception" "--max-jobs:The number of jobs to process before stopping" "--max-time:The maximum number of seconds the worker should run" "--force:Force the worker to run even in maintenance mode" "--memory:The memory limit in megabytes" "--sleep:Number of seconds to sleep when no job is available" "--rest:Number of seconds to rest between jobs" "--timeout:The number of seconds a child process can run" "--tries:Number of times to attempt a job before logging it failed")
            ;;

            route:cache)
            opts+=()
            ;;

            route:clear)
            opts+=()
            ;;

            route:list)
            opts+=("--json:Output the route list as JSON" "--method:Filter the routes by method" "--name:Filter the routes by name" "--domain:Filter the routes by domain" "--path:Only show routes matching the given path pattern" "--except-path:Do not display the routes matching the given path pattern" "--reverse:Reverse the ordering of the routes" "--sort:The column \(domain, method, uri, name, action, middleware\) to sort by" "--except-vendor:Do not display routes defined by vendor packages" "--only-vendor:Only display routes defined by vendor packages")
            ;;

            sail:add)
            opts+=()
            ;;

            sail:install)
            opts+=("--with:The services that should be included in the installation" "--devcontainer:Create a .devcontainer configuration directory")
            ;;

            sail:publish)
            opts+=()
            ;;

            sanctum:prune-expired)
            opts+=("--hours:The number of hours to retain expired Sanctum tokens")
            ;;

            schedule:clear-cache)
            opts+=()
            ;;

            schedule:finish)
            opts+=()
            ;;

            schedule:interrupt)
            opts+=()
            ;;

            schedule:list)
            opts+=("--timezone:The timezone that times should be displayed in" "--next:Sort the listed tasks by their next due date")
            ;;

            schedule:run)
            opts+=()
            ;;

            schedule:test)
            opts+=("--name:The name of the scheduled command to run")
            ;;

            schedule:work)
            opts+=("--run-output-file:The file to direct <info>schedule:run</info> output to")
            ;;

            schema:dump)
            opts+=("--database:The database connection to use" "--path:The path where the schema dump file should be stored" "--prune:Delete all existing migration files")
            ;;

            sentry:publish)
            opts+=("--dsn" "--without-performance-monitoring" "--without-test" "--without-javascript-sdk")
            ;;

            sentry:test)
            opts+=("--transaction" "--dsn")
            ;;

            session:table)
            opts+=()
            ;;

            storage:link)
            opts+=("--relative:Create the symbolic link using relative paths" "--force:Recreate existing symbolic links")
            ;;

            stub:publish)
            opts+=("--existing:Publish and overwrite only the files that have already been published" "--force:Overwrite any existing files")
            ;;

            turbo:install)
            opts+=("--alpine:To add Alpine as a JS dependency." "--jet:To update the Jetstream templates.")
            ;;

            ui:auth)
            opts+=("--views:Only scaffold the authentication views" "--force:Overwrite existing views by default")
            ;;

            ui:controllers)
            opts+=()
            ;;

            vendor:publish)
            opts+=("--existing:Publish and overwrite only the files that have already been published" "--force:Overwrite any existing files" "--all:Publish assets for all service providers without prompt" "--provider:The service provider that has assets you want to publish" "--tag:One or many tags that have assets you want to publish")
            ;;

            view:cache)
            opts+=()
            ;;

            view:clear)
            opts+=()
            ;;

            webpush:vapid)
            opts+=("--show:Display the keys instead of modifying files" "--force:Force the operation to run when in production")
            ;;

            esac

            _describe 'option' opts
        ;;
        *)
            # fallback to file completion
            _arguments '*:file:_files'
    esac
}

compdef _artisan artisan
