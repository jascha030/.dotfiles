{"maintainers":[{"name":"ponJenkinsIntegration","email":"info@pondevelopment.com"}],"dist-tags":{"latest":"1.0.9"},"versions":{"1.0.9":{"name":"mind-module-authentication","version":"1.0.9","scripts":{"build":"ngc -p tsconfig.json","lint":"tslint --type-check --project tsconfig.json src/**/*.ts","test":"tsc && karma start","test-singlerun":"tsc && karma start --single-run"},"publishConfig":{"registry":"https://nexusrepo.pondevelopment.com/repository/mind-npm/"},"repository":{"type":"git","url":"git+ssh://git@bitbucket.org/pondevelopment/mind-auth-service.git"},"author":{"name":"Han van Venrooij","email":"han.van.venrooij@pon.com"},"keywords":["angular"],"license":"MIT","bugs":{"url":"https://pondevelopment.atlassian.net/"},"main":"dist/index.js","module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"@angular/common":"^4.0.0","@angular/core":"^4.0.0","@angular/http":"^4.0.0","mind-module-error-handling":"^1.0.0","rxjs":"^5.1.0","zone.js":"^0.8.4"},"devDependencies":{"@angular/common":"^4.0.0","@angular/core":"^4.0.0","@angular/compiler":"^4.0.0","@angular/compiler-cli":"^4.0.0","@angular/http":"^4.0.0","@angular/platform-browser":"^4.0.0","@angular/platform-browser-dynamic":"^4.0.0","@types/jasmine":"2.5.38","@types/node":"~6.0.60","codelyzer":"~2.0.0","core-js":"^2.4.1","jasmine-core":"~2.5.2","jasmine-spec-reporter":"~3.2.0","karma":"~1.4.1","karma-cli":"~1.0.1","karma-coverage":"^1.1.1","karma-coverage-istanbul-reporter":"^0.2.0","karma-jasmine":"~1.1.0","karma-jasmine-html-reporter":"^0.2.2","karma-phantomjs-launcher":"^1.0.4","karma-typescript":"^3.0.0","karma-typescript-angular2-transform":"^1.0.0","mind-module-error-handling":"^1.0.0","protractor":"~5.1.0","ts-mockito":"^1.2.0","ts-node":"~2.0.0","tslint":"~4.5.0","typescript":"~2.2.0","rxjs":"^5.1.0","zone.js":"^0.8.4"},"engines":{"node":">=6.0.0"},"gitHead":"81ca1d3abff8931ebbc8bf2176a6a06e8a21d54b","readme":"# mind-module-authentication\n\nThis repo contains a service to authenticate against the CenterSight authentication service.\n\n## Usage\n\nTo install this library, run:\n\n```bash\n$ npm install mind-module-authentication --save\n```\n\nThen, include the `AuthModule` in your Angular `AppModule`:\n\n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n// Import your library\nimport { AuthModule, AuthenticationService, AuthConfig } from 'mind-module-authentication';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AuthModule // <--------------------- The thingamagiggy here!\n  ],\n  providers: [\n    {\n      provide: AuthConfig, // <--------- Note that you must provide an instance of the AuthConfig\n      useValue: new AuthConfig(\n        'myhost',\n        'client-id',\n        'client-secret',\n        'pon'\n      )\n    }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\nNote that you *must* provide an instance of the `AuthConfig` class for DI. This configuration tells the authorization service where we can find the authorization backend and which client credentials should be used.\n\n### Authentication service \n\nThe authentication service provides the following interface:\n```typescript\ninterface AuthenticationService {\n  /** Authenticates the user identified with the username and password combination */\n  authenticate(username: string, password: string, scopes: string[] = []): Promise<Token>;\n  /** Authenticates the client identified with the client ID and credentials as configured in the AuthConfig*/\n  authenticateClient(scopes: string[] = []): Promise<Token>;\n  /** Refreshes the token */\n  refreshToken(token: Token): Promise<Token>;\n}\n```\n\nNote that the returned promises above can fail due to a number of reasons. You should therefore, always explicitly deal with the `AuthError`:\n \n```typescript\nauthService.authenticate(user, pw)\n  .then(storeTheToken)\n  .catch(authError => {\n    dealWithTheAuthError(authError);\n  });\n```\n\nOnce you've prepared the authentication for DI as described in the previous section, you can inject the `AuthenticationService` into your own components/modules:\n\n```typescript\nimport {\n  AuthenticationService,\n  Token\n} from 'mind-auth-service';\n\n@Component({\n  selector: 'my-component',\n  template: `...`\n})\nclass MyComponent {\n  constructor(private authService: AuthenticationService) { // <----------------------------------- Injection happens here\n  }\n  \n  login(username: string, password: string) {\n    this.authService.authorize(username, password); // <-------------------------------- Retrieve a user token\n      .then(token => {\n        storeTokenForFutureReference(token);\n        \n        const storedToken = retrieveStoredToken();\n        \n        if (storedToken.hasExpired()) {\n          const anotherEventualAuthResponse = this.authService.refresh(storedToken); // <--- Refresh an old token\n          anotherEventualAuthResponse\n            .then(authResponse2 => {\n                const refreshedToken = <Token> authResponse2;\n                callSomeAuthProtectedAPI(refreshedToken, ...);\n            })\n            .catch(authError => {\n              reportAuthenticationErrorToTheUser(authError);\n            })\n        } else {\n          callSomeAuthProtectedAPI(storedToken, ...);\n        }\n      })\n      .catch(authError => {\n        reportAuthenticationErrorToTheUser(authError);\n      })\n  }\n}\n```\n\n### Credential storage\n\nIt is not user friendly to ask the user to login into the app or website every time he/she wants to use it. Therefore we should be able to store tokens. \n\nThe simple abstract `CredentialStorage` class wraps this functionality. Depending on your platform, this class can be extended to store the token in `SessionStorage` for a website or `SecureStorage` for an APP. The abstract `CredentialStorage` class has the following methods (note the abstract ones should still be implemented in the platform specific implementation):\n\n```typescript\nexport abstract class CredentialStorage {\n  /** Retrieves the token from storage. Note that this should not refresh the token in case it has expired. */\n  protected abstract retrieveTokenFromStorage(): Promise<Token>;\n  /** Store the passed token */\n  abstract storeToken(token: Token): Promise<void>;\n  /** Clears the token. Essentially, this will log the user out. */\n  abstract clear(): Promise<void>;\n  \n  /** Returns true iff a token has been stored */\n  hasCredentials(): Promise<boolean>;\n  /** Returns the stored token. If then token has expired, this will automatically refresh it. */\n  retrieveToken(): Promise<Token>;\n}\n```\n\nFor testing (and example) purposes a dummy implementation has been provided by the `InMemoryCredentialStorage` class. This implementation should only be used for testing or reference purposes, since this will forget the token when the app or website is closed. \n\n## Development\n\nTo generate all `*.js`, `*.js.map` and `*.d.ts` files:\n\n```bash\n$ npm run tsc\n```\n\nAfterwards, the compiled `js` files can be found in the `./dist` directory.\n\nTo lint all `*.ts` files:\n\n```bash\n$ npm run lint\n```\n\nDuring development the unit tests can automatically be run using PhantomJS:\n\n```bash\n$ npm test\n```\n\nWhen a file has been changed/added/deleted, the tests will automatically be rerun.\n\nThe coverage of the tests will be monitored. The results can be found in: `./coverage/PhantomJS <some version and platform>/index.html`. To view the results, simply open this file in your favorite browser (supporting javascript).\n\nTo test your changes locally in an angular app, you could link this module to your global `node_modules` without publishing the module:\n\n```bash\n$ cd /path/to/mind-module-authentication/\n$ npm link\n$ cd /path/to/your/angular2/app/\n$ npm link mind-module-authentication\n```\n\nThis will create a symlink between the mind-module-authentication and the `node_modules` of your angular 2 app.\n\n## License\n\nMIT Â© [Mind mobility](mailto:info@mindmobility.nl)\n","readmeFilename":"README.md","description":"This repo contains a service to authenticate against the CenterSight authentication service.","homepage":"https://bitbucket.org/pondevelopment/mind-auth-service#readme","_id":"mind-module-authentication@1.0.9","_npmVersion":"5.6.0","_nodeVersion":"7.8.0","_npmUser":{"name":"ponJenkinsIntegration","email":"info@pondevelopment.com"},"maintainers":[{"name":"ponJenkinsIntegration","email":"info@pondevelopment.com"}],"dist":{"integrity":"sha512-M490T0hNDvq08PiXd0H4/kv3xQM4KXLWArQyF79au8M+GQwZ/5S8Pgy00rg+28fxHo06spLANali14tcyFjjkw==","shasum":"b434df6bb290e0833a30da3aa68fe7b1e41acbd8","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/mind-module-authentication/-/mind-module-authentication-1.0.9.tgz"}}},"name":"mind-module-authentication","_rev":"563","description":"This repo contains a service to authenticate against the CenterSight authentication service.","readme":"# mind-module-authentication\n\nThis repo contains a service to authenticate against the CenterSight authentication service.\n\n## Usage\n\nTo install this library, run:\n\n```bash\n$ npm install mind-module-authentication --save\n```\n\nThen, include the `AuthModule` in your Angular `AppModule`:\n\n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n// Import your library\nimport { AuthModule, AuthenticationService, AuthConfig } from 'mind-module-authentication';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AuthModule // <--------------------- The thingamagiggy here!\n  ],\n  providers: [\n    {\n      provide: AuthConfig, // <--------- Note that you must provide an instance of the AuthConfig\n      useValue: new AuthConfig(\n        'myhost',\n        'client-id',\n        'client-secret',\n        'pon'\n      )\n    }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\nNote that you *must* provide an instance of the `AuthConfig` class for DI. This configuration tells the authorization service where we can find the authorization backend and which client credentials should be used.\n\n### Authentication service \n\nThe authentication service provides the following interface:\n```typescript\ninterface AuthenticationService {\n  /** Authenticates the user identified with the username and password combination */\n  authenticate(username: string, password: string, scopes: string[] = []): Promise<Token>;\n  /** Authenticates the client identified with the client ID and credentials as configured in the AuthConfig*/\n  authenticateClient(scopes: string[] = []): Promise<Token>;\n  /** Refreshes the token */\n  refreshToken(token: Token): Promise<Token>;\n}\n```\n\nNote that the returned promises above can fail due to a number of reasons. You should therefore, always explicitly deal with the `AuthError`:\n \n```typescript\nauthService.authenticate(user, pw)\n  .then(storeTheToken)\n  .catch(authError => {\n    dealWithTheAuthError(authError);\n  });\n```\n\nOnce you've prepared the authentication for DI as described in the previous section, you can inject the `AuthenticationService` into your own components/modules:\n\n```typescript\nimport {\n  AuthenticationService,\n  Token\n} from 'mind-auth-service';\n\n@Component({\n  selector: 'my-component',\n  template: `...`\n})\nclass MyComponent {\n  constructor(private authService: AuthenticationService) { // <----------------------------------- Injection happens here\n  }\n  \n  login(username: string, password: string) {\n    this.authService.authorize(username, password); // <-------------------------------- Retrieve a user token\n      .then(token => {\n        storeTokenForFutureReference(token);\n        \n        const storedToken = retrieveStoredToken();\n        \n        if (storedToken.hasExpired()) {\n          const anotherEventualAuthResponse = this.authService.refresh(storedToken); // <--- Refresh an old token\n          anotherEventualAuthResponse\n            .then(authResponse2 => {\n                const refreshedToken = <Token> authResponse2;\n                callSomeAuthProtectedAPI(refreshedToken, ...);\n            })\n            .catch(authError => {\n              reportAuthenticationErrorToTheUser(authError);\n            })\n        } else {\n          callSomeAuthProtectedAPI(storedToken, ...);\n        }\n      })\n      .catch(authError => {\n        reportAuthenticationErrorToTheUser(authError);\n      })\n  }\n}\n```\n\n### Credential storage\n\nIt is not user friendly to ask the user to login into the app or website every time he/she wants to use it. Therefore we should be able to store tokens. \n\nThe simple abstract `CredentialStorage` class wraps this functionality. Depending on your platform, this class can be extended to store the token in `SessionStorage` for a website or `SecureStorage` for an APP. The abstract `CredentialStorage` class has the following methods (note the abstract ones should still be implemented in the platform specific implementation):\n\n```typescript\nexport abstract class CredentialStorage {\n  /** Retrieves the token from storage. Note that this should not refresh the token in case it has expired. */\n  protected abstract retrieveTokenFromStorage(): Promise<Token>;\n  /** Store the passed token */\n  abstract storeToken(token: Token): Promise<void>;\n  /** Clears the token. Essentially, this will log the user out. */\n  abstract clear(): Promise<void>;\n  \n  /** Returns true iff a token has been stored */\n  hasCredentials(): Promise<boolean>;\n  /** Returns the stored token. If then token has expired, this will automatically refresh it. */\n  retrieveToken(): Promise<Token>;\n}\n```\n\nFor testing (and example) purposes a dummy implementation has been provided by the `InMemoryCredentialStorage` class. This implementation should only be used for testing or reference purposes, since this will forget the token when the app or website is closed. \n\n## Development\n\nTo generate all `*.js`, `*.js.map` and `*.d.ts` files:\n\n```bash\n$ npm run tsc\n```\n\nAfterwards, the compiled `js` files can be found in the `./dist` directory.\n\nTo lint all `*.ts` files:\n\n```bash\n$ npm run lint\n```\n\nDuring development the unit tests can automatically be run using PhantomJS:\n\n```bash\n$ npm test\n```\n\nWhen a file has been changed/added/deleted, the tests will automatically be rerun.\n\nThe coverage of the tests will be monitored. The results can be found in: `./coverage/PhantomJS <some version and platform>/index.html`. To view the results, simply open this file in your favorite browser (supporting javascript).\n\nTo test your changes locally in an angular app, you could link this module to your global `node_modules` without publishing the module:\n\n```bash\n$ cd /path/to/mind-module-authentication/\n$ npm link\n$ cd /path/to/your/angular2/app/\n$ npm link mind-module-authentication\n```\n\nThis will create a symlink between the mind-module-authentication and the `node_modules` of your angular 2 app.\n\n## License\n\nMIT Â© [Mind mobility](mailto:info@mindmobility.nl)\n","time":{"created":"2019-03-13T08:22:05.931Z","1.0.9":"2019-03-13T08:22:05.931Z","modified":"2019-03-19T09:32:26.977Z"},"_id":"mind-module-authentication"}