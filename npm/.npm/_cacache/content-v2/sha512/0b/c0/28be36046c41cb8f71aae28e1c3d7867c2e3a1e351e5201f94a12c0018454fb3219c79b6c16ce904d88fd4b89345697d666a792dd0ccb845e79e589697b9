{"maintainers":[{"name":"jsmreese","email":"jsmreese@pureshare.com"}],"keywords":["moment","duration","format"],"dist-tags":{"latest":"2.3.2"},"_rev":"349","description":"A moment.js plugin for formatting durations.","readme":"# Moment Duration Format\n\n**Format plugin for the Moment Duration object.**\n\nThis is a plugin to the Moment.js JavaScript date library to add comprehensive formatting to Moment Durations.\n\nFormat template grammar is patterned on the existing Moment Date format template grammar, with a few modifications because durations are fundamentally different from dates.\n\nThis plugin does not have any dependencies beyond Moment.js itself, and may be used in the browser and in Node.js.\n\n---\n\n## Formatting Numbers and Testing\n\nWhere it is available and functional, this plugin uses either `Intl.NumberFormat#format` or `Number#toLocaleString` to render formatted numerical output. Unfortunately, many environments do not fully implement the full suite of options in their respective specs, and some provide a buggy implementation.\n\nThis plugin runs a feature test for each formatter, and will revert to a fallback function to render formatted numerical output if the feature test fails. To force this plugin to always use the fallback number format function, set `useToLocaleString` to `false`. The fallback number format function output can be localized using options detailed at the bottom of this page. You should, in general, specify the fallback number formatting options if the default `\"en\"` locale formatting would be unacceptable on some devices or in some environments.\n\nThis plugin is tested using BrowserStack on a range of Android devices with OS versions from 2.2 to 7, and on a range of iOS devices with OS versions from 4.3 to 11. Also tested on Chrome, Firefox, IE 8-11, and Edge browsers.\n\n<a href=\"https://www.browserstack.com\"><img src=\"https://p3.zdusercontent.com/attachment/1015988/Y0ZmOS3862TDx3JYOUTMIixSG?token=eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..xr8Y-gqQNBDnpIjxOFtAtA.JHb-wwL0uWT5ChR01yhMKp2lvM0iMdeYdoJYLCqs_DIiod7HmRoaGnRMoptV1GlrwF2Mo73Oj1d08E3rM7RHQPzwP3M10g4aN-vWcC2K743sf1qUKE_2TGVaz1HLkfUxF49U5hfE6AZ9V9ALE-Nu-GwfR0xcJVBz-FeV-H7YseaX_fXsO4pt1F3DjcwqhM1pcKfxoC5wYc2CHQnnqp1xS67KfTA6kuMiSDovZqSQpvg5VYZqAlDmxpKkZvOmzP_yEptqk4CDkl5IMItvxPjjaw.w7SKsx3c665glH7fgdcSIw\" height=\"64\"></a>\n\nPlease raise an issue if you notice formatting issues or anomalies in any environment!\n\n---\n\n## Roadmap\n\n### Version 2\n\nA few items remain to finish off Version 2:\n\n- Add type definitions to support TypeScript, publish NuGet package, and support whatever other packaging options are in use these days.\n\n- Testing of the plugin should be modernized, ideally to match the Moment.js testing setup.\n\n### Version 3\n\nHaving implemented version 2 of the moment-duration-format plugin, there are some obvious improvements for a version 3.\n\nThe ideas below are logged as issues and tagged with the [3.0.0 milestone](https://github.com/jsmreese/moment-duration-format/milestone/6). If you have ideas or comments about what you'd like to see, please log an issue on this project!\n\n- The fallback number formatting localization options should be included with the Moment Locale object extensions this plugin already adds for localizing duration unit labels. This would put all of the localization configuration in one place.\n\n- moment-duration-format and its fallback number formatting function do not follow the same API as `Number#toLocaleString` for significant digits and faction digits. The fallback function should be updated to use the `toLocaleString` API, and the plugin should expose the API options directly rather than hiding some of the options and masking them behind `precision` and `useSignificantDigits` options.\n\n- Exposing the fallback number formatting function as well as the formatter feature test function would facilitate testing and allow them to be used outside of the context of formatting durations.\n\n---\n\n## Installation\n\nThe plugin depends on moment.js, which is not specified as a package dependency in the currently published version.\n\n**Node.js**\n\n`npm install moment-duration-format`\n\n**Bower**\n\n`bower install moment-duration-format`\n\n**Browser**\n\n`<script src=\"path/to/moment-duration-format.js\"></script>`\n\n---\n\n## Usage\n\nThis plugin will always try to install itself on the `root.moment` instance, if it exists.\n\nThis plugin will install its setup function to `root.momentDurationFormatSetup` so that it may be later called on any moment instance.\n\n### Browser\n\nWhen using this plugin in the browser, if you do not include moment.js on your page first, you need to manually call `window.momentDurationFormatSetup` on your moment instance once it is created.\n\n### Module\n\nTo use this plugin as a module, use the `require` function.\n\n```javascript\nvar moment = require(\"moment\");\nvar momentDurationFormatSetup = require(\"moment-duration-format\");\n```\n\nThe plugin exports the init function so that duration format can be initialized on other moment instances.\n\nTo use this plugin with any other moment.js package, for example `moment-timezone`, manually call the exported setup function to install the plugin into the desired package.\n\n```javascript\nvar moment = require(\"moment-timezone\");\nvar momentDurationFormatSetup = require(\"moment-duration-format\");\n\nmomentDurationFormatSetup(moment);\ntypeof moment.duration.fn.format === \"function\";\n// true\ntypeof moment.duration.format === \"function\";\n// true\n```\n\n### Basics\n\n#### Formatting a Single Duration\n\n```javascript\nmoment.duration.fn.format\n```\n\nThe `duration.fn.format` method can format any moment duration. If no template or other arguments are provided, the default template function will generate a template string based on the duration's value.\n\n```javascript\nmoment.duration(123, \"minutes\").format();\n// \"2:03:00\"\n\nmoment.duration(123, \"months\").format();\n// \"10 years, 3 months\"\n```\n\nThe duration format method may be called with three optional arguments, and returns a formatted string.\n\n```javascript\nmoment.duration(value, units).format([template] [, precision] [, settings])\n// formattedString\n```\n\n#### Formatting Multiple Durations\n\n```javascript\nmoment.duration.format\n```\n\nThe `duration.format` method allows coordinated formatting of multiple moment durations at once. This function accepts an array of durations as its first argument, then the same three optional arguments as the `duration.fn.format` function. This function returns an array of formatted strings.\n\n```javascript\nmoment.duration.format(durationsArray, [template] [, precision] [, settings]);\n// formattedStringsArray\n```\n\nAll of the options that are available to the single duration format function can be used with the multiple duration format function. A single settings object is used to format each of the individual durations.\n\n```javascript\nmoment.duration.format([\n    moment.duration(1, \"second\"),\n    moment.duration(1, \"minute\"),\n    moment.duration(1, \"hour\")\n], \"d [days] hh:mm:ss\");\n// [\"0:00:01\", \"0:01:00\", \"1:00:00\"]\n```\n\n##### Invalid Durations\n\nInvalid durations are treated as having a value of `0` for formatting.\n\n```javascript\nvar invalidDuration = moment.duration(NaN, \"second\");\n\ninvalidDuration.isValid();\n// false\n\ninvalidDuration.format();\n// \"0 seconds\"\n```\n\n### Template\n\n`template` (string|function) is the string used to create the formatted output, or a function that returns the string to be used as the format template.\n\n#### Template String\n\n```javascript\nmoment.duration(123, \"minutes\").format(\"h:mm\");\n// \"2:03\"\n```\n\nThe template string is parsed for moment token characters, which are replaced with the duration's value for each unit type. The moment tokens are:\n\n```\nyears:   Y or y\nmonths:  M\nweeks:   W or w\ndays:    D or d\nhours:   H or h\nminutes: m\nseconds: s\nms:      S\n```\n\nEscape token characters within the template string using square brackets.\n```javascript\nmoment.duration(123, \"minutes\").format(\"h [hrs], m [min]\");\n// \"2 hrs, 3 mins\"\n```\n\n#### Token Length\n\nFor some time duration formats, a zero-padded value is required. Use multiple token  characters together to create the correct amount of padding.\n\n```javascript\nmoment.duration(3661, \"seconds\").format(\"h:mm:ss\");\n// \"1:01:01\"\n\nmoment.duration(15, \"seconds\").format(\"sss [s]\");\n// \"015 s\"\n```\n\nWhen the format template is trimmed, token length on the largest-magnitude rendered token can be trimmed as well. See sections **trim** and **forceLength** below for more details.\n\n```javascript\nmoment.duration(123, \"seconds\").format(\"h:mm:ss\");\n// \"2:03\"\n```\n\n##### Milliseconds Token Length\n\nToken length of `2` for milliseconds is a special case, most likely used to render milliseconds as part of a timer output, such as `mm:ss:SS`. In this case, the milliseconds value is padded to three digits then truncated from the left to render a two digit output.\n\n```javascript\nmoment.duration(9, \"milliseconds\").format(\"mm:ss:SS\", {\n    trim: false\n});\n// \"00:00:00\"\n\nmoment.duration(10, \"milliseconds\").format(\"mm:ss:SS\", {\n    trim: false\n});\n// \"00:00:01\"\n\nmoment.duration(999, \"milliseconds\").format(\"mm:ss:SS\", {\n    trim: false\n});\n// \"00:00:99\"\n\nmoment.duration(1011, \"milliseconds\").format(\"mm:ss:SS\", {\n    trim: false\n});\n// \"00:01:01\"\n```\n\n#### Multiple Token Instances\n\nTokens can appear multiple times in the format template, but all instances must share the same length. If they do not, all instances will be rendered at the length of the first token of that type.\n\n```javascript\nmoment.duration(15, \"seconds\").format(\"ssss sss ss s\");\n// \"0015 0015 0015 0015\"\n\nmoment.duration(15, \"seconds\").format(\"s ss sss ssss\");\n// \"15 15 15 15\"\n```\n\n#### Default Template Function\n\nThe default template function attempts to format a duration based on its magnitude. The larger the duration value, the larger the units of the formatted output will be.\n\nFor some duration values, the default template function will default `trim` to `\"both\"` if that option is not set in the settings object (more on that below).\n\nThe default template function uses auto-localized unit labels (more on that below, also).\n\n```javascript\nmoment.duration(100, \"milliseconds\").format();\n// \"100 milliseconds\"\n\nmoment.duration(100, \"seconds\").format();\n// \"1:40\"\n\nmoment.duration(100, \"days\").format();\n// \"3 months, 9 days\"\n\nmoment.duration(100, \"weeks\").format();\n// \"1 year, 10 months, 30 days\"\n\nmoment.duration(100, \"months\").format();\n// \"8 years, 4 months\"\n```\n\n#### Custom Template Function\n\nUse a custom template function if you need runtime control over the template string. Template functions are executed with a `this` binding of the settings object, and have access to the underlying duration object via `this.duration`. Any of the settings may be accessed or modified by the template function.\n\nThis custom template function uses a different template based on the value of the duration:\n\n```javascript\nfunction customTemplate() {\n    return this.duration.asSeconds() >= 86400 ? \"w [weeks], d [days]\" : \"hh:mm:ss\";\n}\n\nmoment.duration(65, 'seconds').format(customTemplate, {\n    trim: false\n});\n// \"00:01:05\"\n\nmoment.duration(1347840, 'seconds').format(customTemplate, {\n    trim: false\n});\n// \"2 weeks, 2 days\"\n```\n\n#### Punctuation Trimming\n\nTo ensure user-friendly formatted output, punctuation characters are trimmed from the beginning and end of the formatted output. Specifically, leading and trailing period `.`, comma `,`, colon `:`, and space ` ` characters are removed.\n\n### Precision\n\n`precision` (number) defines the number of decimal fraction or integer digits to display for the final value.\n\nThe default precision value is `0`.\n\n```javascript\nmoment.duration(123, \"minutes\").format(\"h [hrs]\");\n// \"2 hrs\"\n```\n\nPositive precision defines the number of decimal fraction digits to display.\n```javascript\nmoment.duration(123, \"minutes\").format(\"h [hrs]\", 2);\n// \"2.05 hrs\"\n```\n\nNegative precision defines the number of integer digits to truncate to zero.\n```javascript\nmoment.duration(223, \"minutes\").format(\"m [min]\", -2);\n// \"200 mins\"\n```\n\n### Settings\n\n`settings` is an object that can override any of the default moment duration format options.\n\nBoth the `template` and `precision` arguments may be specified as properties of a single `settings` object argument, or they may be passed separately along with an optional settings object.\n\n```javascript\nmoment.duration(123, \"minutes\").format({\n    template: \"h [hrs]\",\n    precision: 2\n});\n// \"2.05 hrs\"\n```\n\n#### trim\n\nThe default `trim` behaviour is `\"large\"`.\n\nLargest-magnitude tokens are automatically trimmed when they have no value.\n```javascript\nmoment.duration(123, \"minutes\").format(\"d[d] h:mm:ss\");\n// \"2:03:00\"\n```\n\nTrimming also functions when the format string is oriented with token magnitude increasing from left to right.\n```javascript\nmoment.duration(123, \"minutes\").format(\"s [seconds], m [minutes], h [hours], d [days]\");\n// \"0 seconds, 3 minutes, 2 hours\"\n```\n\nTo stop trimming altogether, set `{ trim: false }`.\n```javascript\nmoment.duration(123, \"minutes\").format(\"d[d] h:mm:ss\", {\n    trim: false\n});\n// \"0d 2:03:00\"\n```\n\nWhen formatting multiple durations using `moment.duration.format`, trimming for all of the durations is coordinated on the union of the set of durations.\n\n```javascript\nmoment.duration.format([\n    moment.duration(1, \"minute\"),\n    moment.duration(1, \"hour\"),\n    moment.duration(1, \"day\")\n], \"y [years], w [weeks], d [days], h [hours], m [minutes]\");\n// [\n//    \"0 days, 0 hours, 1 minute\",\n//    \"0 days, 1 hour, 0 minutes\",\n//    \"1 day, 0 hours, 0 minutes\"\n// ]\n```\n\n`trim` can be a string, a delimited list of strings, an array of strings, or a boolean. Accepted values are as follows:\n\n- ##### `\"large\"`\n\nTrim largest-magnitude zero-value tokens until finding a token with a value, a token identified as `stopTrim`, or the final token of the format string. This is the default `trim` value.\n\n```javascript\nmoment.duration(123, \"minutes\").format(\"d[d] h:mm:ss\");\n// \"2:03:00\"\n\nmoment.duration(123, \"minutes\").format(\"d[d] h:mm:ss\", {\n    trim: \"large\"\n});\n// \"2:03:00\"\n\nmoment.duration(0, \"minutes\").format(\"d[d] h:mm:ss\", {\n    trim: \"large\"\n});\n// \"0\"\n```\n\n- ##### `\"small\"`\n\nTrim smallest-magnitude zero-value tokens until finding a token with a value, a token identified as `stopTrim`, or the final token of the format string.\n\n```javascript\nmoment.duration(123, \"minutes\").format(\"d[d] h:mm:ss\", {\n    trim: \"small\"\n});\n// \"0d 2:03\"\n\nmoment.duration(0, \"minutes\").format(\"d[d] h:mm:ss\", {\n    trim: \"small\"\n});\n// \"0d\"\n```\n\n- ##### `\"both\"`\n\nExecute `\"large\"` trim then `\"small\"` trim.\n\n```javascript\nmoment.duration(123, \"minutes\").format(\"d[d] h[h] m[m] s[s]\", {\n    trim: \"both\"\n});\n// \"2h 3m\"\n\nmoment.duration(0, \"minutes\").format(\"d[d] h[h] m[m] s[s]\", {\n    trim: \"both\"\n});\n// \"0s\"\n```\n\n- ##### `\"mid\"`\n\nTrim any zero-value tokens that are not the first or last tokens. Usually used in conjunction with `\"large\"` or `\"both\"`. e.g. `\"large mid\"` or `\"both mid\"`.\n\n```javascript\nmoment.duration(1441, \"minutes\").format(\"w[w] d[d] h[h] m[m] s[s]\", {\n    trim: \"mid\"\n});\n// \"0w 1d 1m 0s\"\n\nmoment.duration(1441, \"minutes\").format(\"w[w] d[d] h[h] m[m] s[s]\", {\n    trim: \"large mid\"\n});\n// \"1d 1m 0s\"\n\nmoment.duration(1441, \"minutes\").format(\"w[w] d[d] h[h] m[m] s[s]\", {\n    trim: \"small mid\"\n});\n// \"0w 1d 1m\"\n\nmoment.duration(1441, \"minutes\").format(\"w[w] d[d] h[h] m[m] s[s]\", {\n    trim: \"both mid\"\n});\n// \"1d 1m\"\n\nmoment.duration(0, \"minutes\").format(\"w[w] d[d] h[h] m[m] s[s]\", {\n    trim: \"both mid\"\n});\n// \"0s\"\n```\n\n- ##### `\"final\"`\n\nTrim the final token if it is zero-value. Use this option with `\"large\"` or `\"both\"` to output an empty string when formatting a zero-value duration. e.g. `\"large final\"` or `\"both final\"`.\n\n```javascript\nmoment.duration(0, \"minutes\").format(\"d[d] h:mm:ss\", {\n    trim: \"large final\"\n});\n// \"\"\n\nmoment.duration(0, \"minutes\").format(\"d[d] h:mm:ss\", {\n    trim: \"small final\"\n});\n// \"\"\n\nmoment.duration(0, \"minutes\").format(\"d[d] h[h] m[m] s[s]\", {\n    trim: \"both final\"\n});\n// \"\"\n```\n\n- ##### `\"all\"`\n\nTrim all zero-value tokens. Shorthand for `\"both mid final\"`.\n\n```javascript\nmoment.duration(0, \"minutes\").format(\"d[d] h[h] m[m] s[s]\", {\n    trim: \"all\"\n});\n// \"\"\n```\n\n- ##### `\"left\"`\n\nMaps to `\"large\"` to support this plugin's version 1 API.\n\n- ##### `\"right\"`\n\nMaps to `\"large\"` to support this plugin's version 1 API.\n\n- ##### `true`\n\nMaps to `\"large\"`.\n\n- ##### `null`\n\nMaps to `\"large\"`.\n\n- ##### `false`\n\nDisables trimming.\n\n#### largest\n\nSet `largest` to a positive integer to output only the `n` largest-magnitude moment tokens, starting with the largest-magnitude token that has a value.\n\n**Using the `largest` option defaults `trim` to `\"all\"`.**\n\n```javascript\nmoment.duration(7322, \"seconds\").format(\"d [days], h [hours], m [minutes], s [seconds]\", {\n    largest: 2\n});\n// \"2 hours, 2 minutes\"\n\nmoment.duration(1216800, \"seconds\").format(\"y [years], w [weeks], d [days], h [hours], m [minutes], s [seconds]\", {\n    largest: 3\n});\n// \"2 weeks, 2 hours\"\n```\n\nSetting `trim` to a different value, or using `stopTrim` can change the starting token as well as the remaining output.\n\n```javascript\nmoment.duration(1216800, \"seconds\").format(\"y [years], w [weeks], d [days], h [hours], m [minutes], s [seconds]\", {\n    largest: 3,\n    trim: \"both\"\n});\n// \"2 weeks, 0 days, 2 hours\"\n\nmoment.duration(1216800, \"seconds\").format(\"y [years], w [weeks], d [days], h [hours], m [minutes], s [seconds]\", {\n    largest: 3,\n    trim: \"both\",\n    stopTrim: \"m\"\n});\n// \"2 weeks, 0 days, 2 hours\"\n\nmoment.duration(1216800, \"seconds\").format(\"y [years], w [weeks], d [days], h [hours], m [minutes], s [seconds]\", {\n    largest: 4,\n    trim: false\n});\n// \"2 weeks, 0 days, 2 hours, 0 minutes\"\n\nmoment.duration(2, \"hours\").format(\"y [years], d [days], h [hours], m [minutes], s [seconds]\", {\n    trim: \"both\",\n    stopTrim: \"d m\",\n    largest: 2\n});\n// \"0 days 2 hours\"\n```\n\n#### stopTrim\n\nTrimming will stop when a token listed in this option is reached.\n\nOption value may be a moment token string, a delimited set of moment token strings, or an array of moment token strings. Alternatively, set `stopTrim` on tokens in the format template string directly using a `*` character before the moment token.\n\n```javascript\nmoment.duration(23, \"minutes\").format(\"d[d] h:mm:ss\", {\n    stopTrim: \"h\"\n});\n// \"0:23:00\"\n\nmoment.duration(23, \"minutes\").format(\"d[d] *h:mm:ss\");\n// \"0:23:00\"\n```\n\nThis option affects all trimming modes: `\"large\"`, `\"small\"`, `\"mid\"`, and `\"final\"`.\n\n```javascript\nmoment.duration(2, \"hours\").format(\"y [years], d [days], h [hours], m [minutes], s [seconds]\", {\n    trim: \"both\",\n    stopTrim: \"d m\"\n});\n// \"0 days, 2 hours, 0 minutes\"\n\nmoment.duration(2, \"hours\").format(\"y [years], *d [days], h [hours], *m [minutes], s [seconds]\", {\n    trim: \"both\"\n});\n// \"0 days, 2 hours, 0 minutes\"\n```\n\n#### trunc\n\nDefault behavior rounds the final token value.\n\n```javascript\nmoment.duration(179, \"seconds\").format(\"m [minutes]\");\n// \"3 minutes\"\n\nmoment.duration(3780, \"seconds\").format(\"h [hours]\", 1);\n// \"1.1 hours\"\n```\n\nSet `trunc` to `true` to truncate final token value. This was the default behavior in version 1 of this plugin.\n\n```javascript\nmoment.duration(179, \"seconds\").format(\"m [minutes]\", {\n    trunc: true\n});\n// \"2 minutes\"\n\nmoment.duration(3780, \"seconds\").format(\"h [hours]\", 1, {\n    trunc: true\n});\n// \"1.0 hours\"\n```\n\nUsing `trunc` can affect the operation of `trim` and `largest`.\n\n```javascript\nmoment.duration(59, \"seconds\").format(\"d [days], h [hours], m [minutes]\", {\n    trunc: true,\n    trim: \"both\"\n});\n// \"0 minutes\"\n\nmoment.duration(59, \"seconds\").format(\"d [days], h [hours], m [minutes]\", {\n    trunc: true,\n    trim: \"all\"\n});\n// \"\"\n\nmoment.duration(59, \"seconds\").format(\"d [days], h [hours], m [minutes]\", {\n    trunc: true,\n    largest: 1\n});\n// \"\"\n```\n\n#### minValue\n\nUse `minValue` to render generalized output for small duration values, e.g. `\"< 5 minutes\"`. `minValue` must be a positive number and is applied to the least-magnitude moment token in the format template.\n\n```javascript\nmoment.duration(59, \"seconds\").format(\"h [hours], m [minutes]\", {\n    minValue: 1\n});\n// \"< 1 minute\"\n```\n\nThe minimum value will bubble up to larger-magnitude units if they are present in the format template.\n\n```javascript\nmoment.duration(59, \"seconds\").format(\"m:ss\", {\n    minValue: 60\n});\n// \"< 1:00\"\n```\n\nThis option can be used in conjunction with `trim`, and is not affected by `trunc`.\n\n``` javascript\nmoment.duration(59, \"seconds\").format(\"h [hours], m [minutes]\", {\n    minValue: 1,\n    trim: \"both\"\n});\n// \"< 1 minute\"\n\nmoment.duration(59, \"seconds\").format(\"h [hours], m [minutes]\", {\n    minValue: 1,\n    trunc: true,\n    trim: \"both\"\n});\n// \"< 1 minute\"\n\nmoment.duration(59, \"seconds\").format(\"h [hours], m [minutes]\", {\n    minValue: 1,\n    trim: false\n});\n// \"< 0 hours, 1 minute\"\n```\n\n`minValue` can be used with negative durations, where it has the same effect on the least-magnitude moment token's absolute value.\n\n```javascript\nmoment.duration(-59, \"seconds\").format(\"h [hours], m [minutes]\", {\n    minValue: 1\n});\n// \"> -1 minute\"\n```\n\nIf `minValue` is a non-integer number, `precision` should be set as well so that the formatted output makes sense.\n\n```javascript\nmoment.duration(89, \"seconds\").format(\"m\", {\n    minValue: 1.5,\n    precision: 1\n});\n// \"< 1.5\"\n\nmoment.duration(90, \"seconds\").format(\"m\", {\n    minValue: 1.5,\n    precision: 1\n});\n// \"1.5\"\n```\n\n#### maxValue\n\nUse `maxValue` to render generalized output for large duration values, e.g. `\"> 60 days\"`. `maxValue` must be a positive number and is applied to the greatest-magnitude moment token in the format template. As with `minValue`, this option can be used in conjunction with `trim`, is not affected by `trunc`, and can be used with negative durations.\n\n**Using the `maxValue` option defaults `trim` to `\"all\"`.**\n\n```javascript\nmoment.duration(15, \"days\").format(\"w [weeks]\", {\n    maxValue: 2\n});\n// \"> 2 weeks\"\n\nmoment.duration(-15, \"days\").format(\"w [weeks]]\", {\n    maxValue: 2\n});\n// \"< -2 weeks\"\n```\n\n`maxValue` can be used with `trim` and `largest`, but when the maximum value is reached, all lesser-magnitude token values are forced to `0`.\n\n```javascript\nmoment.duration(15.5, \"days\").format(\"w [weeks], d [days], h [hours]\", {\n    maxValue: 2,\n    trim: false,\n    largest: 2\n});\n// \"> 2 weeks, 0 days\"\n```\n\nIf `maxValue` is a non-integer number, `precision` should be set as well so that the formatted output makes sense.\n\n```javascript\nmoment.duration(89, \"seconds\").format(\"m\", {\n    minValue: 1.5,\n    precision: 1\n});\n// \"< 1.5\"\n\nmoment.duration(90, \"seconds\").format(\"m\", {\n    minValue: 1.5,\n    precision: 1\n});\n// \"1.5\"\n```\n\n#### forceLength\n\nForce the first moment token with a value to render at full length, even when the template is trimmed and the first moment token has a length of `1`. Sounds more complicated than it is.\n\n```javascript\nmoment.duration(123, \"seconds\").format(\"h:mm:ss\");\n// \"2:03\"\n```\n\nIf you want minutes to always be rendered with two digits, you can use a first token with a length greater than 1 (this stops the automatic token length trimming for the first token that has a value).\n\n```javascript\nmoment.duration(123, \"seconds\").format(\"hh:mm:ss\");\n// \"02:03\"\n```\n\nOr you can use `{ forceLength: true }`.\n\n```javascript\nmoment.duration(123, \"seconds\").format(\"h:mm:ss\", {\n    forceLength: true\n});\n// \"02:03\"\n```\n\n#### useSignificantDigits\n\nWhen `useSignificantDigits` is set to `true`, the `precision` option determines the maximum significant digits to be rendered. Precision must be a positive integer. Significant digits extend across unit types, e.g. `\"6 hours 37.5 minutes\"` represents `4` significant digits. Enabling this option causes token length to be ignored.\n\n**Using the `useSignificantDigits` option defaults `trim` to `\"all\"`.**\n\nSetting `trunc` affects the operation of `useSignificantDigits`.\n\nSee the documentation for [toLocaleString](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString) for more information on significant digits.\n\n```javascript\nmoment.duration(99999, \"seconds\").format(\"d [days], h [hours], m [minutes], s [seconds]\", {\n    useSignificantDigits: true,\n    precision: 3\n});\n// \"1 day, 3 hours, 50 minutes\"\n\nmoment.duration(99999, \"seconds\").format(\"d [days], h [hours], m [minutes], s [seconds]\", {\n    useSignificantDigits: true,\n    precision: 3,\n    trunc: true\n});\n// \"1 day, 3 hours, 40 minutes\"\n\nmoment.duration(99999, \"seconds\").format(\"d [days], h [hours], m [minutes], s [seconds]\", {\n    useSignificantDigits: true,\n    precision: 5\n});\n// \"1 day, 3 hours, 46 minutes, 40 seconds\"\n\nmoment.duration(99999, \"seconds\").format(\"d [days], h [hours], m [minutes], s [seconds]\", {\n    useSignificantDigits: true,\n    trunc: true,\n    precision: 5\n});\n// \"1 day, 3 hours, 46 minutes, 30 seconds\"\n\nmoment.duration(99999, \"seconds\").format(\"d [days], h [hours], m [minutes], s [seconds]\", {\n    useSignificantDigits: true,\n    precision: 6\n});\n// \"1 day, 3 hours, 46 minutes, 39 seconds\"\n```\n\n`useSignificantDigits` can be used together with `trim`.\n\n```javascript\nmoment.duration(12.55, \"hours\").format(\"h:mm\", {\n    precision: 2,\n    useSignificantDigits: true,\n    trim: false\n});\n// \"13:00\"\n\nmoment.duration(12.55, \"hours\").format(\"h:mm\", {\n    precision: 2,\n    useSignificantDigits: true,\n    trim: false,\n    trunc: true\n});\n// \"12:00\"\n```\n\n### Localization\n\nFormatted numerical output is rendered using [`Intl.NumberFormat#format`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/format) or [`toLocaleString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString) where available, as long as they pass a feature test on plugin initialization. If the feature tests fail, a fallback format function is used. See below for details on localizing output from the fallback format function.\n\nUnit labels are automatically localized and pluralized. Unit labels are detected using the [locale set in moment.js](https://momentjs.com/docs/#/i18n/), which can be different from the locale of user's environment. This plugin uses custom extensions to the moment.js locale object, which can be easily added for any locale (see below).\n\nIt's likely that the options below do not address every i18n requirement for duration formatting (the plugin hasn't been tested on languages that are written from right to left, for instance), but they are a significant step in the right direction and support languages with [multiple forms of plural](https://developer.mozilla.org/en-US/docs/Mozilla/Localization/Localization_and_Plurals)).\n\n#### userLocale\n\nNumerical output is rendered using the locale set in moment.js, retrieved via `moment.locale()`. Set the `userLocale` option to render numerical output using a different locale.\n\n```javascript\nmoment.duration(1234567, \"seconds\").format(\"m [minutes]\", 3);\n// \"20,576.117 minutes\"\n\nmoment.duration(1234567, \"seconds\").format(\"m [minutes]\", 3, {\n    userLocale: \"de-DE\"\n});\n// \"20.576,117 minutes\"\n```\n\n#### Auto-Localized Unit Labels\n\nThe `_` character can be used to generate auto-localized unit labels in the formatted output.\n\nA single underscore `_` will be replaced with the short duration unit label for its associated moment token.\n\nA double underscore `__` will be replaced with the standard duration unit label for its associated moment token.\n\n```javascript\nmoment.duration(2, \"minutes\").format(\"m _\");\n// \"2 mins\"\n\nmoment.duration(2, \"minutes\").format(\"m __\");\n// \"2 minutes\"\n```\n\nThese are the default `\"en\"` locale options for unit labels. Unit label types and even the `\"_\"` character usage can be customized in the locale object extensions (see below).\n\n#### Auto-Localized Time Notation\n\nDurations can also be formatted with a localized time notation.\n\nThe string `_HMS_` is replaced with a localized `hour/minute/second` time notation, e.g. `h:mm:ss`.\n\nThe string `_HM_` is replaced with a localized `hour/minute` time notation, e.g. `h:mm`.\n\nThe string `_MS_` is replaced with a localized `minute/second` time notation, e.g. `m:ss`.\n\n```javascript\nmoment.duration(3661, \"seconds\").format(\"_HMS_\");\n// \"1:01:01\"\n\nmoment.duration(3661, \"seconds\").format(\"_HM_\");\n// \"1:01\"\n\nmoment.duration(61, \"seconds\").format(\"_MS_\");\n// \"1:01\"\n```\n\nThese are the default `\"en\"` locale options for duration time notation templates. Additional templates may be created in the locale object extensions (see below).\n\n#### usePlural\n\nUnit label pluralization is automatically corrected when unit labels appear in the text associated with each moment token. The default `\"en\"` locale extension includes long and short unit labels, and a basic pluralization function. Unit labels, unit label types, and the pluralization function can be customized for a locale (see below).\n\n```javascript\nmoment.duration(1, \"minutes\").format(\"m [minutes]\");\n// \"1 minute\"\n\nmoment.duration(1, \"minutes\").format(\"m [mins]\");\n// \"1 min\"\n\nmoment.duration(2, \"minutes\").format(\"m [minute]\");\n// \"2 minutes\"\n\nmoment.duration(2, \"minutes\").format(\"m [min]\");\n// \"2 mins\"\n```\n\nSet `usePlural` to `false` to disable auto-correction of pluralization.\n\n```javascript\nmoment.duration(1, \"minutes\").format(\"m [minutes]\", {\n    usePlural: false\n});\n// \"1 minutes\"\n\nmoment.duration(1, \"minutes\").format(\"m [mins]\", {\n    usePlural: false\n});\n// \"1 mins\"\n\nmoment.duration(2, \"minutes\").format(\"m [minute]\", {\n    usePlural: false\n});\n// \"2 minute\"\n\nmoment.duration(2, \"minutes\").format(\"m [min]\", {\n    usePlural: false\n});\n// \"2 min\"\n```\n\nThe default pluralization function for the `\"en\"` locale outputs a plural unit name when a value is rendered with decimal precision.\n\n```javascript\nmoment.duration(1, \"minutes\").format(\"m [minutes]\", 2);\n// \"1.00 minutes\"\n```\n\n#### useLeftUnits\n\nThe text to the right of each moment token in a template string is treated as that token's units for the purposes of trimming, pluralizing, and localizing. To properly process a template string where the token/unit association is reversed, set `useLeftUnits` to `true`.\n\n```javascript\nmoment.duration(7322, \"seconds\").format(\"_ h, _ m, _ s\", {\n    useLeftUnits: true\n});\n// \"hrs 2, mins 2, secs 2\"\n```\n\n#### useGrouping\n\nFormatted numerical output is rendered using `toLocaleString` with the option `useGrouping` enabled. Set `useGrouping` to `false` to disable digit grouping.\n\n```javascript\nmoment.duration(1234, \"seconds\").format(\"s [seconds]\");\n// \"1,234 seconds\"\n\nmoment.duration(1234, \"seconds\").format(\"s [seconds]\", {\n    useGrouping: false\n});\n// \"1234 seconds\"\n```\n\n#### Extending Moment's `locale` object\n\nThis plugin now extends the moment.js `locale` object with duration labels, duration label types, duration time-notation templates, and a pluralization function. The `\"en\"` locale is included with this plugin. Other locales may be  defined using the moment.js locale API to provide auto-pluralized and auto-localized unit labels in different languages. If the plugin cannot find the duration locale extensions for the active moment locale, the plugin will fall back to the `\"en\"` locale.\n\nBelow is the default `\"en\"` locale extension.\n\n```javascript\nmoment.updateLocale('en', {\n    durationLabelsStandard: {\n        S: 'millisecond',\n        SS: 'milliseconds',\n        s: 'second',\n        ss: 'seconds',\n        m: 'minute',\n        mm: 'minutes',\n        h: 'hour',\n        hh: 'hours',\n        d: 'day',\n        dd: 'days',\n        w: 'week',\n        ww: 'weeks',\n        M: 'month',\n        MM: 'months',\n        y: 'year',\n        yy: 'years'\n    },\n    durationLabelsShort: {\n        S: 'msec',\n        SS: 'msecs',\n        s: 'sec',\n        ss: 'secs',\n        m: 'min',\n        mm: 'mins',\n        h: 'hr',\n        hh: 'hrs',\n        d: 'dy',\n        dd: 'dys',\n        w: 'wk',\n        ww: 'wks',\n        M: 'mo',\n        MM: 'mos',\n        y: 'yr',\n        yy: 'yrs'\n    },\n    durationTimeTemplates: {\n        HMS: 'h:mm:ss',\n        HM: 'h:mm',\n        MS: 'm:ss'\n    },\n    durationLabelTypes: [\n        { type: \"standard\", string: \"__\" },\n        { type: \"short\", string: \"_\" }\n    ],\n    durationPluralKey: function (token, integerValue, decimalValue) {\n        // Singular for a value of `1`, but not for `1.0`.\n        if (integerValue === 1 && decimalValue === null) {\n            return token;\n        }\n\n        return token + token;\n    }\n});\n```\n\n##### Creating a new Moment `locale` extension\n\nThe duration extensions for a new locale might look something like the following example, which includes an additional unit label type, a custom time-notation template, and an additional form of plural.\n\nThis example provides new values for all of the duration locale extensions. In a new locale, you can include updates for one or more of the duration locale extensions, and any that you do not include will automatically fall back to the `\"en\"` versions in this plugin. e.g. your locale could update only the `durationLabelsShort` object, or only the `durationPluralKey` function, if those were the only differences from the default `\"en\"` locale configuration.\n\nNew types of duration labels must have a key that begins with `durationLabels` and must be enumerated in `durationLabelTypes`.\n\nThis locale uses a single token `\"s\"` for the singular label, a double token `\"ss\"` for the plural label when the value is `2`, and a triple token `\"sss\"` for the plural label for values greater than `3`. For brevity, only labels for the `seconds` type are included.\n\nUnit labels are replaced after the format template string is tokenized, so they need not be escaped. Time-notation templates are replaced before the format template string is tokenized, so they must be escaped.\n\n```javascript\nmoment.updateLocale('sample', {\n    durationLabelsLong: {\n        s: 'singular long second',\n        ss: 'first long plural seconds',\n        sss: 'next long plural seconds'\n        // ...\n    },\n    durationLabelsStandard: {\n        s: 'singular second',\n        ss: 'first plural seconds',\n        sss: 'next plural seconds'\n        // ...\n    },\n    durationLabelsShort: {\n        s: 'singular sec',\n        ss: 'first plural secs',\n        sss: 'next plural secs'\n        // ...\n    },\n    durationTimeTemplates: {\n        HS: 'hh[h].ssss[s]'\n        // ...\n    },\n    durationLabelTypes: [\n        { type: \"long\", string: \"___\" },\n        { type: \"standard\", string: \"__\" },\n        { type: \"short\", string: \"_\" }\n    ],\n    durationPluralKey: function (token, integerValue, decimalValue) {\n        // Decimal value does not affect unit label for this locale.\n\n        // \"xxx\" for > 2.\n        if (integerValue > 2) {\n            return token + token + token;\n        }\n\n        // \"x\" for === 1.\n        if (integerValue === 1) {\n            return token;\n        }\n\n        // \"xx\" for others.\n        return token + token;\n    }\n});\n```\n\n###### `durationPluralKey`\n\nThe function for `durationPluralKey` is passed three arguments:\n\n- `token`\n\nString. A single character representing the unit type.\n\n```\nyears:   y\nmonths:  M\nweeks:   w\ndays:    d\nhours:   h\nminutes: m\nseconds: s\nms:      S\n```\n\n- `integerValue`\n\nNumber. The integer portion of the token's value.\n\n- `decimalValue`\n\nNumber. The decimal fraction portion of the token's value.\n\n### Localization and the Fallback Number Format Function\n\nYou can (and likely should) set the localization options for the fallback number format function if the default `\"en\"` locale formatting is not acceptable on some devices or in some environments.\n\n#### `useToLocaleString`\n\nSet this option to `false` to ignore the `Intl.NumberFormat` and `toLocaleString` feature tests and force the use of the `formatNumber` fallback function included in this plugin.\n\nThe fallback number format options will have no effect when `Intl.NumberFormat` or `toLocaleString` are used. The grouping separator, decimal separator, and integer digit grouping will be determined by the user locale.\n\n```javascript\nmoment.duration(100000.1, \"seconds\").format(\"s\", {\n    userLocale: \"de-DE\",\n    precision: 2,\n    decimalSeparator: \",\",\n    groupingSeparator: \".\"\n});\n// \"100.000,10\" on all devices and in all environemnts.\n```\n\n#### `groupingSeparator`\n\nThe integer digit grouping separator used when using the fallback number format function. Default value is a `,` character.\n\n#### `decimalSeparator`\n\nThe decimal separator used when using the fallback number format function. Default value is a `.` character.\n\n#### `grouping`\n\nThe integer digit grouping used when using the fallback number format function. Must be an array. The default value of `[3]` gives the standard 3-digit thousand/million/billion digit groupings for the \"en\" locale. Setting this option to `[3, 2]` would generate the thousand/lakh/crore digit groupings used in the \"en-IN\" locale.\n\n```javascript\n// Force the use of the fallback number format function. Do not use toLocaleString or Intl.NumberFormat.\n// We're in some sort of strange hybrid french-indian locale...\nmoment.duration(100000000000, \"seconds\").format(\"m\", {\n    useToLocaleString: false,\n    precision: 2,\n    decimalSeparator: \",\",\n    groupingSeparator: \" \",\n    grouping: [3, 2]\n});\n// \"1 66 66 66 666,67\");\n```\n","repository":{"type":"git","url":"git://github.com/jsmreese/moment-duration-format.git"},"users":{"gztomas":true,"honzajde":true,"langri-sha":true,"rocket0191":true,"shaunieb":true,"kerwyn":true},"bugs":{"url":"https://github.com/jsmreese/moment-duration-format/issues"},"license":"MIT","versions":{"1.2.0":{"name":"moment-duration-format","version":"1.2.0","description":"A moment.js plugin for formatting durations.","main":"lib/moment-duration-format.js","repository":{"type":"git","url":"git://github.com/jsmreese/moment-duration-format.git"},"authors":["John Madhavan-Reese <jsmreese@pureshare.com> (http://pureshare.com/)","Jarvis Badgley <chiper@chipersoft.com>"],"keywords":["moment","duration","format"],"license":"MIT","bugs":{"url":"https://github.com/jsmreese/moment-duration-format/issues"},"homepage":"https://github.com/jsmreese/moment-duration-format","_id":"moment-duration-format@1.2.0","dist":{"shasum":"4b9788a14dce9cc3d46eb49096d51164c7ac5c83","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/moment-duration-format/-/moment-duration-format-1.2.0.tgz"},"_from":"moment-duration-format","_npmVersion":"1.3.8","_npmUser":{"name":"jsmreese","email":"jsmreese@pureshare.com"},"maintainers":[{"name":"jsmreese","email":"jsmreese@pureshare.com"}],"directories":{}},"1.2.1":{"name":"moment-duration-format","version":"1.2.1","description":"A moment.js plugin for formatting durations.","main":"lib/moment-duration-format.js","repository":{"type":"git","url":"git://github.com/jsmreese/moment-duration-format.git"},"authors":["John Madhavan-Reese <jsmreese@pureshare.com> (http://pureshare.com/)"],"keywords":["moment","duration","format"],"license":"MIT","bugs":{"url":"https://github.com/jsmreese/moment-duration-format/issues"},"homepage":"https://github.com/jsmreese/moment-duration-format","_id":"moment-duration-format@1.2.1","dist":{"shasum":"f5a39a02dbe62671e7ae0d72db69d2daa2f0629f","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/moment-duration-format/-/moment-duration-format-1.2.1.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"jsmreese","email":"jsmreese@pureshare.com"},"maintainers":[{"name":"jsmreese","email":"jsmreese@pureshare.com"}],"directories":{}},"1.2.2":{"name":"moment-duration-format","version":"1.2.2","description":"A moment.js plugin for formatting durations.","main":"lib/moment-duration-format.js","repository":{"type":"git","url":"git://github.com/jsmreese/moment-duration-format.git"},"authors":["John Madhavan-Reese <jsmreese@pureshare.com> (http://pureshare.com/)"],"keywords":["moment","duration","format"],"license":"MIT","bugs":{"url":"https://github.com/jsmreese/moment-duration-format/issues"},"homepage":"https://github.com/jsmreese/moment-duration-format","_id":"moment-duration-format@1.2.2","dist":{"shasum":"34181e60fdc46f4083083034dafd1728e1976ade","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/moment-duration-format/-/moment-duration-format-1.2.2.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"jsmreese","email":"jsmreese@pureshare.com"},"maintainers":[{"name":"jsmreese","email":"jsmreese@pureshare.com"}],"directories":{}},"1.3.0":{"name":"moment-duration-format","version":"1.3.0","description":"A moment.js plugin for formatting durations.","main":"lib/moment-duration-format.js","repository":{"type":"git","url":"git://github.com/jsmreese/moment-duration-format.git"},"authors":["John Madhavan-Reese <jsmreese@pureshare.com> (http://pureshare.com/)"],"keywords":["moment","duration","format"],"license":"MIT","bugs":{"url":"https://github.com/jsmreese/moment-duration-format/issues"},"homepage":"https://github.com/jsmreese/moment-duration-format","_id":"moment-duration-format@1.3.0","dist":{"shasum":"541771b5f87a049cc65540475d3ad966737d6908","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/moment-duration-format/-/moment-duration-format-1.3.0.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"jsmreese","email":"jsmreese@pureshare.com"},"maintainers":[{"name":"jsmreese","email":"jsmreese@pureshare.com"}],"directories":{}},"2.0.0":{"name":"moment-duration-format","version":"2.0.0","description":"A moment.js plugin for formatting durations.","main":"lib/moment-duration-format.js","repository":{"type":"git","url":"git://github.com/jsmreese/moment-duration-format.git"},"authors":["John Madhavan-Reese <jsmreese@gmail.com>"],"keywords":["moment","duration","format"],"license":"MIT","bugs":{"url":"https://github.com/jsmreese/moment-duration-format/issues"},"homepage":"https://github.com/jsmreese/moment-duration-format","gitHead":"ee76548b896b8aecc1594a51a10869e717b30447","_id":"moment-duration-format@2.0.0","scripts":{},"_shasum":"c1df19af92ab6a27b917353f7f6727627fc502d2","_from":".","_npmVersion":"2.5.1","_nodeVersion":"0.12.0","_npmUser":{"name":"jsmreese","email":"jsmreese@gmail.com"},"dist":{"shasum":"c1df19af92ab6a27b917353f7f6727627fc502d2","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/moment-duration-format/-/moment-duration-format-2.0.0.tgz"},"maintainers":[{"name":"jsmreese","email":"jsmreese@pureshare.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moment-duration-format-2.0.0.tgz_1513193467267_0.11418019840493798"},"directories":{}},"2.0.1":{"name":"moment-duration-format","version":"2.0.1","description":"A moment.js plugin for formatting durations.","main":"lib/moment-duration-format.js","repository":{"type":"git","url":"git://github.com/jsmreese/moment-duration-format.git"},"authors":["John Madhavan-Reese <jsmreese@gmail.com>"],"keywords":["moment","duration","format"],"license":"MIT","bugs":{"url":"https://github.com/jsmreese/moment-duration-format/issues"},"homepage":"https://github.com/jsmreese/moment-duration-format","gitHead":"b486f476a783c59da6ee4793b280126de9da2731","_id":"moment-duration-format@2.0.1","scripts":{},"_shasum":"a70a6b73ad6a66dfa9a3d98a39163768f66e1d30","_from":".","_npmVersion":"2.5.1","_nodeVersion":"0.12.0","_npmUser":{"name":"jsmreese","email":"jsmreese@gmail.com"},"dist":{"shasum":"a70a6b73ad6a66dfa9a3d98a39163768f66e1d30","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/moment-duration-format/-/moment-duration-format-2.0.1.tgz"},"maintainers":[{"name":"jsmreese","email":"jsmreese@pureshare.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moment-duration-format-2.0.1.tgz_1513274116578_0.6085080550983548"},"directories":{}},"2.1.0":{"name":"moment-duration-format","version":"2.1.0","description":"A moment.js plugin for formatting durations.","main":"lib/moment-duration-format.js","repository":{"type":"git","url":"git://github.com/jsmreese/moment-duration-format.git"},"authors":["John Madhavan-Reese <jsmreese@gmail.com>"],"keywords":["moment","duration","format"],"license":"MIT","bugs":{"url":"https://github.com/jsmreese/moment-duration-format/issues"},"homepage":"https://github.com/jsmreese/moment-duration-format","gitHead":"c3946edab9b6007eb95543addc5f72cf9db68600","_id":"moment-duration-format@2.1.0","scripts":{},"_shasum":"d1ad226a6a5d638385e65be80fab02bd0a1b5c8c","_from":".","_npmVersion":"2.5.1","_nodeVersion":"0.12.0","_npmUser":{"name":"jsmreese","email":"jsmreese@gmail.com"},"dist":{"shasum":"d1ad226a6a5d638385e65be80fab02bd0a1b5c8c","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/moment-duration-format/-/moment-duration-format-2.1.0.tgz"},"maintainers":[{"name":"jsmreese","email":"jsmreese@pureshare.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moment-duration-format-2.1.0.tgz_1513887260472_0.6770030604675412"},"directories":{}},"2.1.1":{"name":"moment-duration-format","version":"2.1.1","description":"A moment.js plugin for formatting durations.","main":"lib/moment-duration-format.js","repository":{"type":"git","url":"git://github.com/jsmreese/moment-duration-format.git"},"authors":["John Madhavan-Reese <jsmreese@gmail.com>"],"keywords":["moment","duration","format"],"license":"MIT","bugs":{"url":"https://github.com/jsmreese/moment-duration-format/issues"},"homepage":"https://github.com/jsmreese/moment-duration-format","gitHead":"43fec7306b028185d9584288ab29c5fd639cfbde","_id":"moment-duration-format@2.1.1","scripts":{},"_shasum":"2eb0576f66822a47a0dee73af734c23b907ba2bd","_from":".","_npmVersion":"2.5.1","_nodeVersion":"0.12.0","_npmUser":{"name":"jsmreese","email":"jsmreese@gmail.com"},"dist":{"shasum":"2eb0576f66822a47a0dee73af734c23b907ba2bd","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/moment-duration-format/-/moment-duration-format-2.1.1.tgz"},"maintainers":[{"name":"jsmreese","email":"jsmreese@pureshare.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moment-duration-format-2.1.1.tgz_1514601049780_0.991319369757548"},"directories":{}},"2.2.0":{"name":"moment-duration-format","version":"2.2.0","description":"A moment.js plugin for formatting durations.","main":"lib/moment-duration-format.js","repository":{"type":"git","url":"git://github.com/jsmreese/moment-duration-format.git"},"authors":["John Madhavan-Reese <jsmreese@gmail.com>"],"keywords":["moment","duration","format"],"license":"MIT","bugs":{"url":"https://github.com/jsmreese/moment-duration-format/issues"},"homepage":"https://github.com/jsmreese/moment-duration-format","gitHead":"c0ed2d84661c8467c49f59a843f3deb0261f67b7","_id":"moment-duration-format@2.2.0","scripts":{},"_shasum":"d65a3cbf5f8233c99efee1b8493c59e38bd581f2","_from":".","_npmVersion":"2.5.1","_nodeVersion":"0.12.0","_npmUser":{"name":"jsmreese","email":"jsmreese@gmail.com"},"dist":{"shasum":"d65a3cbf5f8233c99efee1b8493c59e38bd581f2","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/moment-duration-format/-/moment-duration-format-2.2.0.tgz"},"maintainers":[{"name":"jsmreese","email":"jsmreese@pureshare.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moment-duration-format-2.2.0.tgz_1516075188700_0.16003314638510346"},"directories":{}},"2.2.1":{"name":"moment-duration-format","version":"2.2.1","description":"A moment.js plugin for formatting durations.","main":"lib/moment-duration-format.js","repository":{"type":"git","url":"git://github.com/jsmreese/moment-duration-format.git"},"authors":["John Madhavan-Reese <jsmreese@gmail.com>"],"keywords":["moment","duration","format"],"license":"MIT","bugs":{"url":"https://github.com/jsmreese/moment-duration-format/issues"},"homepage":"https://github.com/jsmreese/moment-duration-format","gitHead":"0e924c699905f0a318b7487a9e94614c6dd0e87f","_id":"moment-duration-format@2.2.1","scripts":{},"_shasum":"b9ce5e5051a15282a0a6c361f0c05685c7ead47c","_from":".","_npmVersion":"2.5.1","_nodeVersion":"0.12.0","_npmUser":{"name":"jsmreese","email":"jsmreese@gmail.com"},"dist":{"shasum":"b9ce5e5051a15282a0a6c361f0c05685c7ead47c","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/moment-duration-format/-/moment-duration-format-2.2.1.tgz"},"maintainers":[{"name":"jsmreese","email":"jsmreese@pureshare.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moment-duration-format-2.2.1.tgz_1516589409787_0.7576756486669183"},"directories":{}},"2.2.2":{"name":"moment-duration-format","version":"2.2.2","description":"A moment.js plugin for formatting durations.","main":"lib/moment-duration-format.js","repository":{"type":"git","url":"git://github.com/jsmreese/moment-duration-format.git"},"authors":["John Madhavan-Reese <jsmreese@gmail.com>"],"keywords":["moment","duration","format"],"license":"MIT","bugs":{"url":"https://github.com/jsmreese/moment-duration-format/issues"},"homepage":"https://github.com/jsmreese/moment-duration-format","gitHead":"0d6cfe1094a74f02038237bce19c4cf1d79bada3","_id":"moment-duration-format@2.2.2","scripts":{},"_shasum":"b957612de26016c9ad9eb6087c054573e5127779","_from":".","_npmVersion":"2.5.1","_nodeVersion":"0.12.0","_npmUser":{"name":"jsmreese","email":"jsmreese@gmail.com"},"dist":{"shasum":"b957612de26016c9ad9eb6087c054573e5127779","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/moment-duration-format/-/moment-duration-format-2.2.2.tgz","fileCount":12,"unpackedSize":674518},"maintainers":[{"name":"jsmreese","email":"jsmreese@pureshare.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moment-duration-format_2.2.2_1518828017983_0.03799705154561184"},"_hasShrinkwrap":false},"2.3.0":{"name":"moment-duration-format","version":"2.3.0","description":"A moment.js plugin for formatting durations.","main":"lib/moment-duration-format.js","repository":{"type":"git","url":"git://github.com/jsmreese/moment-duration-format.git"},"authors":["John Madhavan-Reese <jsmreese@gmail.com>"],"keywords":["moment","duration","format"],"license":"MIT","bugs":{"url":"https://github.com/jsmreese/moment-duration-format/issues"},"homepage":"https://github.com/jsmreese/moment-duration-format","gitHead":"ffe1b7d5e1640db441a127523eac451786d42cc8","_id":"moment-duration-format@2.3.0","_nodeVersion":"9.7.1","_npmVersion":"6.9.0","dist":{"integrity":"sha512-1Ch2pmoREwWt7UJ15JHEZ69enMhyx8EAxYsJkSO0BChdBmlE+jmYa13Z5lb8ePjjQJI0D2y5ENq8mpt6780mtQ==","shasum":"f1d9de90966be8bd79bbf2ddc12a9e6818679034","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/moment-duration-format/-/moment-duration-format-2.3.0.tgz","fileCount":14,"unpackedSize":700239,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc9aoUCRA9TVsSAnZWagAA+UYP/jY7P0m60bzYp1OdGMib\nL6B2XL594zu5wCwRq4SmMwm6rmoljI5aA2fj2M36tE2S3bcarN50dfx97LZr\nB5XSK9LtjufirurWe2BEJ7S1/BYcBKW91PGr1y1zNQhVOEfAAq+6G4Si/zdf\nOM9MUdfnUhHPKKdLmoN+ptCBxHMKGFtKJrYgYv66wQaJwEpkqBrjyFoRHMiv\nkuTSICone+dkcbOfr0K7Ec/Zkx0S8LQa9IAWWg5O0LSHGZs+OOsTOIK5QKgC\n9UHU6XpZpdhvvec3bXWsIHwslVSH52YlPp5Hc4G553AU56UtBYdORq7R8CkG\n6B7jH2D82KL4CfSJVwyk/wgHK+nm+Re7Pqxa56N3WUoeAMjRj6UdMfSlaM3g\nQJVMiZMagplnWQV5fxzwAmtq4evb74M9Eptuhtp/HjltbOBD4lh3QwUqNJ7c\nn/AutQysuVvpfjSBoN+SSbGDPGEuf9MCU2MhNPERJtUQZoRCqyeOC+58Z82F\n1QtSF4ulOZUNJL0wHF8/JIsydLKrZFDhqEvCDVqiXPYvjFg6Wsexq2tlODXs\n9PBC1E7PEZyu4ykQnyD6YsEskDqypYefYeWxCtnepW6Z/P8BDiV2l15lY8cn\nnkPsns34zmN6NDk2rTu/GcIK1Wp5gizAU29B55jo2XzmGZ7vZW+dkI8ojjnB\nirn7\r\n=Sphr\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"jsmreese","email":"jsmreese@pureshare.com"}],"_npmUser":{"name":"jsmreese","email":"jsmreese@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moment-duration-format_2.3.0_1559603731740_0.5961632622649395"},"_hasShrinkwrap":false},"2.3.1":{"name":"moment-duration-format","version":"2.3.1","description":"A moment.js plugin for formatting durations.","main":"lib/moment-duration-format.js","repository":{"type":"git","url":"git://github.com/jsmreese/moment-duration-format.git"},"authors":["John Madhavan-Reese <jsmreese@gmail.com>"],"keywords":["moment","duration","format"],"license":"MIT","bugs":{"url":"https://github.com/jsmreese/moment-duration-format/issues"},"homepage":"https://github.com/jsmreese/moment-duration-format","gitHead":"e4f5f28bd3dfd638d06bb46985504edece48703a","_id":"moment-duration-format@2.3.1","_nodeVersion":"9.7.1","_npmVersion":"6.9.0","dist":{"integrity":"sha512-kCikJV3SsAYjP6axo9i8hGBPyJQNTpEvv+MqOYqNfKK3Iu/qTw41yc5illPiOGqdDCC50HWTZqHVWiId2vD+Xg==","shasum":"17a87c4b91f06dc8ac148a97d2fceedc1bff92a2","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/moment-duration-format/-/moment-duration-format-2.3.1.tgz","fileCount":14,"unpackedSize":700249,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc9mVhCRA9TVsSAnZWagAAx1UP/jyA04ldZMdTsANwlmoi\nELYFUSgeoOVdHO8vEaxkMfgQ/mEGTTpl4VucAGFVtL90/pXc95rMpgzc4/hH\nBNCnovq3p1Iq64zefycYDwADSvMUacljcMhcJDgVqIURCz+Ho2i+tfo2CRC6\nXz07iGUsomwPkEarF1wLz+lpD6ofTm2JuS9gBI8uQAz7HveLqJQ/IQ/2pm+Q\nTH4bz0ueVpuyWPvVx4DkUz3mFEf/I1D1XLQgW3zTxiZotezGzmfky3xyEjs4\nfFB2gyp83XOiF26pmF1gj4Ft3EbMYJZzt5mUNVdtNCFXYUmtr2aqYyXqN9s2\ng548n3h4wmSvORGZwhiWQkkcKug/XuRdiWD1wRUlr9X/bShL7aNutQsv0yqO\n+OUL3q6qntSJcou82NdqALIlFwkRvFjTBy/KOhvYFaz6kiNJT58zoeh65Cy+\n294utZlYZm2ViPT8CxAFQxOwk4UXHeUpNyOpxVPOhfhfYd09N0LbaBpQRjkc\nzApSTHYhTsOShnCPqI0UYNvnZjaGFKGDO3OcaH0YVKNYXPXszVTkvR1cuzKb\nomeHXPEME8BWj+3cglNXnnIzstAOdqnWo6BbqZ6wGqOT2+ZiNQLWGkYfhVCD\n2QJYXWfMPqsMfMya536lv8inG+t4zVIUOsuJrZ8VzjL8kye7/xZr12lp/fbf\nxnry\r\n=dvXX\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"jsmreese","email":"jsmreese@pureshare.com"}],"_npmUser":{"name":"jsmreese","email":"jsmreese@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moment-duration-format_2.3.1_1559651680733_0.2227398039548376"},"_hasShrinkwrap":false},"2.3.2":{"name":"moment-duration-format","version":"2.3.2","description":"A moment.js plugin for formatting durations.","main":"lib/moment-duration-format.js","repository":{"type":"git","url":"git://github.com/jsmreese/moment-duration-format.git"},"authors":["John Madhavan-Reese <jsmreese@gmail.com>"],"keywords":["moment","duration","format"],"license":"MIT","bugs":{"url":"https://github.com/jsmreese/moment-duration-format/issues"},"homepage":"https://github.com/jsmreese/moment-duration-format","gitHead":"796c9c8e11dfc043842c12785dadfb210f33f380","_id":"moment-duration-format@2.3.2","_npmVersion":"6.4.1","_nodeVersion":"10.10.0","_npmUser":{"name":"jsmreese","email":"jsmreese@gmail.com"},"dist":{"integrity":"sha512-cBMXjSW+fjOb4tyaVHuaVE/A5TqkukDWiOfxxAjY+PEqmmBQlLwn+8OzwPiG3brouXKY5Un4pBjAeB6UToXHaQ==","shasum":"5fa2b19b941b8d277122ff3f87a12895ec0d6212","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/moment-duration-format/-/moment-duration-format-2.3.2.tgz","fileCount":11,"unpackedSize":677742,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc98yQCRA9TVsSAnZWagAA1fMP/3Tm6BOMnMMNPmK8HTz+\nDzsfOjJQr3HCX74Q+Z9lIxq6bhWGadth4brw5ZsJtfZjprgd65Hg2t8vHbQY\nbmtTKpdj4ggUJ2Ih/ALm8iWkmllHVcBOoIKodMyKBF4B4R2gMeo530tlCRN0\nnjNNDXR5ueZMkjR+NFTPLjH+k5PPDx65rLcJweUf3dnaLME02X8NkERB90VJ\ny04ao8khCVXnkjkzyhjdEZkwos4VU6FTk7xXoefL3QNeiPQfWHBzCgOmDXI5\ngt0EVrl2qhLsoJuOyuBsxrEzWrR1UrM/s9y3epSNQKdWWToHkV/YsN2u0SYS\n9M3GHJHjhN+CRTVLesbXdh1k+az41rl5qTf4+DeimOaWQSYDNLRGpE7JOJeM\nQIXzatQA9DfKx9VRzs0DPbQLTO2l+ykpJ9XMaIhg5Q5AMwNEs/2qiYNewExt\nEYFMS3TrXUfvAEP8+TcJC4pZaGPwsejL8SPwZ0nIkRHO8pRbwR0PaxEDgij7\npVWckUz4xOwXKnDzTJAptCW/mbfIYsheJ0TrWM++7V31VI6iQM2+pu8bE7MI\nVGZqeYhMbQWzF2N/74EyDyof0qLkRCbRsd2W9R+vZY9LK4sWcHwBgfIvYFBe\nt/YHZL2B6V0EuDFehViRDZVjyE07LINXqx2M9fVIsNa3xI0/vzrii6ud/TsL\naYtM\r\n=VyEO\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"jsmreese","email":"jsmreese@pureshare.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moment-duration-format_2.3.2_1559743631192_0.10555214309276995"},"_hasShrinkwrap":false}},"name":"moment-duration-format","time":{"modified":"2020-03-10T13:52:27.887Z","created":"2014-03-18T18:33:50.538Z","1.1.0":"2014-03-18T18:33:50.538Z","1.2.0":"2014-04-24T00:31:07.773Z","1.2.1":"2014-04-24T20:06:38.673Z","1.2.2":"2014-07-10T20:03:20.132Z","1.3.0":"2014-07-28T05:22:50.064Z","2.0.0":"2017-12-13T19:31:07.422Z","2.0.1":"2017-12-14T17:55:16.719Z","2.1.0":"2017-12-21T20:14:20.659Z","2.1.1":"2017-12-30T02:30:51.183Z","2.2.0":"2018-01-16T03:59:48.848Z","2.2.1":"2018-01-22T02:50:09.912Z","2.2.2":"2018-02-17T00:40:18.108Z","2.3.0":"2019-06-03T23:15:31.887Z","2.3.1":"2019-06-04T12:34:40.937Z","2.3.2":"2019-06-05T14:07:11.317Z"},"readmeFilename":"README.md","_id":"moment-duration-format","homepage":"https://github.com/jsmreese/moment-duration-format"}