{"maintainers":[{"name":"jenkins-npm","email":"devops@pon.com"}],"dist-tags":{"latest":"0.1.1"},"versions":{"0.0.4":{"name":"mind-module-fleet","version":"0.0.4","scripts":{"build":"ngc -p tsconfig.json","lint":"tslint --type-check --project tsconfig.json src/**/*.ts","test":"tsc && karma start","test-singlerun":"tsc && karma start --single-run"},"publishConfig":{"registry":"https://nexusrepo.pondevelopment.com/repository/mind-npm/"},"repository":{"type":"git","url":"git+ssh://git@bitbucket.org/pondevelopment/mind-module-fleet.git"},"author":{"name":"Han van Venrooij","email":"han.van.venrooij@pon.com"},"keywords":["angular"],"license":"MIT","bugs":{"url":"https://pondevelopment.atlassian.net/"},"main":"dist/index.js","types":"dist/index.d.ts","dependencies":{"@angular/common":"^4.0.0","@angular/core":"^4.0.0","@angular/http":"^4.0.0","mind-module-authentication":"^1.0.1","mind-module-error-handling":"^1.1.0","mind-module-service":"^2.0.0","rxjs":"^5.1.0","zone.js":"^0.8.4"},"devDependencies":{"@angular/common":"^4.0.0","@angular/compiler":"^4.0.0","@angular/compiler-cli":"^4.0.0","@angular/core":"^4.0.0","@angular/http":"^4.0.0","@angular/platform-browser":"^4.0.0","@angular/platform-browser-dynamic":"^4.0.0","@types/jasmine":"2.5.38","@types/node":"~6.0.60","@types/lodash":"4.14.55","codelyzer":"~2.0.0","core-js":"^2.4.1","jasmine-core":"~2.5.2","jasmine-spec-reporter":"~3.2.0","karma":"~1.4.1","karma-cli":"~1.0.1","karma-coverage":"^1.1.1","karma-coverage-istanbul-reporter":"^0.2.0","karma-jasmine":"~1.1.0","karma-jasmine-html-reporter":"^0.2.2","karma-phantomjs-launcher":"^1.0.4","karma-typescript":"^3.0.0","karma-typescript-angular2-transform":"^1.0.0","mind-module-authentication":"^1.0.1","mind-module-error-handling":"^1.1.0","mind-module-service":"^2.0.0","protractor":"~5.1.0","ts-mockito":"^1.2.0","ts-node":"~2.0.0","tslint":"~4.5.0","typescript":"~2.2.0"},"engines":{"node":">=6.0.0"},"gitHead":"88945f7d197e24da7fe3add5fcf935bbb9a91c3d","readme":"# mind-module-fleet\n\nThis repo contains a service to retrieve account information from the centersight platform.\n\n## Usage\n\nTo install this library, run:\n\n```bash\n$ npm install mind-module-service --save\n$ npm install mind-module-fleet --save\n```\n\nThen, include the `FleetModule` in your Angular `NgModule`:\n\n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n// Import your library\nimport { FleetModule } from 'mind-module-fleet';\n// Import the configuration\nimport { ServiceConfig } from 'mind-module-service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FleetModule // <--------------------- The thingamagiggy here!\n  ],\n  providers: [\n    {\n      provide: ServiceConfig, // <--------- Note that you must provide an instance of the AuthConfig\n      useValue: new ServiceConfig('https://pon-test.device-insight.com', 'api/v1')\n    }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\nNote that you *must* provide an instance of the `ServiceConfig` class for DI. This configuration tells the `FleetService` where it can find the fleet backend.\n\nAlso you *must* have set up a `CredentialStorage` from the [`mind-module-authentication`](https://bitbucket.org/pondevelopment/mind-module-authentication). This is needed for the `FleetService` to deal with the authenticating any requests made against the platform.\n\n### Fleet service \n\nThe fleet service provides the following interface:\n```typescript\nexport abstract class FleetService {\n  /* Returns the [[Fleet]] associated with the passed ID. */\n  abstract getFleet(fleetId: number): Promise<Fleet>;\n\n  /* Returns the [[Fleet]] associated with the passed vehicle ID. */\n  abstract getFleetForVehicle(vehicleId: number): Promise<Fleet | undefined>;\n}\n```\n\nThe `FleetModule` will only prepare the `FleetServiceImpl` for DI. To only depend on the `FleetService` interface, you should include a line like the one below in the providers of your `NgModule`:\n\n```typescript\n{provide: FleetService, useExisting: FleetServiceImpl}\n```\n\nOnce you've prepared the `FleetService` for DI as described above, you can inject the `FleetService` into your own components/modules:\n\n```typescript\nimport {\n  Fleet,\n  FleetService\n} from 'mind-module-fleet';\n\n@Component({\n  selector: 'my-component',\n  template: `...`\n})\nclass MyComponent {\n  constructor(private fleetService: FleetService) { // <----- Injection happens here\n  }\n  \n  getFleetForVehicle(vehicleId: number) {\n    this.fleetService\n      .getFleetForVehicle(vehicleId) // <-------------------------------------- Retrieve your fleet\n      .catch(this.handleErrors)\n  }\n  \n  ...\n}\n```\n## Development\n\nTo generate all `*.js`, `*.js.map` and `*.d.ts` files:\n\n```bash\n$ npm run tsc\n```\n\nAfterwards, the compiled `js` files can be found in the `./dist` directory.\n\nTo lint all `*.ts` files:\n\n```bash\n$ npm run lint\n```\n\nDuring development the unit tests can automatically be run using PhantomJS:\n\n```bash\n$ npm test\n```\n\nWhen a file has been changed/added/deleted, the tests will automatically be rerun.\n\nThe coverage of the tests will be monitored. The results can be found in: `./coverage/PhantomJS <some version and platform>/index.html`. To view the results, simply open this file in your favorite browser (supporting javascript).\n\nTo test your changes locally in an angular app, you could link this module to your global `node_modules` without publishing the module:\n\n```bash\n$ cd /path/to/mind-module-fleet/\n$ npm link\n$ cd /path/to/your/angular2/app/\n$ npm link mind-module-fleet\n```\n\nThis will create a symlink between the `mind-module-fleet` and the `node_modules` of your angular 2 app.\n\n## License\n\nMIT Â© [Mind mobility](mailto:info@mindmobility.nl)\n","readmeFilename":"README.md","description":"This repo contains a service to retrieve account information from the centersight platform.","homepage":"https://bitbucket.org/pondevelopment/mind-module-fleet#readme","_id":"mind-module-fleet@0.0.4","_npmVersion":"5.6.0","_nodeVersion":"7.8.0","_npmUser":{"name":"ponJenkinsIntegration","email":"info@pondevelopment.com"},"maintainers":[{"name":"ponJenkinsIntegration","email":"info@pondevelopment.com"}],"dist":{"integrity":"sha512-unsu5/GYBSK5TbWeUQQNjunve3aBWZ/Wjs/SLIGjqH+SXSj3z4HSRCnjwUHFBcxEVyGHZM4xVvNtV70FHyQbIQ==","shasum":"6cd3b2f8616134dfc068ee9398dfa52e22297aa7","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/mind-module-fleet/-/mind-module-fleet-0.0.4.tgz"}},"0.0.5":{"name":"mind-module-fleet","version":"0.0.5","scripts":{"build":"ngc -p tsconfig.json","lint":"tslint --type-check --project tsconfig.json src/**/*.ts","test":"tsc && karma start","test-singlerun":"tsc && karma start --single-run"},"publishConfig":{"registry":"https://nexusrepo.pondevelopment.com/repository/mind-npm/"},"repository":{"type":"git","url":"git+ssh://git@bitbucket.org/pondevelopment/mind-module-fleet.git"},"author":{"name":"Han van Venrooij","email":"han.van.venrooij@pon.com"},"keywords":["angular"],"license":"MIT","bugs":{"url":"https://pondevelopment.atlassian.net/"},"main":"dist/index.js","types":"dist/index.d.ts","dependencies":{"@angular/common":"^4.0.0","@angular/core":"^4.0.0","@angular/http":"^4.0.0","mind-module-authentication":"^1.0.1","mind-module-error-handling":"^1.1.0","mind-module-service":"^2.0.0","rxjs":"^5.1.0","zone.js":"^0.8.4"},"devDependencies":{"@angular/common":"^4.0.0","@angular/compiler":"^4.0.0","@angular/compiler-cli":"^4.0.0","@angular/core":"^4.0.0","@angular/http":"^4.0.0","@angular/platform-browser":"^4.0.0","@angular/platform-browser-dynamic":"^4.0.0","@types/jasmine":"2.5.38","@types/node":"~6.0.60","@types/lodash":"4.14.55","codelyzer":"~2.0.0","core-js":"^2.4.1","jasmine-core":"~2.5.2","jasmine-spec-reporter":"~3.2.0","karma":"~1.4.1","karma-cli":"~1.0.1","karma-coverage":"^1.1.1","karma-coverage-istanbul-reporter":"^0.2.0","karma-jasmine":"~1.1.0","karma-jasmine-html-reporter":"^0.2.2","karma-phantomjs-launcher":"^1.0.4","karma-typescript":"^3.0.0","karma-typescript-angular2-transform":"^1.0.0","mind-module-authentication":"^1.0.1","mind-module-error-handling":"^1.1.0","mind-module-service":"^2.0.0","protractor":"~5.1.0","ts-mockito":"^1.2.0","ts-node":"~2.0.0","tslint":"~4.5.0","typescript":"~2.2.0"},"engines":{"node":">=6.0.0"},"gitHead":"b9d978d3dc77c9237cfa9125c3f0c4421bf5d8f5","readme":"# mind-module-fleet\n\nThis repo contains a service to retrieve account information from the centersight platform.\n\n## Usage\n\nTo install this library, run:\n\n```bash\n$ npm install mind-module-service --save\n$ npm install mind-module-fleet --save\n```\n\nThen, include the `FleetModule` in your Angular `NgModule`:\n\n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n// Import your library\nimport { FleetModule } from 'mind-module-fleet';\n// Import the configuration\nimport { ServiceConfig } from 'mind-module-service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FleetModule // <--------------------- The thingamagiggy here!\n  ],\n  providers: [\n    {\n      provide: ServiceConfig, // <--------- Note that you must provide an instance of the AuthConfig\n      useValue: new ServiceConfig('https://pon-test.device-insight.com', 'api/v1')\n    }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\nNote that you *must* provide an instance of the `ServiceConfig` class for DI. This configuration tells the `FleetService` where it can find the fleet backend.\n\nAlso you *must* have set up a `CredentialStorage` from the [`mind-module-authentication`](https://bitbucket.org/pondevelopment/mind-module-authentication). This is needed for the `FleetService` to deal with the authenticating any requests made against the platform.\n\n### Fleet service \n\nThe fleet service provides the following interface:\n```typescript\nexport abstract class FleetService {\n  /* Returns the [[Fleet]] associated with the passed ID. */\n  abstract getFleet(fleetId: number): Promise<Fleet>;\n\n  /* Returns the [[Fleet]] associated with the passed vehicle ID. */\n  abstract getFleetForVehicle(vehicleId: number): Promise<Fleet | undefined>;\n}\n```\n\nThe `FleetModule` will only prepare the `FleetServiceImpl` for DI. To only depend on the `FleetService` interface, you should include a line like the one below in the providers of your `NgModule`:\n\n```typescript\n{provide: FleetService, useExisting: FleetServiceImpl}\n```\n\nOnce you've prepared the `FleetService` for DI as described above, you can inject the `FleetService` into your own components/modules:\n\n```typescript\nimport {\n  Fleet,\n  FleetService\n} from 'mind-module-fleet';\n\n@Component({\n  selector: 'my-component',\n  template: `...`\n})\nclass MyComponent {\n  constructor(private fleetService: FleetService) { // <----- Injection happens here\n  }\n  \n  getFleetForVehicle(vehicleId: number) {\n    this.fleetService\n      .getFleetForVehicle(vehicleId) // <-------------------------------------- Retrieve your fleet\n      .catch(this.handleErrors)\n  }\n  \n  ...\n}\n```\n## Development\n\nTo generate all `*.js`, `*.js.map` and `*.d.ts` files:\n\n```bash\n$ npm run tsc\n```\n\nAfterwards, the compiled `js` files can be found in the `./dist` directory.\n\nTo lint all `*.ts` files:\n\n```bash\n$ npm run lint\n```\n\nDuring development the unit tests can automatically be run using PhantomJS:\n\n```bash\n$ npm test\n```\n\nWhen a file has been changed/added/deleted, the tests will automatically be rerun.\n\nThe coverage of the tests will be monitored. The results can be found in: `./coverage/PhantomJS <some version and platform>/index.html`. To view the results, simply open this file in your favorite browser (supporting javascript).\n\nTo test your changes locally in an angular app, you could link this module to your global `node_modules` without publishing the module:\n\n```bash\n$ cd /path/to/mind-module-fleet/\n$ npm link\n$ cd /path/to/your/angular2/app/\n$ npm link mind-module-fleet\n```\n\nThis will create a symlink between the `mind-module-fleet` and the `node_modules` of your angular 2 app.\n\n## License\n\nMIT Â© [Mind mobility](mailto:info@mindmobility.nl)\n","readmeFilename":"README.md","description":"This repo contains a service to retrieve account information from the centersight platform.","homepage":"https://bitbucket.org/pondevelopment/mind-module-fleet#readme","_id":"mind-module-fleet@0.0.5","_npmVersion":"5.6.0","_nodeVersion":"8.11.4","_npmUser":{"name":"ponJenkinsIntegration","email":"info@pondevelopment.com"},"maintainers":[{"name":"ponJenkinsIntegration","email":"info@pondevelopment.com"}],"dist":{"integrity":"sha512-EtBRlDTpr1XHPAdRGvveG+23EUcD0bPWfG8SztoxmwwsRAfEPYKeFd1ZNa2U+8Ner1zdt5jezUqwoWboqHy7LA==","shasum":"7e581987748b071b851e4d048785c9bdb0afb9c2","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/mind-module-fleet/-/mind-module-fleet-0.0.5.tgz"}},"0.1.0":{"name":"mind-module-fleet","version":"0.1.0","scripts":{"build":"ngc -p tsconfig.json","lint":"tslint --type-check --project tsconfig.json src/**/*.ts","test":"tsc && karma start","test-singlerun":"tsc && karma start --single-run"},"publishConfig":{"registry":"https://nexusrepo.pondevelopment.com/repository/mind-npm/"},"repository":{"type":"git","url":"git+ssh://git@bitbucket.org/pondevelopment/mind-module-fleet.git"},"author":{"name":"Han van Venrooij","email":"han.van.venrooij@pon.com"},"keywords":["angular"],"license":"MIT","bugs":{"url":"https://pondevelopment.atlassian.net/"},"main":"dist/index.js","types":"dist/index.d.ts","dependencies":{"@angular/common":"7.2.2","@angular/core":"7.2.2","@angular/http":"7.2.2","mind-module-authentication":"^1.0.1","mind-module-error-handling":"^1.1.0","mind-module-service":"^2.0.0","rxjs":"6.5.1","rxjs-compat":"^6.5.2","zone.js":"^0.8.4"},"devDependencies":{"@angular/common":"7.2.2","@angular/compiler":"7.2.2","@angular/compiler-cli":"7.2.2","@angular/core":"7.2.2","@angular/http":"7.2.2","@angular/platform-browser":"7.2.2","@angular/platform-browser-dynamic":"7.2.2","@types/jasmine":"2.5.38","@types/node":"~6.0.60","@types/lodash":"4.14.130","codelyzer":"~2.0.0","core-js":"^2.4.1","jasmine-core":"~2.5.2","jasmine-spec-reporter":"~3.2.0","karma":"~4.1.0","karma-chrome-launcher":"~2.2.0","karma-cli":"~1.0.1","karma-coverage":"^1.1.1","karma-coverage-istanbul-reporter":"~2.0.1","karma-jasmine":"~1.1.2","karma-jasmine-html-reporter":"^0.2.2","karma-phantomjs-launcher":"^1.0.4","karma-typescript":"^3.0.0","karma-typescript-angular2-transform":"^1.0.0","mind-module-authentication":"^1.0.1","mind-module-error-handling":"^1.1.0","mind-module-service":"^2.0.0","protractor":"~5.1.0","ts-mockito":"^1.2.0","ts-node":"~2.0.0","tslint":"~4.5.0","typescript":"~3.1.6"},"engines":{"node":">=6.0.0"},"gitHead":"034ec3cb3ef0a9c8f3b26bd5b7ee45d991b7eddb","readme":"# mind-module-fleet\n\nThis repo contains a service to retrieve account information from the centersight platform.\n\n## Usage\n\nTo install this library, run:\n\n```bash\n$ npm install mind-module-service --save\n$ npm install mind-module-fleet --save\n```\n\nThen, include the `FleetModule` in your Angular `NgModule`:\n\n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n// Import your library\nimport { FleetModule } from 'mind-module-fleet';\n// Import the configuration\nimport { ServiceConfig } from 'mind-module-service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FleetModule // <--------------------- The thingamagiggy here!\n  ],\n  providers: [\n    {\n      provide: ServiceConfig, // <--------- Note that you must provide an instance of the AuthConfig\n      useValue: new ServiceConfig('https://pon-test.device-insight.com', 'api/v1')\n    }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\nNote that you *must* provide an instance of the `ServiceConfig` class for DI. This configuration tells the `FleetService` where it can find the fleet backend.\n\nAlso you *must* have set up a `CredentialStorage` from the [`mind-module-authentication`](https://bitbucket.org/pondevelopment/mind-module-authentication). This is needed for the `FleetService` to deal with the authenticating any requests made against the platform.\n\n### Fleet service \n\nThe fleet service provides the following interface:\n```typescript\nexport abstract class FleetService {\n  /* Returns the [[Fleet]] associated with the passed ID. */\n  abstract getFleet(fleetId: number): Promise<Fleet>;\n\n  /* Returns the [[Fleet]] associated with the passed vehicle ID. */\n  abstract getFleetForVehicle(vehicleId: number): Promise<Fleet | undefined>;\n}\n```\n\nThe `FleetModule` will only prepare the `FleetServiceImpl` for DI. To only depend on the `FleetService` interface, you should include a line like the one below in the providers of your `NgModule`:\n\n```typescript\n{provide: FleetService, useExisting: FleetServiceImpl}\n```\n\nOnce you've prepared the `FleetService` for DI as described above, you can inject the `FleetService` into your own components/modules:\n\n```typescript\nimport {\n  Fleet,\n  FleetService\n} from 'mind-module-fleet';\n\n@Component({\n  selector: 'my-component',\n  template: `...`\n})\nclass MyComponent {\n  constructor(private fleetService: FleetService) { // <----- Injection happens here\n  }\n  \n  getFleetForVehicle(vehicleId: number) {\n    this.fleetService\n      .getFleetForVehicle(vehicleId) // <-------------------------------------- Retrieve your fleet\n      .catch(this.handleErrors)\n  }\n  \n  ...\n}\n```\n## Development\n\nTo generate all `*.js`, `*.js.map` and `*.d.ts` files:\n\n```bash\n$ npm run tsc\n```\n\nAfterwards, the compiled `js` files can be found in the `./dist` directory.\n\nTo lint all `*.ts` files:\n\n```bash\n$ npm run lint\n```\n\nDuring development the unit tests can automatically be run using PhantomJS:\n\n```bash\n$ npm test\n```\n\nWhen a file has been changed/added/deleted, the tests will automatically be rerun.\n\nThe coverage of the tests will be monitored. The results can be found in: `./coverage/PhantomJS <some version and platform>/index.html`. To view the results, simply open this file in your favorite browser (supporting javascript).\n\nTo test your changes locally in an angular app, you could link this module to your global `node_modules` without publishing the module:\n\n```bash\n$ cd /path/to/mind-module-fleet/\n$ npm link\n$ cd /path/to/your/angular2/app/\n$ npm link mind-module-fleet\n```\n\nThis will create a symlink between the `mind-module-fleet` and the `node_modules` of your angular 2 app.\n\n## License\n\nMIT Â© [Mind mobility](mailto:info@mindmobility.nl)\n","readmeFilename":"README.md","description":"This repo contains a service to retrieve account information from the centersight platform.","homepage":"https://bitbucket.org/pondevelopment/mind-module-fleet#readme","_id":"mind-module-fleet@0.1.0","_npmVersion":"5.6.0","_nodeVersion":"8.11.4","_npmUser":{"name":"jenkins-npm","email":"devops@pon.com"},"maintainers":[{"name":"jenkins-npm","email":"devops@pon.com"}],"dist":{"integrity":"sha512-VzRvEElFxWiPraCaVV+GfRg8AJW3kyEz+KlnmbGR2cJkPbrqCIBZCy8WkF2IjTma1Ws01w2eL5id0ELYRMTpAg==","shasum":"7e6c727c0f7c3c9061158a59c17599d2de113dbf","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/mind-module-fleet/-/mind-module-fleet-0.1.0.tgz"}},"0.1.1":{"name":"mind-module-fleet","version":"0.1.1","scripts":{"build":"ngc -p tsconfig.json","lint":"tslint --type-check --project tsconfig.json src/**/*.ts","test":"tsc && karma start","test-singlerun":"tsc && karma start --single-run"},"publishConfig":{"registry":"https://nexusrepo.pondevelopment.com/repository/mind-npm/"},"repository":{"type":"git","url":"git+ssh://git@bitbucket.org/pondevelopment/mind-module-fleet.git"},"author":{"name":"Han van Venrooij","email":"han.van.venrooij@pon.com"},"keywords":["angular"],"license":"MIT","bugs":{"url":"https://pondevelopment.atlassian.net/"},"main":"dist/index.js","types":"dist/index.d.ts","dependencies":{"@angular/common":"7.2.2","@angular/core":"7.2.2","@angular/http":"7.2.2","mind-module-authentication":"^1.0.1","mind-module-error-handling":"^1.1.0","mind-module-service":"^2.0.0","rxjs":"6.5.1","rxjs-compat":"^6.5.2","zone.js":"^0.8.4"},"devDependencies":{"@angular/common":"7.2.2","@angular/compiler":"7.2.2","@angular/compiler-cli":"7.2.2","@angular/core":"7.2.2","@angular/http":"7.2.2","@angular/platform-browser":"7.2.2","@angular/platform-browser-dynamic":"7.2.2","@types/jasmine":"2.5.38","@types/node":"~6.0.60","@types/lodash":"4.14.130","codelyzer":"~2.0.0","core-js":"^2.4.1","jasmine-core":"~2.5.2","jasmine-spec-reporter":"~3.2.0","karma":"~4.1.0","karma-chrome-launcher":"~2.2.0","karma-cli":"~1.0.1","karma-coverage":"^1.1.1","karma-coverage-istanbul-reporter":"~2.0.1","karma-jasmine":"~1.1.2","karma-jasmine-html-reporter":"^0.2.2","karma-phantomjs-launcher":"^1.0.4","karma-typescript":"^3.0.0","karma-typescript-angular2-transform":"^1.0.0","mind-module-authentication":"^1.0.1","mind-module-error-handling":"^1.1.0","mind-module-service":"^2.0.0","protractor":"~5.1.0","ts-mockito":"^1.2.0","ts-node":"~2.0.0","tslint":"~4.5.0","typescript":"~3.1.6"},"engines":{"node":">=6.0.0"},"gitHead":"e59c042acae362b91986e77748e39b2174712aca","readme":"# mind-module-fleet\n\nThis repo contains a service to retrieve account information from the centersight platform.\n\n## Usage\n\nTo install this library, run:\n\n```bash\n$ npm install mind-module-service --save\n$ npm install mind-module-fleet --save\n```\n\nThen, include the `FleetModule` in your Angular `NgModule`:\n\n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n// Import your library\nimport { FleetModule } from 'mind-module-fleet';\n// Import the configuration\nimport { ServiceConfig } from 'mind-module-service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FleetModule // <--------------------- The thingamagiggy here!\n  ],\n  providers: [\n    {\n      provide: ServiceConfig, // <--------- Note that you must provide an instance of the AuthConfig\n      useValue: new ServiceConfig('https://pon-test.device-insight.com', 'api/v1')\n    }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\nNote that you *must* provide an instance of the `ServiceConfig` class for DI. This configuration tells the `FleetService` where it can find the fleet backend.\n\nAlso you *must* have set up a `CredentialStorage` from the [`mind-module-authentication`](https://bitbucket.org/pondevelopment/mind-module-authentication). This is needed for the `FleetService` to deal with the authenticating any requests made against the platform.\n\n### Fleet service \n\nThe fleet service provides the following interface:\n```typescript\nexport abstract class FleetService {\n  /* Returns the [[Fleet]] associated with the passed ID. */\n  abstract getFleet(fleetId: number): Promise<Fleet>;\n\n  /* Returns the [[Fleet]] associated with the passed vehicle ID. */\n  abstract getFleetForVehicle(vehicleId: number): Promise<Fleet | undefined>;\n}\n```\n\nThe `FleetModule` will only prepare the `FleetServiceImpl` for DI. To only depend on the `FleetService` interface, you should include a line like the one below in the providers of your `NgModule`:\n\n```typescript\n{provide: FleetService, useExisting: FleetServiceImpl}\n```\n\nOnce you've prepared the `FleetService` for DI as described above, you can inject the `FleetService` into your own components/modules:\n\n```typescript\nimport {\n  Fleet,\n  FleetService\n} from 'mind-module-fleet';\n\n@Component({\n  selector: 'my-component',\n  template: `...`\n})\nclass MyComponent {\n  constructor(private fleetService: FleetService) { // <----- Injection happens here\n  }\n  \n  getFleetForVehicle(vehicleId: number) {\n    this.fleetService\n      .getFleetForVehicle(vehicleId) // <-------------------------------------- Retrieve your fleet\n      .catch(this.handleErrors)\n  }\n  \n  ...\n}\n```\n## Development\n\nTo generate all `*.js`, `*.js.map` and `*.d.ts` files:\n\n```bash\n$ npm run tsc\n```\n\nAfterwards, the compiled `js` files can be found in the `./dist` directory.\n\nTo lint all `*.ts` files:\n\n```bash\n$ npm run lint\n```\n\nDuring development the unit tests can automatically be run using PhantomJS:\n\n```bash\n$ npm test\n```\n\nWhen a file has been changed/added/deleted, the tests will automatically be rerun.\n\nThe coverage of the tests will be monitored. The results can be found in: `./coverage/PhantomJS <some version and platform>/index.html`. To view the results, simply open this file in your favorite browser (supporting javascript).\n\nTo test your changes locally in an angular app, you could link this module to your global `node_modules` without publishing the module:\n\n```bash\n$ cd /path/to/mind-module-fleet/\n$ npm link\n$ cd /path/to/your/angular2/app/\n$ npm link mind-module-fleet\n```\n\nThis will create a symlink between the `mind-module-fleet` and the `node_modules` of your angular 2 app.\n\n## License\n\nMIT Â© [Mind mobility](mailto:info@mindmobility.nl)\n","readmeFilename":"README.md","description":"This repo contains a service to retrieve account information from the centersight platform.","homepage":"https://bitbucket.org/pondevelopment/mind-module-fleet#readme","_id":"mind-module-fleet@0.1.1","_npmVersion":"5.6.0","_nodeVersion":"8.11.4","_npmUser":{"name":"jenkins-npm","email":"devops@pon.com"},"maintainers":[{"name":"jenkins-npm","email":"devops@pon.com"}],"dist":{"integrity":"sha512-DBnsSMoOUW1p63sJTbskphQINDzcIjVikys1wHQk944MukOsElNZLEqM5rj89QYx/XZldharzzuwWfaGGYodDQ==","shasum":"281fa9bca951d0618c34802acb083972d04153ba","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/mind-module-fleet/-/mind-module-fleet-0.1.1.tgz"}}},"name":"mind-module-fleet","_rev":"120","description":"This repo contains a service to retrieve account information from the centersight platform.","readme":"# mind-module-fleet\n\nThis repo contains a service to retrieve account information from the centersight platform.\n\n## Usage\n\nTo install this library, run:\n\n```bash\n$ npm install mind-module-service --save\n$ npm install mind-module-fleet --save\n```\n\nThen, include the `FleetModule` in your Angular `NgModule`:\n\n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n// Import your library\nimport { FleetModule } from 'mind-module-fleet';\n// Import the configuration\nimport { ServiceConfig } from 'mind-module-service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FleetModule // <--------------------- The thingamagiggy here!\n  ],\n  providers: [\n    {\n      provide: ServiceConfig, // <--------- Note that you must provide an instance of the AuthConfig\n      useValue: new ServiceConfig('https://pon-test.device-insight.com', 'api/v1')\n    }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\nNote that you *must* provide an instance of the `ServiceConfig` class for DI. This configuration tells the `FleetService` where it can find the fleet backend.\n\nAlso you *must* have set up a `CredentialStorage` from the [`mind-module-authentication`](https://bitbucket.org/pondevelopment/mind-module-authentication). This is needed for the `FleetService` to deal with the authenticating any requests made against the platform.\n\n### Fleet service \n\nThe fleet service provides the following interface:\n```typescript\nexport abstract class FleetService {\n  /* Returns the [[Fleet]] associated with the passed ID. */\n  abstract getFleet(fleetId: number): Promise<Fleet>;\n\n  /* Returns the [[Fleet]] associated with the passed vehicle ID. */\n  abstract getFleetForVehicle(vehicleId: number): Promise<Fleet | undefined>;\n}\n```\n\nThe `FleetModule` will only prepare the `FleetServiceImpl` for DI. To only depend on the `FleetService` interface, you should include a line like the one below in the providers of your `NgModule`:\n\n```typescript\n{provide: FleetService, useExisting: FleetServiceImpl}\n```\n\nOnce you've prepared the `FleetService` for DI as described above, you can inject the `FleetService` into your own components/modules:\n\n```typescript\nimport {\n  Fleet,\n  FleetService\n} from 'mind-module-fleet';\n\n@Component({\n  selector: 'my-component',\n  template: `...`\n})\nclass MyComponent {\n  constructor(private fleetService: FleetService) { // <----- Injection happens here\n  }\n  \n  getFleetForVehicle(vehicleId: number) {\n    this.fleetService\n      .getFleetForVehicle(vehicleId) // <-------------------------------------- Retrieve your fleet\n      .catch(this.handleErrors)\n  }\n  \n  ...\n}\n```\n## Development\n\nTo generate all `*.js`, `*.js.map` and `*.d.ts` files:\n\n```bash\n$ npm run tsc\n```\n\nAfterwards, the compiled `js` files can be found in the `./dist` directory.\n\nTo lint all `*.ts` files:\n\n```bash\n$ npm run lint\n```\n\nDuring development the unit tests can automatically be run using PhantomJS:\n\n```bash\n$ npm test\n```\n\nWhen a file has been changed/added/deleted, the tests will automatically be rerun.\n\nThe coverage of the tests will be monitored. The results can be found in: `./coverage/PhantomJS <some version and platform>/index.html`. To view the results, simply open this file in your favorite browser (supporting javascript).\n\nTo test your changes locally in an angular app, you could link this module to your global `node_modules` without publishing the module:\n\n```bash\n$ cd /path/to/mind-module-fleet/\n$ npm link\n$ cd /path/to/your/angular2/app/\n$ npm link mind-module-fleet\n```\n\nThis will create a symlink between the `mind-module-fleet` and the `node_modules` of your angular 2 app.\n\n## License\n\nMIT Â© [Mind mobility](mailto:info@mindmobility.nl)\n","time":{"0.0.4":"2019-03-13T10:03:36.998Z","created":"2019-03-13T10:03:36.998Z","modified":"2019-11-06T12:28:30.776Z","0.0.5":"2019-03-19T13:05:29.546Z","0.1.0":"2019-05-21T13:16:07.598Z","0.1.1":"2019-11-06T12:28:30.776Z"},"_id":"mind-module-fleet"}