{"maintainers":[{"email":"felix@debuggable.com","name":"felixge"},{"email":"npmspam@geekhood.net","name":"kornel"},{"email":"nathanael.dmc@outlook.fr","name":"quantumsheep"},{"email":"opensource@tunnckocore.com","name":"tunnckocore"}],"dist-tags":{"latest":"1.2.2","canary":"2.0.0-canary.20200226.1","dev":"2.0.0-dev.20200131.2"},"_rev":"411","description":"A node.js module for parsing form data, especially file uploads.","readme":"","repository":{"type":"git","url":"git+https://github.com/node-formidable/formidable.git"},"users":{"291296283":true,"1062922605":true,"tjholowaychuk":true,"naholyr":true,"guybrush":true,"yazgazan":true,"tellnes":true,"fgribreau":true,"pid":true,"m42am":true,"likeyn":true,"luk":true,"leesei":true,"dubban":true,"eins78":true,"joliva":true,"doliveira":true,"claveren":true,"kerimdzhanov":true,"aminrx":true,"cilindrox":true,"huangjia86":true,"leodutra":true,"evkline":true,"micnic":true,"redbe4rd":true,"summer":true,"humantriangle":true,"cosebe":true,"jbdoumenjou":true,"shen-weizhong":true,"roryrjb":true,"sunrising":true,"josephdavisco":true,"old9":true,"adamlu":true,"gabeio":true,"richardleggett":true,"tsangint":true,"timtones":true,"hellboy81":true,"thebearingedge":true,"santosharakere":true,"cocopas":true,"tsavela":true,"adswebwork":true,"byossarian":true,"kkogovsek":true,"devlaundry":true,"dna2go":true,"ivangaravito":true,"voischev":true,"kogai":true,"satblip":true,"nunn":true,"gonzalofj":true,"jimster305":true,"dnero":true,"kikar":true,"ayoungh":true,"psantori":true,"marco.jahn":true,"kulakowka":true,"schnarald":true,"markthethomas":true,"manxisuo":true,"akiva":true,"dongxu":true,"labithiotis":true,"nickleefly":true,"staraple":true,"iamwiz":true,"moimikey":true,"dolymood":true,"brandonpapworth":true,"craneleeon":true,"luuhoangnam":true,"modao":true,"mofies":true,"nex":true,"liveinjs":true,"lcsrinaldi":true,"2dxgujun":true,"monkeymonk":true,"nickeltobias":true,"starknode":true,"m412c0":true,"lionft":true,"nketchum":true,"mjurincic":true,"inn0vative1":true,"n0w":true,"reecegoddard":true,"srbdev":true,"fotooo":true,"liushoukai":true,"igorissen":true,"tujiaw":true,"urbantumbleweed":true,"josejaguirre":true,"gfilip":true,"stany":true,"ziflex":true,"illustratordavid":true,"shadowlong":true,"vladkozlovski":true,"tobiasnickel":true,"xiechao06":true,"wangnan0610":true,"xngiser":true,"joneszhuchinagd":true,"lwgojustgo":true,"seuhkx":true,"iroc":true,"gerardogallegos":true,"psmorrow":true,"kankungyip":true,"monjer":true,"cslater":true,"lijinghust":true,"xinwangwang":true,"josemarjobs":true,"roman-io":true,"ghkddbguse":true,"a904616537":true,"sammok2003":true,"cdflove9426":true,"flynntsc":true,"kulis":true,"samlaudev":true,"wenbing":true,"zhenzhong":true,"takethefire":true,"ddkothari":true,"mate2":true,"jflagg":true,"evanzhang":true,"icerainnuaa":true,"zanner":true,"carlhong":true,"marcobiedermann":true,"tonyljl526":true,"hockor":true,"lhard":true,"ggomma":true,"djhojd":true,"iori20091101":true,"rsaa":true,"bigglesatlarge":true,"kistoryg":true,"mobeicaoyuan":true,"jmsherry":true,"mhaidarh":true,"godoshian":true,"lonjoy":true,"knoja4":true,"adamdreszer":true,"yuxuanjiang":true,"gui0704":true,"sammy_winchester":true,"adhamfarrag":true,"moling":true,"gc-z":true,"aj888907":true,"satoru":true,"papasavva":true,"linfeng9008":true,"ze25800000":true,"kbakba":true,"wintgp":true,"vonmauser":true,"rocket0191":true,"mife":true,"patrickbullion":true,"alvis":true,"guoooofu":true,"sadmansamee":true,"tomchao":true,"xiachengcn":true,"kodekracker":true,"shiweiping":true,"alien":true,"guojikai":true,"shuoshubao":true,"adv30":true,"wqhash":true,"timeh":true,"nuer":true,"xiaoyiyu":true,"machinabio":true,"lwk":true,"jiayihongy":true,"cocoayog":true,"yokiijay":true,"xtx1130":true,"wozhizui":true,"vb078":true,"alanzhang001":true,"zerouikit":true,"lx70770":true,"hexcola":true,"wayn":true,"fonteyn":true,"poryoung":true,"abhijitkalta":true,"actionklo":true,"xiaoyangyangly":true,"jeriming":true,"lucasbonvin":true,"bartmao":true,"n0f3":true,"superchenney":true,"enhezzz":true,"yl2014":true,"xfloops":true,"maxwelldu":true,"chenyingxuan1996":true,"strugglexiang":true,"tpkn":true,"remixone":true,"hua-sc":true,"chirag8642":true,"hanhq":true,"edwardxyt":true,"allen_lyu":true,"npmzlj":true,"yichan":true,"mrhuangyuhui":true,"hai_name":true,"71emj1":true,"gqxqd":true,"mdedirudianto":true,"jackchendong":true,"kamikadze4game":true,"fouad.nashat":true,"he313572052":true,"tzedakischaridimos":true,"zwwggg":true,"rparris":true,"diogocapela":true,"annapolis":true,"cfleschhut":true,"technolojay":true,"bouncing-bison":true},"bugs":{"url":"https://github.com/node-formidable/formidable/issues"},"license":"MIT","versions":{"0.3.0":{"name":"formidable","version":"0.3.0","dependencies":{"gently":">=0.6.0"},"directories":{"lib":"./lib/formidable"},"main":"./lib/formidable/index","_id":"formidable@0.3.0","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-0.3.0.tgz","shasum":"84112d39db3d5889651d212c6b2e40a4fc93c7c1"}},"0.4.0":{"name":"formidable","version":"0.4.0","dependencies":{"gently":">=0.6.0"},"directories":{"lib":"./lib/formidable"},"main":"./lib/formidable/index","_id":"formidable@0.4.0","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-0.4.0.tgz","shasum":"32c899dd32440552c18d27cdd2854693c6eeb1bf"}},"0.5.0":{"name":"formidable","version":"0.5.0","dependencies":{"gently":">=0.6.0"},"directories":{"lib":"./lib/formidable"},"main":"./lib/formidable/index","_id":"formidable@0.5.0","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-0.5.0.tgz","shasum":"81e605321b2aefb01bb5063d827f6567aac2303d"}},"0.6.0":{"name":"formidable","version":"0.6.0","dependencies":{"gently":">=0.6.0"},"directories":{"lib":"./lib/formidable"},"main":"./lib/formidable/index","_id":"formidable@0.6.0","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-0.6.0.tgz","shasum":"99cc8bf984a41eacdf4c6192f26a6a13a753f521"}},"0.7.0":{"name":"formidable","version":"0.7.0","dependencies":{"gently":">=0.7.0"},"directories":{"lib":"./lib/formidable"},"main":"./lib/formidable/index","_id":"formidable@0.7.0","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-0.7.0.tgz","shasum":"c0c164916777dc6cee4850d01b9f766ac776a106"},"deprecated":"Old versions of Formidable are not compatible with the current Node.js; Upgrade to 1.2.0 or later"},"0.8.0":{"name":"formidable","version":"0.8.0","dependencies":{"gently":">=0.7.0"},"directories":{"lib":"./lib/formidable"},"main":"./lib/formidable/index","_id":"formidable@0.8.0","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-0.8.0.tgz","shasum":"bd6f383b7e32a3fa298c953c536885716caa942a"},"deprecated":"Old versions of Formidable are not compatible with the current Node.js; Upgrade to 1.2.0 or later"},"0.9.0":{"name":"formidable","version":"0.9.0","dependencies":{"gently":">=0.7.0"},"directories":{"lib":"./lib/formidable"},"main":"./lib/formidable/index","_id":"formidable@0.9.0","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-0.9.0.tgz","shasum":"389a5f00d712a9c410254867cee98c3fccfd6300"}},"0.9.1":{"name":"formidable","version":"0.9.1","dependencies":{"gently":">=0.7.0"},"directories":{"lib":"./lib/formidable"},"main":"./lib/formidable/index","_id":"formidable@0.9.1","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-0.9.1.tgz","shasum":"a3a43b494d5c430b82006419ff2dd78be22fa3e8"}},"0.9.2":{"name":"formidable","version":"0.9.2","dependencies":{"gently":">=0.7.0"},"directories":{"lib":"./lib/formidable"},"main":"./lib/formidable/index","_id":"formidable@0.9.2","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-0.9.2.tgz","shasum":"caab8a47526da68d97da6461c30691cff80fa9a8"}},"0.9.3":{"name":"formidable","version":"0.9.3","dependencies":{"gently":">=0.7.0"},"directories":{"lib":"./lib/formidable"},"main":"./lib/formidable/index","_id":"formidable@0.9.3","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-0.9.3.tgz","shasum":"af4bb633aee0f4a84d5785a82d478e7089c1e33f"}},"0.9.4":{"name":"formidable","version":"0.9.4","dependencies":{"gently":">=0.7.0"},"directories":{"lib":"./lib/formidable"},"main":"./lib/formidable/index","_id":"formidable@0.9.4","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-0.9.4.tgz","shasum":"d29f656139734264f2a433fc91a2c60a1aa3d7d5"}},"0.9.5":{"name":"formidable","version":"0.9.5","dependencies":{"gently":">=0.7.0"},"directories":{"lib":"./lib/formidable"},"main":"./lib/formidable/index","_id":"formidable@0.9.5","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-0.9.5.tgz","shasum":"b42433bd4d94991551225a96c2ab4f449a13b462"}},"0.9.6":{"name":"formidable","version":"0.9.6","dependencies":{"gently":">=0.7.0"},"directories":{"lib":"./lib/formidable"},"main":"./lib/formidable/index","_id":"formidable@0.9.6","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-0.9.6.tgz","shasum":"20af6ec6b0e9302c106733247f5abda5dc8a0d48"}},"0.9.7":{"name":"formidable","version":"0.9.7","dependencies":{"gently":">=0.7.0"},"directories":{"lib":"./lib/formidable"},"main":"./lib/formidable/index","_id":"formidable@0.9.7","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-0.9.7.tgz","shasum":"62b150c2be0d0f535ea0616d3a07810b58888f18"}},"0.9.8":{"name":"formidable","version":"0.9.8","dependencies":{"gently":">=0.7.0"},"directories":{"lib":"./lib/formidable"},"main":"./lib/formidable/index","_id":"formidable@0.9.8","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-0.9.8.tgz","shasum":"8920c32c033b5fe52d4100dff73bb990a211b647"}},"0.9.9":{"name":"formidable","version":"0.9.9","dependencies":{"gently":">=0.7.0"},"directories":{"lib":"./lib/formidable"},"main":"./lib/formidable/index","_id":"formidable@0.9.9","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-0.9.9.tgz","shasum":"d30dd36176f022c59bee94a8daaa0476f6435bf2"}},"0.9.10":{"name":"formidable","version":"0.9.10","dependencies":{"gently":">=0.7.0"},"directories":{"lib":"./lib/formidable"},"main":"./lib/formidable/index","_id":"formidable@0.9.10","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.10-1","_nodeVersion":"v0.3.2-pre","dist":{"shasum":"cee802aa5fb11024cca112a7ee2e2e89956aeb80","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-0.9.10.tgz"}},"0.9.11":{"name":"formidable","version":"0.9.11","dependencies":{"gently":">=0.7.0"},"directories":{"lib":"./lib/formidable"},"main":"./lib/formidable/index","_id":"formidable@0.9.11","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.10-1","_nodeVersion":"v0.3.5-pre","dist":{"shasum":"35285f3c2c5f115742a13717e2f0c1556994c4f3","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-0.9.11.tgz"},"deprecated":"Old versions of Formidable are not compatible with the current Node.js; Upgrade to 1.2.0 or later"},"1.0.0":{"name":"formidable","version":"1.0.0","dependencies":{"gently":">=0.7.0"},"directories":{"lib":"./lib/formidable"},"main":"./lib/formidable/index","engines":{"node":"*"},"_id":"formidable@1.0.0","_engineSupported":true,"_npmVersion":"1.0.1rc4","_nodeVersion":"v0.4.6-pre","_defaultsLoaded":true,"dist":{"shasum":"4eb41d5d99c99fd54773a0132075c11822ca103f","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-1.0.0.tgz"},"deprecated":"Old versions of Formidable are not compatible with the current Node.js; Upgrade to 1.2.0 or later"},"1.0.1":{"name":"formidable","version":"1.0.1","dependencies":{"gently":">=0.7.0"},"directories":{"lib":"./lib"},"main":"./lib/index","engines":{"node":"*"},"devDependencies":{},"_id":"formidable@1.0.1","_engineSupported":true,"_npmVersion":"1.0.3","_nodeVersion":"v0.4.8-pre","_defaultsLoaded":true,"dist":{"shasum":"d9fe626c303e8cbca9d29115497a47da6eff29e9","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-1.0.1.tgz"},"scripts":{}},"1.0.2":{"name":"formidable","version":"1.0.2","dependencies":{},"devDependencies":{"gently":">=0.7.0"},"directories":{"lib":"./lib"},"main":"./lib/index","engines":{"node":"*"},"_id":"formidable@1.0.2","_engineSupported":true,"_npmVersion":"1.0.3","_nodeVersion":"v0.4.9-pre","_defaultsLoaded":true,"dist":{"shasum":"6e7887db43be310c57970143671dfc91d46f939d","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-1.0.2.tgz"},"scripts":{}},"1.0.3":{"name":"formidable","version":"1.0.3","dependencies":{},"devDependencies":{"gently":"0.8.0","far":"0.0.7","fast-or-slow":"0.0.5","findit":"0.1.1","hashish":"0.0.4"},"directories":{"lib":"./lib"},"main":"./lib/index","engines":{"node":"*"},"_npmJsonOpts":{"file":"/Users/felix/.npm/formidable/1.0.3/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"formidable@1.0.3","_engineSupported":true,"_npmVersion":"1.0.26","_nodeVersion":"v0.4.10-pre","_defaultsLoaded":true,"dist":{"shasum":"55c314201245f4d21b0f0c58373d30c85e53d6e9","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-1.0.3.tgz"},"scripts":{},"maintainers":[{"name":"felixge","email":"felix@debuggable.com"}]},"1.0.4":{"name":"formidable","version":"1.0.4","dependencies":{},"devDependencies":{"gently":"0.8.0","far":"0.0.7","fast-or-slow":"0.0.5","findit":"0.1.1","hashish":"0.0.4"},"directories":{"lib":"./lib"},"main":"./lib/index","engines":{"node":"*"},"_npmJsonOpts":{"file":"/Users/felix/.npm/formidable/1.0.4/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"formidable@1.0.4","_engineSupported":true,"_npmVersion":"1.0.26","_nodeVersion":"v0.4.10-pre","_defaultsLoaded":true,"dist":{"shasum":"e2447795406a95b30b4b5b58ac572abb207fae4a","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-1.0.4.tgz"},"scripts":{},"maintainers":[{"name":"felixge","email":"felix@debuggable.com"}]},"1.0.5":{"name":"formidable","version":"1.0.5","dependencies":{},"devDependencies":{"gently":"0.8.0","far":"0.0.7","fast-or-slow":"0.0.5","findit":"0.1.1","hashish":"0.0.4"},"directories":{"lib":"./lib"},"main":"./lib/index","engines":{"node":"*"},"_npmJsonOpts":{"file":"/Users/felix/.npm/formidable/1.0.5/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"formidable@1.0.5","_engineSupported":true,"_npmVersion":"1.0.26","_nodeVersion":"v0.4.10-pre","_defaultsLoaded":true,"dist":{"shasum":"55e60b34931f3bb03eedbb6777312177eb6f87b4","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-1.0.5.tgz"},"scripts":{},"maintainers":[{"name":"felixge","email":"felix@debuggable.com"}]},"1.0.6":{"name":"formidable","version":"1.0.6","dependencies":{},"devDependencies":{"gently":"0.8.0","far":"0.0.7","fast-or-slow":"0.0.5","findit":"0.1.1","hashish":"0.0.4"},"directories":{"lib":"./lib"},"main":"./lib/index","engines":{"node":"*"},"_npmJsonOpts":{"file":"/Users/felix/.npm/formidable/1.0.6/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"formidable@1.0.6","_engineSupported":true,"_npmVersion":"1.0.26","_nodeVersion":"v0.4.10-pre","_defaultsLoaded":true,"dist":{"shasum":"fb92046525c6e5781d9683c54324afd36edd24a0","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-1.0.6.tgz"},"scripts":{},"maintainers":[{"name":"felixge","email":"felix@debuggable.com"}]},"1.0.7":{"name":"formidable","version":"1.0.7","dependencies":{},"devDependencies":{"gently":"0.8.0","far":"0.0.7","fast-or-slow":"0.0.5","findit":"0.1.1","hashish":"0.0.4"},"directories":{"lib":"./lib"},"main":"./lib/index","engines":{"node":"*"},"_npmUser":{"name":"felixge","email":"felix@debuggable.com"},"_id":"formidable@1.0.7","_engineSupported":true,"_npmVersion":"1.0.101","_nodeVersion":"v0.4.13-pre","_defaultsLoaded":true,"dist":{"shasum":"ac9f74432f222199d685555d5197e19212972992","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-1.0.7.tgz"},"maintainers":[{"name":"felixge","email":"felix@debuggable.com"}]},"1.0.8":{"name":"formidable","version":"1.0.8","dependencies":{},"devDependencies":{"gently":"0.8.0","findit":"0.1.1","hashish":"0.0.4","urun":"0.0.4","utest":"0.0.3"},"directories":{"lib":"./lib"},"main":"./lib/index","scripts":{"test":"make test"},"engines":{"node":"*"},"_npmUser":{"name":"felixge","email":"felix@debuggable.com"},"_id":"formidable@1.0.8","_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.13-pre","_defaultsLoaded":true,"dist":{"shasum":"ac119ceaf039a288d57649aeec38f03b6269bbce","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-1.0.8.tgz"},"maintainers":[{"name":"felixge","email":"felix@debuggable.com"}]},"1.0.9":{"name":"formidable","version":"1.0.9","dependencies":{},"devDependencies":{"gently":"0.8.0","findit":"0.1.1","hashish":"0.0.4","urun":"0.0.4","utest":"0.0.3"},"directories":{"lib":"./lib"},"main":"./lib/index","scripts":{"test":"make test"},"engines":{"node":"*"},"_npmUser":{"name":"felixge","email":"felix@debuggable.com"},"_id":"formidable@1.0.9","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.6.11","_defaultsLoaded":true,"dist":{"shasum":"419e3bccead3e8874d539f5b3e72a4c503b31a98","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-1.0.9.tgz"},"maintainers":[{"name":"felixge","email":"felix@debuggable.com"}]},"1.0.10":{"name":"formidable","version":"1.0.10","dependencies":{},"devDependencies":{"gently":"0.8.0","findit":"0.1.1","hashish":"0.0.4","urun":"0.0.4","utest":"0.0.3"},"directories":{"lib":"./lib"},"main":"./lib/index","scripts":{"test":"make test"},"engines":{"node":"*"},"optionalDependencies":{},"_npmUser":{"name":"felixge","email":"felix@debuggable.com"},"_id":"formidable@1.0.10","_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.6.18-pre","_defaultsLoaded":true,"dist":{"shasum":"96a2bcee5d9059aa0c60fc847ea506b998e7e5dc","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-1.0.10.tgz"},"maintainers":[{"name":"felixge","email":"felix@debuggable.com"}]},"1.0.11":{"name":"formidable","version":"1.0.11","dependencies":{},"devDependencies":{"gently":"0.8.0","findit":"0.1.1","hashish":"0.0.4","urun":"0.0.4","utest":"0.0.3"},"directories":{"lib":"./lib"},"main":"./lib/index","scripts":{"test":"make test"},"engines":{"node":"*"},"optionalDependencies":{},"_npmUser":{"name":"felixge","email":"felix@debuggable.com"},"_id":"formidable@1.0.11","_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.6.18-pre","_defaultsLoaded":true,"dist":{"shasum":"68f63325a035e644b6f7bb3d11243b9761de1b30","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-1.0.11.tgz"},"maintainers":[{"name":"felixge","email":"felix@debuggable.com"}]},"1.0.12":{"name":"formidable","description":"A node.js module for parsing form data, especially file uploads.","homepage":"https://github.com/felixge/node-formidable","version":"1.0.12","devDependencies":{"gently":"0.8.0","findit":"0.1.1","hashish":"0.0.4","urun":"~0.0.6","utest":"0.0.3","request":"~2.11.4"},"directories":{"lib":"./lib"},"main":"./lib/index","scripts":{"test":"node test/run.js","clean":"rm test/tmp/*"},"engines":{"node":">=0.8.0 <0.10.0"},"repository":{"type":"git","url":"git://github.com/felixge/node-formidable.git"},"bugs":{"url":"http://github.com/felixge/node-formidable/issues"},"optionalDependencies":{},"_id":"formidable@1.0.12","dependencies":{},"dist":{"shasum":"4fc17fea578db88e4cd45799e6dbbddf92f82a10","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-1.0.12.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"svnlto","email":"me@svenlito.com"},"maintainers":[{"name":"felixge","email":"felix@debuggable.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"superjoe","email":"superjoe30@gmail.com"}]},"1.0.13":{"name":"formidable","description":"A node.js module for parsing form data, especially file uploads.","homepage":"https://github.com/felixge/node-formidable","version":"1.0.13","devDependencies":{"gently":"0.8.0","findit":"0.1.1","hashish":"0.0.4","urun":"~0.0.6","utest":"0.0.3","request":"~2.11.4"},"directories":{"lib":"./lib"},"main":"./lib/index","scripts":{"test":"node test/run.js","clean":"rm test/tmp/*"},"engines":{"node":"<0.9.0"},"repository":{"type":"git","url":"git://github.com/felixge/node-formidable.git"},"bugs":{"url":"http://github.com/felixge/node-formidable/issues"},"optionalDependencies":{},"_id":"formidable@1.0.13","dependencies":{},"dist":{"shasum":"70caf0f9d69692a77e04021ddab4f46b01c82aea","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-1.0.13.tgz"},"_from":".","_npmVersion":"1.2.12","_npmUser":{"name":"svnlto","email":"me@svenlito.com"},"maintainers":[{"name":"felixge","email":"felix@debuggable.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"superjoe","email":"superjoe30@gmail.com"}]},"1.0.14":{"name":"formidable","description":"A node.js module for parsing form data, especially file uploads.","homepage":"https://github.com/felixge/node-formidable","version":"1.0.14","devDependencies":{"gently":"0.8.0","findit":"0.1.1","hashish":"0.0.4","urun":"~0.0.6","utest":"0.0.3","request":"~2.11.4"},"directories":{"lib":"./lib"},"main":"./lib/index","scripts":{"test":"node test/run.js","clean":"rm test/tmp/*"},"engines":{"node":">=0.8.0"},"repository":{"type":"git","url":"git://github.com/felixge/node-formidable.git"},"bugs":{"url":"http://github.com/felixge/node-formidable/issues"},"optionalDependencies":{},"_id":"formidable@1.0.14","dependencies":{},"dist":{"shasum":"2b3f4c411cbb5fdd695c44843e2a23514a43231a","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-1.0.14.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"tim-smart","email":"tim@fostle.com"},"maintainers":[{"name":"felixge","email":"felix@debuggable.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"superjoe","email":"superjoe30@gmail.com"},{"name":"tim-smart","email":"tim@fostle.com"}]},"1.0.15":{"name":"formidable","description":"A node.js module for parsing form data, especially file uploads.","homepage":"https://github.com/felixge/node-formidable","version":"1.0.15","devDependencies":{"gently":"0.8.0","findit":"0.1.1","hashish":"0.0.4","urun":"~0.0.6","utest":"0.0.3","request":"~2.11.4"},"directories":{"lib":"./lib"},"main":"./lib/index","scripts":{"test":"node test/run.js","clean":"rm test/tmp/*"},"engines":{"node":">=0.8.0"},"repository":{"type":"git","url":"git://github.com/felixge/node-formidable.git"},"bugs":{"url":"http://github.com/felixge/node-formidable/issues"},"optionalDependencies":{},"dependencies":{},"_id":"formidable@1.0.15","dist":{"shasum":"91363d59cc51ddca2be84ca0336ec0135606c155","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-1.0.15.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"felixge","email":"felix@debuggable.com"},"maintainers":[{"name":"felixge","email":"felix@debuggable.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"superjoe","email":"superjoe30@gmail.com"},{"name":"tim-smart","email":"tim@fostle.com"}]},"1.0.16":{"name":"formidable","description":"A node.js module for parsing form data, especially file uploads.","homepage":"https://github.com/felixge/node-formidable","version":"1.0.16","devDependencies":{"gently":"0.8.0","findit":"0.1.1","hashish":"0.0.4","urun":"~0.0.6","utest":"0.0.3","request":"~2.11.4"},"directories":{"lib":"./lib"},"main":"./lib/index","scripts":{"test":"node test/run.js","clean":"rm test/tmp/*"},"engines":{"node":">=0.8.0"},"repository":{"type":"git","url":"git://github.com/felixge/node-formidable.git"},"bugs":{"url":"http://github.com/felixge/node-formidable/issues"},"optionalDependencies":{},"dependencies":{},"_id":"formidable@1.0.16","dist":{"shasum":"4916cfdfc4cbed020b257a6a9505a9ab38c2cd0e","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-1.0.16.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"felixge","email":"felix@debuggable.com"},"maintainers":[{"name":"felixge","email":"felix@debuggable.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"superjoe","email":"superjoe30@gmail.com"},{"name":"tim-smart","email":"tim@fostle.com"}]},"1.0.17":{"name":"formidable","description":"A node.js module for parsing form data, especially file uploads.","homepage":"https://github.com/felixge/node-formidable","version":"1.0.17","devDependencies":{"gently":"0.8.0","findit":"0.1.1","hashish":"0.0.4","urun":"~0.0.6","utest":"0.0.3","request":"~2.11.4"},"directories":{"lib":"./lib"},"main":"./lib/index","scripts":{"test":"node test/run.js","clean":"rm test/tmp/*"},"engines":{"node":">=0.8.0"},"repository":{"type":"git","url":"git://github.com/felixge/node-formidable.git"},"bugs":{"url":"http://github.com/felixge/node-formidable/issues"},"optionalDependencies":{},"dependencies":{},"_id":"formidable@1.0.17","dist":{"shasum":"ef5491490f9433b705faa77249c99029ae348559","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-1.0.17.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"felixge","email":"felix@debuggable.com"},"maintainers":[{"name":"felixge","email":"felix@debuggable.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"superjoe","email":"superjoe30@gmail.com"},{"name":"tim-smart","email":"tim@fostle.com"}],"deprecated":"Old versions of Formidable are not compatible with the current Node.js; Upgrade to 1.2.0 or later"},"1.1.1":{"name":"formidable","description":"A node.js module for parsing form data, especially file uploads.","homepage":"https://github.com/felixge/node-formidable","license":"MIT","version":"1.1.1","devDependencies":{"gently":"^0.8.0","findit":"^0.1.2","hashish":"^0.0.4","urun":"^0.0.6","utest":"^0.0.8","request":"^2.11.4"},"directories":{"lib":"./lib"},"main":"./lib/index","scripts":{"test":"node test/run.js","clean":"rm test/tmp/*"},"engines":{"node":">=0.8.0"},"repository":{"type":"git","url":"git://github.com/felixge/node-formidable.git"},"bugs":{"url":"http://github.com/felixge/node-formidable/issues"},"optionalDependencies":{},"gitHead":"7a36a8e932044252fe648c81dbd8cf837d0178d0","dependencies":{},"_id":"formidable@1.1.1","_shasum":"96b8886f7c3c3508b932d6bd70c4d3a88f35f1a9","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.2.1","_npmUser":{"name":"kornel","email":"pornel@pornel.net"},"dist":{"shasum":"96b8886f7c3c3508b932d6bd70c4d3a88f35f1a9","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-1.1.1.tgz"},"maintainers":[{"name":"felixge","email":"felix@debuggable.com"},{"name":"kornel","email":"pornel@pornel.net"},{"name":"superjoe","email":"superjoe30@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"tim-smart","email":"tim@fostle.com"},{"name":"tunnckocore","email":"mameto_100@mail.bg"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/formidable-1.1.1.tgz_1484514649272_0.35996662196703255"}},"1.2.0":{"name":"formidable","description":"A node.js module for parsing form data, especially file uploads.","homepage":"https://github.com/felixge/node-formidable","license":"MIT","version":"1.2.0","devDependencies":{"gently":"^0.8.0","findit":"^0.1.2","hashish":"^0.0.4","urun":"^0.0.6","utest":"^0.0.8","request":"^2.11.4"},"directories":{"lib":"./lib"},"main":"./lib/index","scripts":{"test":"node test/run.js","clean":"rm test/tmp/*"},"repository":{"type":"git","url":"git://github.com/felixge/node-formidable.git"},"bugs":{"url":"http://github.com/felixge/node-formidable/issues"},"optionalDependencies":{},"gitHead":"02fe17120037a2c54b4af005a14dc93b4881c0bc","dependencies":{},"_id":"formidable@1.2.0","_npmVersion":"5.6.0","_nodeVersion":"9.6.1","_npmUser":{"name":"kornel","email":"pornel@pornel.net"},"dist":{"integrity":"sha512-hr9aT30rAi7kf8Q2aaTpSP7xGMhlJ+MdrUDVZs3rxbD3L/K46A86s2VY7qC2D2kGYGBtiT/3j6wTx1eeUq5xAQ==","shasum":"ce291bfec67c176e282f891ece2c37de0c83ae84","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-1.2.0.tgz","fileCount":13,"unpackedSize":143530},"maintainers":[{"name":"chalker","email":"chalkerx@gmail.com"},{"name":"felixge","email":"felix@debuggable.com"},{"name":"kornel","email":"pornel@pornel.net"},{"name":"olstenlarck","email":"mameto_100@mail.bg"},{"name":"superjoe","email":"superjoe30@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"tim-smart","email":"tim@fostle.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formidable_1.2.0_1520428291722_0.6406727940388302"},"_hasShrinkwrap":false},"1.2.1":{"name":"formidable","description":"A node.js module for parsing form data, especially file uploads.","homepage":"https://github.com/felixge/node-formidable","license":"MIT","version":"1.2.1","devDependencies":{"gently":"^0.8.0","findit":"^0.1.2","hashish":"^0.0.4","urun":"^0.0.6","utest":"^0.0.8","request":"^2.11.4"},"directories":{"lib":"./lib"},"main":"./lib/index","scripts":{"test":"node test/run.js","clean":"rm test/tmp/*"},"repository":{"type":"git","url":"git://github.com/felixge/node-formidable.git"},"bugs":{"url":"http://github.com/felixge/node-formidable/issues"},"optionalDependencies":{},"gitHead":"bd73dde95316d6d3bd1934ce5740aae867dd5af1","dependencies":{},"_id":"formidable@1.2.1","_npmVersion":"5.6.0","_nodeVersion":"9.6.1","_npmUser":{"name":"kornel","email":"pornel@pornel.net"},"dist":{"integrity":"sha512-Fs9VRguL0gqGHkXS5GQiMCr1VhZBxz0JnJs4JmMp/2jL18Fmbzvv7vOFRU+U8TBkHEE/CX1qDXzJplVULgsLeg==","shasum":"70fb7ca0290ee6ff961090415f4b3df3d2082659","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-1.2.1.tgz","fileCount":13,"unpackedSize":143711},"maintainers":[{"name":"chalker","email":"chalkerx@gmail.com"},{"name":"felixge","email":"felix@debuggable.com"},{"name":"kornel","email":"pornel@pornel.net"},{"name":"olstenlarck","email":"mameto_100@mail.bg"},{"name":"superjoe","email":"superjoe30@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"tim-smart","email":"tim@fostle.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formidable_1.2.1_1521559805623_0.44607140694001024"},"_hasShrinkwrap":false,"deprecated":"Please upgrade to the upcoming v2, currently (until end of February) install using formidable@canary!"},"2.0.0-canary.20200129.2":{"name":"formidable","version":"2.0.0-canary.20200129.2","license":"MIT","description":"A node.js module for parsing form data, especially file uploads.","homepage":"https://github.com/node-formidable/node-formidable","funding":"https://ko-fi.com/tunnckoCore/commissions","repository":{"type":"git","url":"git+https://github.com/node-formidable/node-formidable.git"},"main":"./src/index.js","publishConfig":{"access":"public","tag":"canary"},"scripts":{"cleanup":"rm -rf test/tmp","lint":"eslint . --cache --fix --quiet --format codeframe","pretest":"yarn run cleanup","test":"mkdir test/tmp && node test/run.js"},"devDependencies":{"@tunnckocore/prettier-config":"^1.2.0","eslint":"^6.8.0","eslint-config-airbnb-base":"^14.0.0","eslint-config-prettier":"^6.10.0","eslint-plugin-import":"^2.20.0","eslint-plugin-prettier":"^3.1.2","prettier":"^1.19.1","prettier-plugin-pkgjson":"^0.2.0","request":"^2.11.4","urun":"^0.0.6","utest":"^0.0.8"},"readme":"<p align=\"center\">\n  <img alt=\"node formidable logo\" src=\"./logo.png\" />\n</p>\n\n# formidable\n\n> A Node.js module for parsing form data, especially file uploads.\n\n[![Code style][codestyle-img]][codestyle-url]\n[![npm version][npmv-img]][npmv-url]\n[![build status][build-img]][build-url]\n[![chat on gitter][chat-img]][chat-url]\n[![MIT license][license-img]][license-url]\n\n## Status: Maintained\n\nThis module was initially developed by [**@felixge**](https://github.com/felixge) for [Transloadit](http://transloadit.com/), a service focused on uploading and encoding images and videos. It has been battle-tested against hundreds of GBs of file uploads from a large variety of clients and is considered production-ready and is used in production for years.\n\nCurrently, we are few maintainers trying to deal with it. :) More contributors are always welcome! :heart:\nJump on [issue #412](https://github.com/felixge/node-formidable/issues/412) if you are interested.\n\n_**Note:** Master is a \"development\" branch - try it with `npm i formidable@canary`.\nDo not expect (for now) things from it to be inside the`latest`\"dist-tag\" in the Npm.\nThe`formidable@latest`is the`v1.2.1` version and probably it will be the last`v1` release!_\n\n_**Note: v2 is coming soon!**_\n\n## Highlights\n\n- Fast (~900-2500 mb/sec), streaming multipart parser\n- Automatically writing file uploads to disk\n- Low memory footprint\n- Graceful error handling\n- Very high test coverage\n\n## Install\n\n```sh\nnpm install formidable\n# or the development version\nnpm install formidable@canary\n```\n\nor with Yarn v1/v2\n\n```sh\nyarn add formidable\n# or the development version\nyarn add formidable@canary\n```\n\nThis is a low-level package, and if you're using a high-level framework it may already be included.\n\nHowever, [Express v4](http://expressjs.com) does not include any multipart handling, nor does [body-parser](https://github.com/expressjs/body-parser).\n\nFor `koa` there is [koa-better-body](https://ghub.now.sh/koa-better-body)\nwhich can handle ANY type of body / form-data - JSON, urlencoded, multpart and so on.\nA new major release is coming there too.\n\n## Example\n\nParse an incoming file upload.\n\n```js\nconst http = require('http');\nconst util = require('util');\nconst formidable = require('formidable');\n\nhttp\n  .createServer((req, res) => {\n    if (req.url === '/upload' && req.method.toLowerCase() === 'post') {\n      // parse a file upload\n      const form = formidable();\n\n      form.parse(req, (err, fields, files) => {\n        res.writeHead(200, { 'content-type': 'text/plain' });\n        res.write('received upload:\\n\\n');\n        res.end(util.inspect({ fields: fields, files: files }));\n      });\n\n      return;\n    }\n\n    // show a file upload form\n    res.writeHead(200, { 'content-type': 'text/html' });\n    res.end(`\n      <form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">\n        <input type=\"text\" name=\"title\" /><br/>\n        <input type=\"file\" name=\"upload\" multiple=\"multiple\" /><br/>\n        <input type=\"submit\" value=\"Upload\" />\n      </form>\n    `);\n  })\n  .listen(8080, () => {\n    console.log('Server listening on http://localhost:8080/ ...');\n  });\n```\n\n## Benchmarks\n\nThe benchmark is quite old, from the old codebase. But maybe quite true though.\nPreviously the numbers was around ~500 mb/sec. Currently with moving to\nthe new Node.js Streams API it's faster. You can clearly see the differences\nbetween the Node versions.\n\n_Note: a lot better benchmarking could and should be done in future._\n\nBenchmarked on 8GB RAM, Xeon X3440 (2.53 GHz, 4 cores, 8 threads)\n\n```\n~/github/node-formidable master\n❯ nve --parallel 8 10 12 13 node benchmark/bench-multipart-parser.js\n\n ⬢  Node 8\n\n1261.08 mb/sec\n\n ⬢  Node 10\n\n1113.04 mb/sec\n\n ⬢  Node 12\n\n2107.00 mb/sec\n\n ⬢  Node 13\n\n2566.42 mb/sec\n```\n\n![benchmark January 29th, 2020](./benchmark/2020-01-29_xeon-x3440.png)\n\n## API\n\n### Formidable / IncomingForm\n\nAll shown are equivalent.\n\n_Please pass [`options`](#options) to the function/constructor,\nnot by passing assigning them to the instance `form`_\n\n```js\nconst formidable = require('formidable');\nconst form = formidable(options);\n\n// or\nconst { formidable } = require('formidable');\nconst form = formidable(options);\n\n// or\nconst { IncomingForm } = require('formidable');\nconst form = new IncomingForm(options);\n\n// or\nconst { Formidable } = require('formidable');\nconst form = new Formidable(options);\n```\n\n### Options\n\nSee it's defaults in [src/Formidable.js](./src/Formidable.js#L14-L22) (the `DEFAULT_OPTIONS` constant).\n\n- `options.encoding` **{string}** - default `'utf-8'`; sets encoding for incoming form fields,\n- `options.uploadDir` **{string}** - default `os.tmpdir()`; the directory for placing file uploads in. You can move them later by using `fs.rename()`\n- `options.keepExtensions` **{boolean}** - default `false`; to include the extensions of the original files or not\n- `options.maxFieldsSize` **{number}** - default `20 * 1024 * 1024` (20mb); limit the amount of memory all fields together (except files) can allocate in bytes.\n- `options.maxFieldsSize` **{number}** - default `200 * 1024 * 1024` (200mb); limit the size of uploaded file.\n- `options.maxFields` **{number}** - default `1000`; limit the number of fields that the Querystring parser will decode, set 0 for unlimited\n- `options.hash` **{boolean}** - default `false`; include checksums calculated for incoming files, set this to some hash algorithm, see [crypto.createHash](https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options) for available algorithms\n- `options.multiples` **{boolean}** - default `false`; when you call the `.parse` method, the `files` argument (of the callback) will contain arrays of files for inputs which submit multiple files using the HTML5 `multiple` attribute. Also, the `fields` argument will contain arrays of values for fields that have names ending with '[]'.\n\n_**Note:** If this value is exceeded, an `'error'` event is emitted._\n\n```js\n// The amount of bytes received for this form so far.\nform.bytesReceived;\n```\n\n```js\n// The expected number of bytes in this form.\nform.bytesExpected;\n```\n\n### .parse(request, callback)\n\nParses an incoming Node.js `request` containing form data. If `callback` is provided, all fields and files are collected and passed to the callback:\n\n```js\nconst formidable = require('formidable');\n\nconst form = formidable({ multiples: true, uploadDir: __dirname });\n\nform.parse(req, (err, fields, files) => {\n  console.log('fields:', fields);\n  console.log('files:', files);\n});\n```\n\nYou may overwrite this method if you are interested in directly accessing the multipart stream. Doing so will disable any `'field'` / `'file'` events processing which would occur otherwise, making you fully responsible for handling the processing.\n\n### form.onPart\n\nIf you want to use Formidable to only handle certain parts for you, you can do something similar.\nOr see [#387](https://github.com/node-formidable/node-formidable/issues/387) for inspiration,\nyou can for example validate the mime-type.\n\n```js\nconst form = formidable();\n\nform.onPart = (part) => {\n  part.on('data', (buffer) {\n    // do whatever you want here\n  });\n};\n```\n\nFor example, force Formidable to be used only on non-file \"parts\" (i.e., html fields)\n\n```js\nconst form = formidable();\n\nform.onPart = function(part) {\n  // let formidable handle only non-file parts\n  if (part.filename === '' || !part.mime) {\n    // used internally, please do not override!\n    form.handlePart(part);\n  }\n};\n```\n\n### File\n\n```ts\nexport interface File {\n  // The size of the uploaded file in bytes.\n  // If the file is still being uploaded (see `'fileBegin'` event),\n  // this property says how many bytes of the file have been written to disk yet.\n  file.size: number;\n\n  // The path this file is being written to. You can modify this in the `'fileBegin'` event in\n  // case you are unhappy with the way formidable generates a temporary path for your files.\n  file.path: string;\n\n  // The name this file had according to the uploading client.\n  file.name: string | null;\n\n  // The mime type of this file, according to the uploading client.\n  file.type: string | null;\n\n  // A Date object (or `null`) containing the time this file was last written to.\n  // Mostly here for compatibility with the [W3C File API Draft](http://dev.w3.org/2006/webapi/FileAPI/).\n  file.lastModifiedDate: Date | null;\n\n  // If hash calculation was set, you can read the hex digest out of this var.\n  file.hash: string | 'sha1' | 'md5' | 'sha256' | null;\n}\n```\n\n#### file.toJSON()\n\nThis method returns a JSON-representation of the file, allowing you to\n`JSON.stringify()` the file which is useful for logging and responding\nto requests.\n\n### Events\n\n#### `'progress'`\n\nEmitted after each incoming chunk of data that has been parsed. Can be used to roll your own progress bar.\n\n```js\nform.on('progress', (bytesReceived, bytesExpected) => {});\n```\n\n#### `'field'`\n\nEmitted whenever a field / value pair has been received.\n\n```js\nform.on('field', (name, value) => {});\n```\n\n#### `'fileBegin'`\n\nEmitted whenever a new file is detected in the upload stream. Use this event if\nyou want to stream the file to somewhere else while buffering the upload on\nthe file system.\n\n```js\nform.on('fileBegin', (name, file) => {});\n```\n\n#### `'file'`\n\nEmitted whenever a field / file pair has been received. `file` is an instance of `File`.\n\n```js\nform.on('file', (name, file) => {});\n```\n\n#### `'error'`\n\nEmitted when there is an error processing the incoming form. A request that experiences an error is automatically paused, you will have to manually call `request.resume()` if you want the request to continue firing `'data'` events.\n\n```js\nform.on('error', (err) => {});\n```\n\n#### `'aborted'`\n\nEmitted when the request was aborted by the user. Right now this can be due to a 'timeout' or 'close' event on the socket. After this event is emitted, an `error` event will follow. In the future there will be a separate 'timeout' event (needs a change in the node core).\n\n```js\nform.on('aborted', () => {});\n```\n\n#### `'end'`\n\nEmitted when the entire request has been received, and all contained files have finished flushing to disk. This is a great place for you to send your response.\n\n```js\nform.on('end', () => {});\n```\n\n## License\n\nFormidable is licensed under the [MIT License][license-url].\n\n## Ports\n\n- [multipart-parser](http://github.com/FooBarWidget/multipart-parser): a C++ parser based on formidable\n\n## Credits\n\n- [Ryan Dahl](http://twitter.com/ryah) for his work on [http-parser](http://github.com/ry/http-parser) which heavily inspired multipart_parser.js\n\n<!-- badges -->\n\n[codestyle-url]: https://github.com/airbnb/javascript\n[codestyle-img]: https://badgen.net/badge/code%20style/airbnb%20%2B%20prettier/ff5a5f?icon=airbnb&cache=300\n[build-img]: https://badgen.net/travis/node-formidable/node-formidable/master?label=build&icon=travis\n[build-url]: https://travis-ci.org/node-formidable/node-formidable.svg?branch=master\n[npmv-img]: https://badgen.net/npm/v/formidable?icon=npm\n[npmv-url]: https://npmjs.com/package/formidable\n[license-img]: https://badgen.net/npm/license/formidable\n[license-url]: https://github.com/node-formidable/node-formidable/blob/master/LICENSE\n[chat-img]: https://badgen.net/badge/chat/on%20gitter/46BC99?icon=gitter\n[chat-url]: https://gitter.im/node-formidable/Lobby\n","readmeFilename":"README.md","gitHead":"2a12a8b2eecd12386235f4543409bafb45daad0b","bugs":{"url":"https://github.com/node-formidable/node-formidable/issues"},"_id":"formidable@2.0.0-canary.20200129.2","_nodeVersion":"12.14.0","_npmVersion":"6.13.4","dist":{"integrity":"sha512-qv0BWu52bC2uyP2OXgYJUZktbNWaKHmqC74HrG1GNO+smachFOBdJ0Tqq1GJebTHbe2y9sz7CQxzL56MQ3sczQ==","shasum":"4063e14d4b7f904e1fb90bf9afc319478b8bf3e2","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-2.0.0-canary.20200129.2.tgz","fileCount":12,"unpackedSize":49909,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeMQYCCRA9TVsSAnZWagAAzOMP+gK/3GOdfMNFE1WRGvp1\nBrfwIX6dtnhxKy1lUZGs+LBwJ9pn/Te8YIGwcLZmXNpNDWyanPtSdVyn2vSq\nLtxYPcJzb8yg0apg8nwxo4uHLgIPcIsKHNYkMELiz+/qv+cDq5uXx67NJuqu\nZKQKyTgHR/BNzYJJAWkKl8yKk6DKywwWGMcIzbJpP4qzloYa6jGYJS7w0On5\n3VllM8fjvZ9xe91tNxGmUycc7KZ4wULZsF2wzFOjW8vKn/Xd9kF9GhgBLzfw\nniX1bgZ2LBtV8bijY60UVxUc0YhKCjdcRuXOrTrhsspwIMXtn6qZTXAJynmU\nAHjNlcxxhdiHYOAXk2WPhTN17o+3f+TC1neK/Pv8X2i0k27vi0/hgseiqVa3\nooVz07Mu6iwjUGm82DT5+bfUqUza9PxJNsY2mR3+DG57C3pn2yB7IsSGRkob\nqya7piCR/it2weOLo+KMigrQz+YOzpQusUMXKySFdT9DgUjENkXunOTwjY6M\n40JPpCyYXjCbhD1QjpSYmXy0ugMsU4kjq3PmNeP9oquFspC5yo99crI1rVUe\nHnsbXpHJP/tZkTCKbgwDbr9N+Ad4Ds28Xrq3Y3zlNFarSD1jQW/UAmt4bVWO\nV4cu39JEuTnRS7DeCiq1nA8KhKM6Eh7uIwAe+Cg+vLktbFGhn106Oz5y2D2p\nsnuQ\r\n=/mDE\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"chalkerx@gmail.com","name":"chalker"},{"email":"felix@debuggable.com","name":"felixge"},{"email":"npmspam@geekhood.net","name":"kornel"},{"email":"nathanael.dmc@outlook.fr","name":"quantumsheep"},{"email":"superjoe30@gmail.com","name":"superjoe"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"tim@fostle.com","name":"tim-smart"},{"email":"mameto2011@gmail.com","name":"tunnckocore"},{"email":"super.ludiq@gmail.com","name":"vanchoy"},{"email":"xargs@disroot.org","name":"xargs"}],"_npmUser":{"name":"tunnckocore","email":"opensource@tunnckocore.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formidable_2.0.0-canary.20200129.2_1580271106336_0.9408618621921363"},"_hasShrinkwrap":false},"2.0.0-canary.20200129.3":{"name":"formidable","version":"2.0.0-canary.20200129.3","license":"MIT","description":"A node.js module for parsing form data, especially file uploads.","homepage":"https://github.com/node-formidable/node-formidable","funding":"https://ko-fi.com/tunnckoCore/commissions","repository":{"type":"git","url":"git+https://github.com/node-formidable/node-formidable.git"},"main":"./src/index.js","publishConfig":{"access":"public","tag":"canary"},"scripts":{"cleanup":"rm -rf test/tmp","lint":"eslint . --cache --fix --quiet --format codeframe","pretest":"yarn run cleanup","test":"mkdir test/tmp && node test/run.js"},"devDependencies":{"@tunnckocore/prettier-config":"^1.2.0","eslint":"^6.8.0","eslint-config-airbnb-base":"^14.0.0","eslint-config-prettier":"^6.10.0","eslint-plugin-import":"^2.20.0","eslint-plugin-prettier":"^3.1.2","prettier":"^1.19.1","prettier-plugin-pkgjson":"^0.2.0","request":"^2.11.4","urun":"^0.0.6","utest":"^0.0.8"},"readme":"<p align=\"center\">\n  <img alt=\"node formidable logo\" src=\"./logo.png\" />\n</p>\n\n# formidable\n\n> A Node.js module for parsing form data, especially file uploads.\n\n[![Code style][codestyle-img]][codestyle-url]\n[![npm version][npmv-img]][npmv-url]\n[![build status][build-img]][build-url]\n[![chat on gitter][chat-img]][chat-url]\n[![MIT license][license-img]][license-url]\n\n## Status: Maintained\n\nThis module was initially developed by [**@felixge**](https://github.com/felixge) for [Transloadit](http://transloadit.com/), a service focused on uploading and encoding images and videos. It has been battle-tested against hundreds of GBs of file uploads from a large variety of clients and is considered production-ready and is used in production for years.\n\nCurrently, we are few maintainers trying to deal with it. :) More contributors are always welcome! :heart:\nJump on [issue #412](https://github.com/felixge/node-formidable/issues/412) if you are interested.\n\n_**Note:** Master is a \"development\" branch - try it with `npm i formidable@canary`.\nDo not expect (for now) things from it to be inside the`latest`\"dist-tag\" in the Npm.\nThe`formidable@latest`is the`v1.2.1` version and probably it will be the last`v1` release!_\n\n_**Note: v2 is coming soon!**_\n\n## Highlights\n\n- Fast (~900-2500 mb/sec), streaming multipart parser\n- Automatically writing file uploads to disk\n- Low memory footprint\n- Graceful error handling\n- Very high test coverage\n\n## Install\n\n```sh\nnpm install formidable\n# or the development version\nnpm install formidable@canary\n```\n\nor with Yarn v1/v2\n\n```sh\nyarn add formidable\n# or the development version\nyarn add formidable@canary\n```\n\nThis is a low-level package, and if you're using a high-level framework it may already be included.\n\nHowever, [Express v4](http://expressjs.com) does not include any multipart handling, nor does [body-parser](https://github.com/expressjs/body-parser).\n\nFor `koa` there is [koa-better-body](https://ghub.now.sh/koa-better-body)\nwhich can handle ANY type of body / form-data - JSON, urlencoded, multpart and so on.\nA new major release is coming there too.\n\n## Example\n\nParse an incoming file upload.\n\n```js\nconst http = require('http');\nconst util = require('util');\nconst formidable = require('formidable');\n\nhttp\n  .createServer((req, res) => {\n    if (req.url === '/upload' && req.method.toLowerCase() === 'post') {\n      // parse a file upload\n      const form = formidable();\n\n      form.parse(req, (err, fields, files) => {\n        res.writeHead(200, { 'content-type': 'text/plain' });\n        res.write('received upload:\\n\\n');\n        res.end(util.inspect({ fields: fields, files: files }));\n      });\n\n      return;\n    }\n\n    // show a file upload form\n    res.writeHead(200, { 'content-type': 'text/html' });\n    res.end(`\n      <form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">\n        <input type=\"text\" name=\"title\" /><br/>\n        <input type=\"file\" name=\"upload\" multiple=\"multiple\" /><br/>\n        <input type=\"submit\" value=\"Upload\" />\n      </form>\n    `);\n  })\n  .listen(8080, () => {\n    console.log('Server listening on http://localhost:8080/ ...');\n  });\n```\n\n## Benchmarks\n\nThe benchmark is quite old, from the old codebase. But maybe quite true though.\nPreviously the numbers was around ~500 mb/sec. Currently with moving to\nthe new Node.js Streams API it's faster. You can clearly see the differences\nbetween the Node versions.\n\n_Note: a lot better benchmarking could and should be done in future._\n\nBenchmarked on 8GB RAM, Xeon X3440 (2.53 GHz, 4 cores, 8 threads)\n\n```\n~/github/node-formidable master\n❯ nve --parallel 8 10 12 13 node benchmark/bench-multipart-parser.js\n\n ⬢  Node 8\n\n1261.08 mb/sec\n\n ⬢  Node 10\n\n1113.04 mb/sec\n\n ⬢  Node 12\n\n2107.00 mb/sec\n\n ⬢  Node 13\n\n2566.42 mb/sec\n```\n\n![benchmark January 29th, 2020](./benchmark/2020-01-29_xeon-x3440.png)\n\n## API\n\n### Formidable / IncomingForm\n\nAll shown are equivalent.\n\n_Please pass [`options`](#options) to the function/constructor,\nnot by passing assigning them to the instance `form`_\n\n```js\nconst formidable = require('formidable');\nconst form = formidable(options);\n\n// or\nconst { formidable } = require('formidable');\nconst form = formidable(options);\n\n// or\nconst { IncomingForm } = require('formidable');\nconst form = new IncomingForm(options);\n\n// or\nconst { Formidable } = require('formidable');\nconst form = new Formidable(options);\n```\n\n### Options\n\nSee it's defaults in [src/Formidable.js](./src/Formidable.js#L14-L22) (the `DEFAULT_OPTIONS` constant).\n\n- `options.encoding` **{string}** - default `'utf-8'`; sets encoding for incoming form fields,\n- `options.uploadDir` **{string}** - default `os.tmpdir()`; the directory for placing file uploads in. You can move them later by using `fs.rename()`\n- `options.keepExtensions` **{boolean}** - default `false`; to include the extensions of the original files or not\n- `options.maxFieldsSize` **{number}** - default `20 * 1024 * 1024` (20mb); limit the amount of memory all fields together (except files) can allocate in bytes.\n- `options.maxFieldsSize` **{number}** - default `200 * 1024 * 1024` (200mb); limit the size of uploaded file.\n- `options.maxFields` **{number}** - default `1000`; limit the number of fields that the Querystring parser will decode, set 0 for unlimited\n- `options.hash` **{boolean}** - default `false`; include checksums calculated for incoming files, set this to some hash algorithm, see [crypto.createHash](https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options) for available algorithms\n- `options.multiples` **{boolean}** - default `false`; when you call the `.parse` method, the `files` argument (of the callback) will contain arrays of files for inputs which submit multiple files using the HTML5 `multiple` attribute. Also, the `fields` argument will contain arrays of values for fields that have names ending with '[]'.\n\n_**Note:** If this value is exceeded, an `'error'` event is emitted._\n\n```js\n// The amount of bytes received for this form so far.\nform.bytesReceived;\n```\n\n```js\n// The expected number of bytes in this form.\nform.bytesExpected;\n```\n\n### .parse(request, callback)\n\nParses an incoming Node.js `request` containing form data.\nIf `callback` is provided, all fields and files are collected and passed to the callback.\n\n```js\nconst formidable = require('formidable');\n\nconst form = formidable({ multiples: true, uploadDir: __dirname });\n\nform.parse(req, (err, fields, files) => {\n  console.log('fields:', fields);\n  console.log('files:', files);\n});\n```\n\nYou may overwrite this method if you are interested in directly accessing the multipart stream. Doing so will disable any `'field'` / `'file'` events processing which would occur otherwise, making you fully responsible for handling the processing.\n\nIn the example below, we listen on couple of events and direct them to the `data` listener,\nso you can do whatever you choose there, based on whether its before the file been emitted,\nthe header value, the header name, on field, on file and etc.\n\nOr the other way could be to just override the `form.onPart` as it's shown a bit later.\n\n```js\nform.once('error', console.error);\n\nform.on('fileBegin', (filename, file) => {\n  form.emit('data', { name: 'fileBegin', filename, value: file });\n});\n\nform.on('file', (filename, file) => {\n  form.emit('data', { name: 'file', key: filename, value: file });\n});\n\nform.on('field', (fieldName, fieldValue) => {\n  form.emit('data', { name: 'field', key: fieldName, value: fieldValue });\n});\n\nform.once('end', () => {\n  console.log('Done!');\n});\n\n// If you want to customize whatever you want...\nform.on('data', ({ name, key, value, buffer, start, end, ...more }) => {\n  if (name === 'partBegin') {\n  }\n  if (name === 'partData') {\n  }\n  if (name === 'headerField') {\n  }\n  if (name === 'headerValue') {\n  }\n  if (name === 'headerEnd') {\n  }\n  if (name === 'headersEnd') {\n  }\n  if (name === 'field') {\n    console.log('field name:', key);\n    console.log('field value:', value);\n  }\n  if (name === 'file') {\n    console.log('file:', key, value);\n  }\n  if (name === 'fileBegin') {\n    console.log('fileBegin:', key, value);\n  }\n});\n```\n\n### form.onPart\n\nIf you want to use Formidable to only handle certain parts for you, you can do something similar.\nOr see [#387](https://github.com/node-formidable/node-formidable/issues/387) for inspiration,\nyou can for example validate the mime-type.\n\n```js\nconst form = formidable();\n\nform.onPart = (part) => {\n  part.on('data', (buffer) {\n    // do whatever you want here\n  });\n};\n```\n\nFor example, force Formidable to be used only on non-file \"parts\" (i.e., html fields)\n\n```js\nconst form = formidable();\n\nform.onPart = function(part) {\n  // let formidable handle only non-file parts\n  if (part.filename === '' || !part.mime) {\n    // used internally, please do not override!\n    form.handlePart(part);\n  }\n};\n```\n\n### File\n\n```ts\nexport interface File {\n  // The size of the uploaded file in bytes.\n  // If the file is still being uploaded (see `'fileBegin'` event),\n  // this property says how many bytes of the file have been written to disk yet.\n  file.size: number;\n\n  // The path this file is being written to. You can modify this in the `'fileBegin'` event in\n  // case you are unhappy with the way formidable generates a temporary path for your files.\n  file.path: string;\n\n  // The name this file had according to the uploading client.\n  file.name: string | null;\n\n  // The mime type of this file, according to the uploading client.\n  file.type: string | null;\n\n  // A Date object (or `null`) containing the time this file was last written to.\n  // Mostly here for compatibility with the [W3C File API Draft](http://dev.w3.org/2006/webapi/FileAPI/).\n  file.lastModifiedDate: Date | null;\n\n  // If `options.hash` calculation was set, you can read the hex digest out of this var.\n  file.hash: string | 'sha1' | 'md5' | 'sha256' | null;\n}\n```\n\n#### file.toJSON()\n\nThis method returns a JSON-representation of the file, allowing you to\n`JSON.stringify()` the file which is useful for logging and responding\nto requests.\n\n### Events\n\n#### `'progress'`\n\nEmitted after each incoming chunk of data that has been parsed. Can be used to roll your own progress bar.\n\n```js\nform.on('progress', (bytesReceived, bytesExpected) => {});\n```\n\n#### `'field'`\n\nEmitted whenever a field / value pair has been received.\n\n```js\nform.on('field', (name, value) => {});\n```\n\n#### `'fileBegin'`\n\nEmitted whenever a new file is detected in the upload stream. Use this event if\nyou want to stream the file to somewhere else while buffering the upload on\nthe file system.\n\n```js\nform.on('fileBegin', (name, file) => {});\n```\n\n#### `'file'`\n\nEmitted whenever a field / file pair has been received. `file` is an instance of `File`.\n\n```js\nform.on('file', (name, file) => {});\n```\n\n#### `'error'`\n\nEmitted when there is an error processing the incoming form. A request that experiences an error is automatically paused, you will have to manually call `request.resume()` if you want the request to continue firing `'data'` events.\n\n```js\nform.on('error', (err) => {});\n```\n\n#### `'aborted'`\n\nEmitted when the request was aborted by the user. Right now this can be due to a 'timeout' or 'close' event on the socket. After this event is emitted, an `error` event will follow. In the future there will be a separate 'timeout' event (needs a change in the node core).\n\n```js\nform.on('aborted', () => {});\n```\n\n#### `'end'`\n\nEmitted when the entire request has been received, and all contained files have finished flushing to disk. This is a great place for you to send your response.\n\n```js\nform.on('end', () => {});\n```\n\n## License\n\nFormidable is licensed under the [MIT License][license-url].\n\n## Ports\n\n- [multipart-parser](http://github.com/FooBarWidget/multipart-parser): a C++ parser based on formidable\n\n## Credits\n\n- [Ryan Dahl](http://twitter.com/ryah) for his work on [http-parser](http://github.com/ry/http-parser) which heavily inspired multipart_parser.js\n\n<!-- badges -->\n\n[codestyle-url]: https://github.com/airbnb/javascript\n[codestyle-img]: https://badgen.net/badge/code%20style/airbnb%20%2B%20prettier/ff5a5f?icon=airbnb&cache=300\n[build-img]: https://badgen.net/travis/node-formidable/node-formidable/master?label=build&icon=travis\n[build-url]: https://travis-ci.org/node-formidable/node-formidable.svg?branch=master\n[npmv-img]: https://badgen.net/npm/v/formidable?icon=npm\n[npmv-url]: https://npmjs.com/package/formidable\n[license-img]: https://badgen.net/npm/license/formidable\n[license-url]: https://github.com/node-formidable/node-formidable/blob/master/LICENSE\n[chat-img]: https://badgen.net/badge/chat/on%20gitter/46BC99?icon=gitter\n[chat-url]: https://gitter.im/node-formidable/Lobby\n","readmeFilename":"README.md","gitHead":"26b764086a9b756247597e1a9189ce7ec0e7156d","bugs":{"url":"https://github.com/node-formidable/node-formidable/issues"},"_id":"formidable@2.0.0-canary.20200129.3","_nodeVersion":"12.14.0","_npmVersion":"6.13.4","dist":{"integrity":"sha512-AK40O/TRSzj+hFABivCYRVBlPq7S6+dzJbOljWA1c+mJEdtEcqPWnjUIeAQJwqC5p46jTjSJi4GnMV4ceJ9saA==","shasum":"ee7722dde69733e45ce909b74e02c85ad2b4bf04","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-2.0.0-canary.20200129.3.tgz","fileCount":12,"unpackedSize":51292,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeMQ1WCRA9TVsSAnZWagAAlmcQAJR78H1Ryqy1pk8v0rpi\nCBHKfeZUm1NF2Ojkb6NZy84K0BF1z5Alx2Pwty3I3sD96wyic3ZTBLnJQmZl\nsY5Bgxk8LrJVsIJp7J5m1qCGc/5yBXjDp+5EZqaj84i5KIsZo/h3LFs1udZ9\ngAcND8ryDXVNFvxzBR3+tf13o0enuuw7+Y2A4qU7SEWYk3ItTaRUSnK/5Wii\nyrbqaag5simUnLn1xcMNoV62goj8n16mwTpHbvsVEQfbzNHWzcE4DfLfGV8R\nSsk3JKIEgfzDgI79wYSZyoN4Dk0tHOamyMMNAPFjkUASn0x4/EIlXlRBzA0P\n2UbUQu4jYOaP8fHgGZSkvLXkNTDdD9fLPCrPjj0Ea3CBe7pP6FwciOJDpp9e\n3nbAS0LbLuOVyF66YiYc7w8drL627hpEGKtVPtawvclMIZtmiU5WjCg7oJAV\nyb+FIe9MgAtxjt1Ct/PSTu4CvBVBAfE/3+oQL1HsB/RFYij0adUCbiT2DoIj\n1SCJOuqOO2tX9vlxqDnSyeg7EbNv08OjsT8WrqD6nj4z5h8+LMAA1MMFisBh\nCII62lNLW+KyK2WsIxdLi6yyd483NMxW6dlIoRml+sTcA4OvS4ziRjDcL4It\nurPtSVTjpkBpTOPw+uyeFfdzjJ+7ycbKsAJIRiAq3GYWc1b0LtwEG62qx9eS\ngzyU\r\n=Wy7I\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"chalkerx@gmail.com","name":"chalker"},{"email":"felix@debuggable.com","name":"felixge"},{"email":"npmspam@geekhood.net","name":"kornel"},{"email":"nathanael.dmc@outlook.fr","name":"quantumsheep"},{"email":"superjoe30@gmail.com","name":"superjoe"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"tim@fostle.com","name":"tim-smart"},{"email":"mameto2011@gmail.com","name":"tunnckocore"},{"email":"super.ludiq@gmail.com","name":"vanchoy"},{"email":"xargs@disroot.org","name":"xargs"}],"_npmUser":{"name":"tunnckocore","email":"opensource@tunnckocore.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formidable_2.0.0-canary.20200129.3_1580272981767_0.6598663981597537"},"_hasShrinkwrap":false},"2.0.0-canary.20200129.4":{"name":"formidable","version":"2.0.0-canary.20200129.4","license":"MIT","description":"A node.js module for parsing form data, especially file uploads.","homepage":"https://github.com/node-formidable/node-formidable","funding":"https://ko-fi.com/tunnckoCore/commissions","repository":{"type":"git","url":"git+https://github.com/node-formidable/node-formidable.git"},"main":"./src/index.js","publishConfig":{"access":"public","tag":"canary"},"scripts":{"cleanup":"rm -rf test/tmp","lint":"eslint . --cache --fix --quiet --format codeframe","pretest":"yarn run cleanup","test":"mkdir test/tmp && node test/run.js"},"devDependencies":{"@tunnckocore/prettier-config":"^1.2.0","eslint":"^6.8.0","eslint-config-airbnb-base":"^14.0.0","eslint-config-prettier":"^6.10.0","eslint-plugin-import":"^2.20.0","eslint-plugin-prettier":"^3.1.2","prettier":"^1.19.1","prettier-plugin-pkgjson":"^0.2.0","request":"^2.11.4","urun":"^0.0.6","utest":"^0.0.8"},"readme":"<p align=\"center\">\n  <img alt=\"node formidable logo\" src=\"./logo.png\" />\n</p>\n\n# formidable\n\n> A Node.js module for parsing form data, especially file uploads.\n\n[![Code style][codestyle-img]][codestyle-url]\n[![npm version][npmv-img]][npmv-url]\n[![build status][build-img]][build-url]\n[![chat on gitter][chat-img]][chat-url]\n[![MIT license][license-img]][license-url]\n\n## Status: Maintained\n\nThis module was initially developed by [**@felixge**](https://github.com/felixge) for [Transloadit](http://transloadit.com/), a service focused on uploading and encoding images and videos. It has been battle-tested against hundreds of GBs of file uploads from a large variety of clients and is considered production-ready and is used in production for years.\n\nCurrently, we are few maintainers trying to deal with it. :) More contributors are always welcome! :heart:\nJump on [issue #412](https://github.com/felixge/node-formidable/issues/412) if you are interested.\n\n_**Note:** Master is a \"development\" branch - try it with `npm i formidable@canary`.\nDo not expect (for now) things from it to be inside the`latest`\"dist-tag\" in the Npm.\nThe`formidable@latest`is the`v1.2.1` version and probably it will be the last`v1` release!_\n\n_**Note: v2 is coming soon!**_\n\n## Highlights\n\n- Fast (~900-2500 mb/sec), streaming multipart parser\n- Automatically writing file uploads to disk\n- Low memory footprint\n- Graceful error handling\n- Very high test coverage\n\n## Install\n\n```sh\nnpm install formidable\n# or the development version\nnpm install formidable@canary\n```\n\nor with Yarn v1/v2\n\n```sh\nyarn add formidable\n# or the development version\nyarn add formidable@canary\n```\n\nThis is a low-level package, and if you're using a high-level framework it may already be included.\n\nHowever, [Express v4](http://expressjs.com) does not include any multipart handling, nor does [body-parser](https://github.com/expressjs/body-parser).\n\nFor `koa` there is [koa-better-body](https://ghub.now.sh/koa-better-body)\nwhich can handle ANY type of body / form-data - JSON, urlencoded, multpart and so on.\nA new major release is coming there too.\n\n## Example\n\nParse an incoming file upload.\n\n```js\nconst http = require('http');\nconst util = require('util');\nconst formidable = require('formidable');\n\nhttp\n  .createServer((req, res) => {\n    if (req.url === '/upload' && req.method.toLowerCase() === 'post') {\n      // parse a file upload\n      const form = formidable();\n\n      form.parse(req, (err, fields, files) => {\n        res.writeHead(200, { 'content-type': 'text/plain' });\n        res.write('received upload:\\n\\n');\n        res.end(util.inspect({ fields: fields, files: files }));\n      });\n\n      return;\n    }\n\n    // show a file upload form\n    res.writeHead(200, { 'content-type': 'text/html' });\n    res.end(`\n      <form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">\n        <input type=\"text\" name=\"title\" /><br/>\n        <input type=\"file\" name=\"upload\" multiple=\"multiple\" /><br/>\n        <input type=\"submit\" value=\"Upload\" />\n      </form>\n    `);\n  })\n  .listen(8080, () => {\n    console.log('Server listening on http://localhost:8080/ ...');\n  });\n```\n\n## Benchmarks\n\nThe benchmark is quite old, from the old codebase. But maybe quite true though.\nPreviously the numbers was around ~500 mb/sec. Currently with moving to\nthe new Node.js Streams API it's faster. You can clearly see the differences\nbetween the Node versions.\n\n_Note: a lot better benchmarking could and should be done in future._\n\nBenchmarked on 8GB RAM, Xeon X3440 (2.53 GHz, 4 cores, 8 threads)\n\n```\n~/github/node-formidable master\n❯ nve --parallel 8 10 12 13 node benchmark/bench-multipart-parser.js\n\n ⬢  Node 8\n\n1261.08 mb/sec\n\n ⬢  Node 10\n\n1113.04 mb/sec\n\n ⬢  Node 12\n\n2107.00 mb/sec\n\n ⬢  Node 13\n\n2566.42 mb/sec\n```\n\n![benchmark January 29th, 2020](./benchmark/2020-01-29_xeon-x3440.png)\n\n## API\n\n### Formidable / IncomingForm\n\nAll shown are equivalent.\n\n_Please pass [`options`](#options) to the function/constructor,\nnot by passing assigning them to the instance `form`_\n\n```js\nconst formidable = require('formidable');\nconst form = formidable(options);\n\n// or\nconst { formidable } = require('formidable');\nconst form = formidable(options);\n\n// or\nconst { IncomingForm } = require('formidable');\nconst form = new IncomingForm(options);\n\n// or\nconst { Formidable } = require('formidable');\nconst form = new Formidable(options);\n```\n\n### Options\n\nSee it's defaults in [src/Formidable.js](./src/Formidable.js#L14-L22) (the `DEFAULT_OPTIONS` constant).\n\n- `options.encoding` **{string}** - default `'utf-8'`; sets encoding for incoming form fields,\n- `options.uploadDir` **{string}** - default `os.tmpdir()`; the directory for placing file uploads in. You can move them later by using `fs.rename()`\n- `options.keepExtensions` **{boolean}** - default `false`; to include the extensions of the original files or not\n- `options.maxFieldsSize` **{number}** - default `20 * 1024 * 1024` (20mb); limit the amount of memory all fields together (except files) can allocate in bytes.\n- `options.maxFieldsSize` **{number}** - default `200 * 1024 * 1024` (200mb); limit the size of uploaded file.\n- `options.maxFields` **{number}** - default `1000`; limit the number of fields that the Querystring parser will decode, set 0 for unlimited\n- `options.hash` **{boolean}** - default `false`; include checksums calculated for incoming files, set this to some hash algorithm, see [crypto.createHash](https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options) for available algorithms\n- `options.multiples` **{boolean}** - default `false`; when you call the `.parse` method, the `files` argument (of the callback) will contain arrays of files for inputs which submit multiple files using the HTML5 `multiple` attribute. Also, the `fields` argument will contain arrays of values for fields that have names ending with '[]'.\n\n_**Note:** If this value is exceeded, an `'error'` event is emitted._\n\n```js\n// The amount of bytes received for this form so far.\nform.bytesReceived;\n```\n\n```js\n// The expected number of bytes in this form.\nform.bytesExpected;\n```\n\n### .parse(request, callback)\n\nParses an incoming Node.js `request` containing form data.\nIf `callback` is provided, all fields and files are collected and passed to the callback.\n\n```js\nconst formidable = require('formidable');\n\nconst form = formidable({ multiples: true, uploadDir: __dirname });\n\nform.parse(req, (err, fields, files) => {\n  console.log('fields:', fields);\n  console.log('files:', files);\n});\n```\n\nYou may overwrite this method if you are interested in directly accessing the multipart stream. Doing so will disable any `'field'` / `'file'` events processing which would occur otherwise, making you fully responsible for handling the processing.\n\nIn the example below, we listen on couple of events and direct them to the `data` listener,\nso you can do whatever you choose there, based on whether its before the file been emitted,\nthe header value, the header name, on field, on file and etc.\n\nOr the other way could be to just override the `form.onPart` as it's shown a bit later.\n\n```js\nform.once('error', console.error);\n\nform.on('fileBegin', (filename, file) => {\n  form.emit('data', { name: 'fileBegin', filename, value: file });\n});\n\nform.on('file', (filename, file) => {\n  form.emit('data', { name: 'file', key: filename, value: file });\n});\n\nform.on('field', (fieldName, fieldValue) => {\n  form.emit('data', { name: 'field', key: fieldName, value: fieldValue });\n});\n\nform.once('end', () => {\n  console.log('Done!');\n});\n\n// If you want to customize whatever you want...\nform.on('data', ({ name, key, value, buffer, start, end, ...more }) => {\n  if (name === 'partBegin') {\n  }\n  if (name === 'partData') {\n  }\n  if (name === 'headerField') {\n  }\n  if (name === 'headerValue') {\n  }\n  if (name === 'headerEnd') {\n  }\n  if (name === 'headersEnd') {\n  }\n  if (name === 'field') {\n    console.log('field name:', key);\n    console.log('field value:', value);\n  }\n  if (name === 'file') {\n    console.log('file:', key, value);\n  }\n  if (name === 'fileBegin') {\n    console.log('fileBegin:', key, value);\n  }\n});\n```\n\n### form.onPart\n\nIf you want to use Formidable to only handle certain parts for you, you can do something similar.\nOr see [#387](https://github.com/node-formidable/node-formidable/issues/387) for inspiration,\nyou can for example validate the mime-type.\n\n```js\nconst form = formidable();\n\nform.onPart = (part) => {\n  part.on('data', (buffer) {\n    // do whatever you want here\n  });\n};\n```\n\nFor example, force Formidable to be used only on non-file \"parts\" (i.e., html fields)\n\n```js\nconst form = formidable();\n\nform.onPart = function(part) {\n  // let formidable handle only non-file parts\n  if (part.filename === '' || !part.mime) {\n    // used internally, please do not override!\n    form.handlePart(part);\n  }\n};\n```\n\n### File\n\n```ts\nexport interface File {\n  // The size of the uploaded file in bytes.\n  // If the file is still being uploaded (see `'fileBegin'` event),\n  // this property says how many bytes of the file have been written to disk yet.\n  file.size: number;\n\n  // The path this file is being written to. You can modify this in the `'fileBegin'` event in\n  // case you are unhappy with the way formidable generates a temporary path for your files.\n  file.path: string;\n\n  // The name this file had according to the uploading client.\n  file.name: string | null;\n\n  // The mime type of this file, according to the uploading client.\n  file.type: string | null;\n\n  // A Date object (or `null`) containing the time this file was last written to.\n  // Mostly here for compatibility with the [W3C File API Draft](http://dev.w3.org/2006/webapi/FileAPI/).\n  file.lastModifiedDate: Date | null;\n\n  // If `options.hash` calculation was set, you can read the hex digest out of this var.\n  file.hash: string | 'sha1' | 'md5' | 'sha256' | null;\n}\n```\n\n#### file.toJSON()\n\nThis method returns a JSON-representation of the file, allowing you to\n`JSON.stringify()` the file which is useful for logging and responding\nto requests.\n\n### Events\n\n#### `'progress'`\n\nEmitted after each incoming chunk of data that has been parsed. Can be used to roll your own progress bar.\n\n```js\nform.on('progress', (bytesReceived, bytesExpected) => {});\n```\n\n#### `'field'`\n\nEmitted whenever a field / value pair has been received.\n\n```js\nform.on('field', (name, value) => {});\n```\n\n#### `'fileBegin'`\n\nEmitted whenever a new file is detected in the upload stream. Use this event if\nyou want to stream the file to somewhere else while buffering the upload on\nthe file system.\n\n```js\nform.on('fileBegin', (name, file) => {});\n```\n\n#### `'file'`\n\nEmitted whenever a field / file pair has been received. `file` is an instance of `File`.\n\n```js\nform.on('file', (name, file) => {});\n```\n\n#### `'error'`\n\nEmitted when there is an error processing the incoming form. A request that experiences an error is automatically paused, you will have to manually call `request.resume()` if you want the request to continue firing `'data'` events.\n\n```js\nform.on('error', (err) => {});\n```\n\n#### `'aborted'`\n\nEmitted when the request was aborted by the user. Right now this can be due to a 'timeout' or 'close' event on the socket. After this event is emitted, an `error` event will follow. In the future there will be a separate 'timeout' event (needs a change in the node core).\n\n```js\nform.on('aborted', () => {});\n```\n\n#### `'end'`\n\nEmitted when the entire request has been received, and all contained files have finished flushing to disk. This is a great place for you to send your response.\n\n```js\nform.on('end', () => {});\n```\n\n## License\n\nFormidable is licensed under the [MIT License][license-url].\n\n## Ports\n\n- [multipart-parser](http://github.com/FooBarWidget/multipart-parser): a C++ parser based on formidable\n\n## Credits\n\n- [Ryan Dahl](http://twitter.com/ryah) for his work on [http-parser](http://github.com/ry/http-parser) which heavily inspired multipart_parser.js\n\n<!-- badges -->\n\n[codestyle-url]: https://github.com/airbnb/javascript\n[codestyle-img]: https://badgen.net/badge/code%20style/airbnb%20%2B%20prettier/ff5a5f?icon=airbnb&cache=300\n[build-img]: https://badgen.net/travis/node-formidable/node-formidable/master?label=build&icon=travis\n[build-url]: https://travis-ci.org/node-formidable/node-formidable.svg?branch=master\n[npmv-img]: https://badgen.net/npm/v/formidable?icon=npm\n[npmv-url]: https://npmjs.com/package/formidable\n[license-img]: https://badgen.net/npm/license/formidable\n[license-url]: https://github.com/node-formidable/node-formidable/blob/master/LICENSE\n[chat-img]: https://badgen.net/badge/chat/on%20gitter/46BC99?icon=gitter\n[chat-url]: https://gitter.im/node-formidable/Lobby\n","readmeFilename":"README.md","gitHead":"8ea22e020b3ede2184c417de8592d052e288384c","bugs":{"url":"https://github.com/node-formidable/node-formidable/issues"},"_id":"formidable@2.0.0-canary.20200129.4","_nodeVersion":"12.14.0","_npmVersion":"6.13.4","dist":{"integrity":"sha512-9QIPQc48W8+PGg9r/1YxkXjKYpSXMC72LHwl8HEQGIVn7jxKi/n1cPI+DYJTn6ZUp/fTCc98wbLF0WMYk1GUXg==","shasum":"2099fcdba9347002275bd87c0e6e00e8a959a860","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-2.0.0-canary.20200129.4.tgz","fileCount":12,"unpackedSize":51325,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeMQ/TCRA9TVsSAnZWagAA3RsP/0uTnzMmARFeQX5W7BPv\nfhUoilwdNhtgrJIetKCXArnA/ZxrtjZREXxhuIm5nlXeLlywnOGghTXwKf1W\n7/dp7+a+yscASOeR3zImSvrWSn1mFgGLzYsbl0ItC4a8ulW9E+7QlwS/JS6Y\nuXBNgynunx9YazH+0xlCJO97XwNBwIMJL+SciAcu3Y7TJ2XtQIvAvoi8tBIs\nNfI2WZZzJ0/3RVyXIP6i5RVuzVu4Jm8HGfbqBbIzfG9FgLiId/d6ZBiBMuOs\nQ89lLD3YHPLDVY6crVOMzKODQdVi17rVx9b00IQ9xTTOkPwKSAAbZJdtc7/A\nyMz1dN7RQji5I1IuifE87fwsKjsBDiq+cJrESSj1QDSAyvVnrRpL+mWERuV5\ndrbsiyBBLD+w59Z4JYCsXSgbnsssoTA5lADiBH718ApYLBrRY1DKT9v2t2fS\nJcnZEpytu0Ywyhw2khhsqG4TRbQN5YWhGXCVjrftqe2EA5a2T3GyDTc08Acb\npfyDqP+ImrHrCm7JtNkPUdz73T1pnS1cXoE7LNAK2vWBH5HMSkZnCJxUOBYR\n7XYFzpTeaucHHT7Y3/PAkKAZQpk/+6ZyLTCvVh/wi2V28FX/2fFXy36CBzVd\nsSIj8t0p0RfvexcDSBV4n/+OXfE4UYTOU9GKuNtPE9ngtbIrJ7jWicweKpMy\n4eVC\r\n=+ejB\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"chalkerx@gmail.com","name":"chalker"},{"email":"felix@debuggable.com","name":"felixge"},{"email":"npmspam@geekhood.net","name":"kornel"},{"email":"nathanael.dmc@outlook.fr","name":"quantumsheep"},{"email":"superjoe30@gmail.com","name":"superjoe"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"tim@fostle.com","name":"tim-smart"},{"email":"mameto2011@gmail.com","name":"tunnckocore"},{"email":"super.ludiq@gmail.com","name":"vanchoy"},{"email":"xargs@disroot.org","name":"xargs"}],"_npmUser":{"name":"tunnckocore","email":"opensource@tunnckocore.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formidable_2.0.0-canary.20200129.4_1580273619199_0.0764005023952623"},"_hasShrinkwrap":false},"2.0.0-canary.20200129.5":{"name":"formidable","version":"2.0.0-canary.20200129.5","license":"MIT","description":"A node.js module for parsing form data, especially file uploads.","homepage":"https://github.com/node-formidable/node-formidable","funding":"https://ko-fi.com/tunnckoCore/commissions","repository":{"type":"git","url":"git+https://github.com/node-formidable/node-formidable.git"},"main":"./src/index.js","publishConfig":{"access":"public","tag":"canary"},"scripts":{"cleanup":"rm -rf test/tmp","lint":"eslint . --cache --fix --quiet --format codeframe","pretest":"yarn run cleanup","test":"mkdir test/tmp && node test/run.js"},"devDependencies":{"@tunnckocore/prettier-config":"^1.2.0","eslint":"^6.8.0","eslint-config-airbnb-base":"^14.0.0","eslint-config-prettier":"^6.10.0","eslint-plugin-import":"^2.20.0","eslint-plugin-prettier":"^3.1.2","prettier":"^1.19.1","prettier-plugin-pkgjson":"^0.2.0","request":"^2.88.0","urun":"^0.0.8","utest":"^0.0.8"},"readme":"<p align=\"center\">\n  <img alt=\"node formidable logo\" src=\"./logo.png\" />\n</p>\n\n# formidable [![npm version][npmv-img]][npmv-url] [![MIT license][license-img]][license-url]\n\n> A Node.js module for parsing form data, especially file uploads.\n\n[![Code style][codestyle-img]][codestyle-url]\n[![npm version][npmv-canary-img]][npmv-url]\n[![build status][build-img]][build-url]\n[![chat on gitter][chat-img]][chat-url]\n\n## Status: Maintained\n\nThis module was initially developed by [**@felixge**](https://github.com/felixge) for [Transloadit](http://transloadit.com/), a service focused on uploading and encoding images and videos. It has been battle-tested against hundreds of GBs of file uploads from a large variety of clients and is considered production-ready and is used in production for years.\n\nCurrently, we are few maintainers trying to deal with it. :) More contributors are always welcome! :heart:\nJump on [issue #412](https://github.com/felixge/node-formidable/issues/412) if you are interested.\n\n_**Note:** Master is a \"development\" branch - try it with `npm i formidable@canary`.\nDo not expect (for now) things from it to be inside the`latest`\"dist-tag\" in the Npm.\nThe`formidable@latest`is the`v1.2.1` version and probably it will be the last`v1` release!_\n\n_**Note: v2 is coming soon!**_\n\n## Highlights\n\n- Fast (~900-2500 mb/sec), streaming multipart parser\n- Automatically writing file uploads to disk\n- Low memory footprint\n- Graceful error handling\n- Very high test coverage\n\n## Install\n\n```sh\nnpm install formidable\n# or the development version\nnpm install formidable@canary\n```\n\nor with Yarn v1/v2\n\n```sh\nyarn add formidable\n# or the development version\nyarn add formidable@canary\n```\n\nThis is a low-level package, and if you're using a high-level framework it may already be included.\n\nHowever, [Express v4](http://expressjs.com) does not include any multipart handling, nor does [body-parser](https://github.com/expressjs/body-parser).\n\nFor `koa` there is [koa-better-body](https://ghub.now.sh/koa-better-body)\nwhich can handle ANY type of body / form-data - JSON, urlencoded, multpart and so on.\nA new major release is coming there too.\n\n## Example\n\nParse an incoming file upload.\n\n```js\nconst http = require('http');\nconst util = require('util');\nconst formidable = require('formidable');\n\nhttp\n  .createServer((req, res) => {\n    if (req.url === '/upload' && req.method.toLowerCase() === 'post') {\n      // parse a file upload\n      const form = formidable();\n\n      form.parse(req, (err, fields, files) => {\n        res.writeHead(200, { 'content-type': 'text/plain' });\n        res.write('received upload:\\n\\n');\n        res.end(util.inspect({ fields: fields, files: files }));\n      });\n\n      return;\n    }\n\n    // show a file upload form\n    res.writeHead(200, { 'content-type': 'text/html' });\n    res.end(`\n      <form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">\n        <input type=\"text\" name=\"title\" /><br/>\n        <input type=\"file\" name=\"upload\" multiple=\"multiple\" /><br/>\n        <input type=\"submit\" value=\"Upload\" />\n      </form>\n    `);\n  })\n  .listen(8080, () => {\n    console.log('Server listening on http://localhost:8080/ ...');\n  });\n```\n\n## Benchmarks\n\nThe benchmark is quite old, from the old codebase. But maybe quite true though.\nPreviously the numbers was around ~500 mb/sec. Currently with moving to\nthe new Node.js Streams API it's faster. You can clearly see the differences\nbetween the Node versions.\n\n_Note: a lot better benchmarking could and should be done in future._\n\nBenchmarked on 8GB RAM, Xeon X3440 (2.53 GHz, 4 cores, 8 threads)\n\n```\n~/github/node-formidable master\n❯ nve --parallel 8 10 12 13 node benchmark/bench-multipart-parser.js\n\n ⬢  Node 8\n\n1261.08 mb/sec\n\n ⬢  Node 10\n\n1113.04 mb/sec\n\n ⬢  Node 12\n\n2107.00 mb/sec\n\n ⬢  Node 13\n\n2566.42 mb/sec\n```\n\n![benchmark January 29th, 2020](./benchmark/2020-01-29_xeon-x3440.png)\n\n## API\n\n### Formidable / IncomingForm\n\nAll shown are equivalent.\n\n_Please pass [`options`](#options) to the function/constructor,\nnot by passing assigning them to the instance `form`_\n\n```js\nconst formidable = require('formidable');\nconst form = formidable(options);\n\n// or\nconst { formidable } = require('formidable');\nconst form = formidable(options);\n\n// or\nconst { IncomingForm } = require('formidable');\nconst form = new IncomingForm(options);\n\n// or\nconst { Formidable } = require('formidable');\nconst form = new Formidable(options);\n```\n\n### Options\n\nSee it's defaults in [src/Formidable.js](./src/Formidable.js#L14-L22) (the `DEFAULT_OPTIONS` constant).\n\n- `options.encoding` **{string}** - default `'utf-8'`; sets encoding for incoming form fields,\n- `options.uploadDir` **{string}** - default `os.tmpdir()`; the directory for placing file uploads in. You can move them later by using `fs.rename()`\n- `options.keepExtensions` **{boolean}** - default `false`; to include the extensions of the original files or not\n- `options.maxFieldsSize` **{number}** - default `20 * 1024 * 1024` (20mb); limit the amount of memory all fields together (except files) can allocate in bytes.\n- `options.maxFieldsSize` **{number}** - default `200 * 1024 * 1024` (200mb); limit the size of uploaded file.\n- `options.maxFields` **{number}** - default `1000`; limit the number of fields that the Querystring parser will decode, set 0 for unlimited\n- `options.hash` **{boolean}** - default `false`; include checksums calculated for incoming files, set this to some hash algorithm, see [crypto.createHash](https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options) for available algorithms\n- `options.multiples` **{boolean}** - default `false`; when you call the `.parse` method, the `files` argument (of the callback) will contain arrays of files for inputs which submit multiple files using the HTML5 `multiple` attribute. Also, the `fields` argument will contain arrays of values for fields that have names ending with '[]'.\n\n_**Note:** If this value is exceeded, an `'error'` event is emitted._\n\n```js\n// The amount of bytes received for this form so far.\nform.bytesReceived;\n```\n\n```js\n// The expected number of bytes in this form.\nform.bytesExpected;\n```\n\n### .parse(request, callback)\n\nParses an incoming Node.js `request` containing form data.\nIf `callback` is provided, all fields and files are collected and passed to the callback.\n\n```js\nconst formidable = require('formidable');\n\nconst form = formidable({ multiples: true, uploadDir: __dirname });\n\nform.parse(req, (err, fields, files) => {\n  console.log('fields:', fields);\n  console.log('files:', files);\n});\n```\n\nYou may overwrite this method if you are interested in directly accessing the multipart stream. Doing so will disable any `'field'` / `'file'` events processing which would occur otherwise, making you fully responsible for handling the processing.\n\nIn the example below, we listen on couple of events and direct them to the `data` listener,\nso you can do whatever you choose there, based on whether its before the file been emitted,\nthe header value, the header name, on field, on file and etc.\n\nOr the other way could be to just override the `form.onPart` as it's shown a bit later.\n\n```js\nform.once('error', console.error);\n\nform.on('fileBegin', (filename, file) => {\n  form.emit('data', { name: 'fileBegin', filename, value: file });\n});\n\nform.on('file', (filename, file) => {\n  form.emit('data', { name: 'file', key: filename, value: file });\n});\n\nform.on('field', (fieldName, fieldValue) => {\n  form.emit('data', { name: 'field', key: fieldName, value: fieldValue });\n});\n\nform.once('end', () => {\n  console.log('Done!');\n});\n\n// If you want to customize whatever you want...\nform.on('data', ({ name, key, value, buffer, start, end, ...more }) => {\n  if (name === 'partBegin') {\n  }\n  if (name === 'partData') {\n  }\n  if (name === 'headerField') {\n  }\n  if (name === 'headerValue') {\n  }\n  if (name === 'headerEnd') {\n  }\n  if (name === 'headersEnd') {\n  }\n  if (name === 'field') {\n    console.log('field name:', key);\n    console.log('field value:', value);\n  }\n  if (name === 'file') {\n    console.log('file:', key, value);\n  }\n  if (name === 'fileBegin') {\n    console.log('fileBegin:', key, value);\n  }\n});\n```\n\n### form.onPart\n\nIf you want to use Formidable to only handle certain parts for you, you can do something similar.\nOr see [#387](https://github.com/node-formidable/node-formidable/issues/387) for inspiration,\nyou can for example validate the mime-type.\n\n```js\nconst form = formidable();\n\nform.onPart = (part) => {\n  part.on('data', (buffer) {\n    // do whatever you want here\n  });\n};\n```\n\nFor example, force Formidable to be used only on non-file \"parts\" (i.e., html fields)\n\n```js\nconst form = formidable();\n\nform.onPart = function(part) {\n  // let formidable handle only non-file parts\n  if (part.filename === '' || !part.mime) {\n    // used internally, please do not override!\n    form.handlePart(part);\n  }\n};\n```\n\n### File\n\n```ts\nexport interface File {\n  // The size of the uploaded file in bytes.\n  // If the file is still being uploaded (see `'fileBegin'` event),\n  // this property says how many bytes of the file have been written to disk yet.\n  file.size: number;\n\n  // The path this file is being written to. You can modify this in the `'fileBegin'` event in\n  // case you are unhappy with the way formidable generates a temporary path for your files.\n  file.path: string;\n\n  // The name this file had according to the uploading client.\n  file.name: string | null;\n\n  // The mime type of this file, according to the uploading client.\n  file.type: string | null;\n\n  // A Date object (or `null`) containing the time this file was last written to.\n  // Mostly here for compatibility with the [W3C File API Draft](http://dev.w3.org/2006/webapi/FileAPI/).\n  file.lastModifiedDate: Date | null;\n\n  // If `options.hash` calculation was set, you can read the hex digest out of this var.\n  file.hash: string | 'sha1' | 'md5' | 'sha256' | null;\n}\n```\n\n#### file.toJSON()\n\nThis method returns a JSON-representation of the file, allowing you to\n`JSON.stringify()` the file which is useful for logging and responding\nto requests.\n\n### Events\n\n#### `'progress'`\n\nEmitted after each incoming chunk of data that has been parsed. Can be used to roll your own progress bar.\n\n```js\nform.on('progress', (bytesReceived, bytesExpected) => {});\n```\n\n#### `'field'`\n\nEmitted whenever a field / value pair has been received.\n\n```js\nform.on('field', (name, value) => {});\n```\n\n#### `'fileBegin'`\n\nEmitted whenever a new file is detected in the upload stream. Use this event if\nyou want to stream the file to somewhere else while buffering the upload on\nthe file system.\n\n```js\nform.on('fileBegin', (name, file) => {});\n```\n\n#### `'file'`\n\nEmitted whenever a field / file pair has been received. `file` is an instance of `File`.\n\n```js\nform.on('file', (name, file) => {});\n```\n\n#### `'error'`\n\nEmitted when there is an error processing the incoming form. A request that experiences an error is automatically paused, you will have to manually call `request.resume()` if you want the request to continue firing `'data'` events.\n\n```js\nform.on('error', (err) => {});\n```\n\n#### `'aborted'`\n\nEmitted when the request was aborted by the user. Right now this can be due to a 'timeout' or 'close' event on the socket. After this event is emitted, an `error` event will follow. In the future there will be a separate 'timeout' event (needs a change in the node core).\n\n```js\nform.on('aborted', () => {});\n```\n\n#### `'end'`\n\nEmitted when the entire request has been received, and all contained files have finished flushing to disk. This is a great place for you to send your response.\n\n```js\nform.on('end', () => {});\n```\n\n## License\n\nFormidable is licensed under the [MIT License][license-url].\n\n## Ports\n\n- [multipart-parser](http://github.com/FooBarWidget/multipart-parser): a C++ parser based on formidable\n\n## Credits\n\n- [Ryan Dahl](http://twitter.com/ryah) for his work on [http-parser](http://github.com/ry/http-parser) which heavily inspired multipart_parser.js\n\n<!-- badges -->\n\n[codestyle-url]: https://github.com/airbnb/javascript\n[codestyle-img]: https://badgen.net/badge/code%20style/airbnb%20%2B%20prettier/ff5a5f?icon=airbnb&cache=300\n[build-img]: https://badgen.net/travis/node-formidable/node-formidable/master?label=build&icon=travis\n[build-url]: https://travis-ci.org/node-formidable/node-formidable.svg?branch=master\n[npmv-canary-img]: https://badgen.net/npm/v/formidable/canary?icon=npm\n[npmv-img]: https://badgen.net/npm/v/formidable?icon=npm\n[npmv-url]: https://npmjs.com/package/formidable\n[license-img]: https://badgen.net/npm/license/formidable\n[license-url]: https://github.com/node-formidable/node-formidable/blob/master/LICENSE\n[chat-img]: https://badgen.net/badge/chat/on%20gitter/46BC99?icon=gitter\n[chat-url]: https://gitter.im/node-formidable/Lobby\n","readmeFilename":"README.md","gitHead":"7c8e9e0e43dfd404425f97462e337cb998a68c71","bugs":{"url":"https://github.com/node-formidable/node-formidable/issues"},"_id":"formidable@2.0.0-canary.20200129.5","_nodeVersion":"12.14.0","_npmVersion":"6.13.4","dist":{"integrity":"sha512-OhODaJxPr3zdGoJqnPUWpNO+9Zj0NUr9Es0kXnULrfWOkC5gkl4DhxuzqsjYYfPc6LM+DW/KhST3Ac6h5qMOcA==","shasum":"1720b0f6c16a633b458dc6b241abac4baa4b2d20","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-2.0.0-canary.20200129.5.tgz","fileCount":12,"unpackedSize":51440,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeMR7iCRA9TVsSAnZWagAApCcP/0G6KTDaTTQtC7HdHX6k\nr02h88uTBUJVM1G27k0kr7o0THdz3Sh2hRTK2j21a5Mz4vbxC8gfj/ieF8lV\npCKW1CVy8vAGCR00x/0iZocXXYCGg0Fbxfq24nJjxRDFENy0CH0jAeW51jgc\ndCHnOrziJvudCI2WcP1e4wCz7JvJVkWpCnSlVNQmO3w+QSlrm857eI+3Dizx\n8wnSz7F3UsbK+0rZQIODvgtp2GqNSRabeSg3BfKnGyLcYzKfmRB8+iJSOXcK\nG0NdJvfbfHyFytOIb6JnWeQ27OHw1XVqH7vlqVzGbDg2Y/tWMnh+76mi557C\n9uCp3asrguwZAJA46Wvts8qW08/m67s2p5VeZSfu6iFenOxd0rgW9QnptlUW\nAkBNH49QDrF9e/+bddRGJ8HDzCQ9j06/lvn2XSXGrhjRjB/RduNG7c8RzB/7\nRvmXFVJFmYE0nW3dyzELryqNy1yAMS/0afnNHpPWuuFhmiORrfTInLxor4/+\nIi7hFJ7Pu3USnXVKhehXvH7kOSlakKO7gi2/eIBLnuW4WphU4kj7e6uGi1Nq\nsmzu9oENqZpC8A6FwqmY/CBGK0V1+0JLVKFKsBdYZm+zKtaJXIamcWzad8PM\nsLRbtcVJ/4hQoFIj8qZv+wBxQr2vdij3jsm2tuPHYEi5USD8KxkHeamaNXdP\nIpg7\r\n=AnlT\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"chalkerx@gmail.com","name":"chalker"},{"email":"felix@debuggable.com","name":"felixge"},{"email":"npmspam@geekhood.net","name":"kornel"},{"email":"nathanael.dmc@outlook.fr","name":"quantumsheep"},{"email":"superjoe30@gmail.com","name":"superjoe"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"tim@fostle.com","name":"tim-smart"},{"email":"mameto2011@gmail.com","name":"tunnckocore"},{"email":"super.ludiq@gmail.com","name":"vanchoy"},{"email":"xargs@disroot.org","name":"xargs"}],"_npmUser":{"name":"tunnckocore","email":"opensource@tunnckocore.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formidable_2.0.0-canary.20200129.5_1580277474345_0.8366912985984942"},"_hasShrinkwrap":false},"2.0.0-canary.20200129.10":{"name":"formidable","version":"2.0.0-canary.20200129.10","license":"MIT","description":"A node.js module for parsing form data, especially file uploads.","homepage":"https://github.com/node-formidable/node-formidable","funding":"https://ko-fi.com/tunnckoCore/commissions","repository":{"type":"git","url":"git+https://github.com/node-formidable/node-formidable.git"},"main":"./src/index.js","publishConfig":{"access":"public","tag":"canary"},"scripts":{"cleanup":"rm -rf test/tmp","fmt":"prettier '**/*.{md,js,json}' --write","lint":"eslint . --cache --fix --quiet --format codeframe","pretest":"yarn run cleanup && mkdir test/tmp","test":"node test/run.js","pretest:ci":"yarn pretest","test:ci":"nyc node test/run.js"},"devDependencies":{"@tunnckocore/prettier-config":"^1.2.0","eslint":"^6.8.0","eslint-config-airbnb-base":"^14.0.0","eslint-config-prettier":"^6.10.0","eslint-plugin-import":"^2.20.0","eslint-plugin-prettier":"^3.1.2","nyc":"^15.0.0","prettier":"^1.19.1","prettier-plugin-pkgjson":"^0.2.0","request":"^2.88.0","urun":"^0.0.8","utest":"^0.0.8"},"readme":"<p align=\"center\">\n  <img alt=\"node formidable logo\" src=\"./logo.png\" />\n</p>\n\n# formidable [![npm version][npmv-img]][npmv-url] [![MIT license][license-img]][license-url] [![Libera Manifesto][libera-manifesto-img]][libera-manifesto-url]\n\n> A Node.js module for parsing form data, especially file uploads.\n\n[![Code style][codestyle-img]][codestyle-url]\n[![build status][build-img]][build-url]\n[![codecoverage][codecov-img]][codecov-url]\n[![Renovate App Status][renovateapp-img]][renovateapp-url]\n[![Make A Pull Request][prs-welcome-img]][prs-welcome-url]\n[![Twitter][twitter-img]][twitter-url]\n\n## Status: Maintained\n\nThis module was initially developed by [**@felixge**](https://github.com/felixge) for [Transloadit](http://transloadit.com/), a service focused on uploading and encoding images and videos. It has been battle-tested against hundreds of GBs of file uploads from a large variety of clients and is considered production-ready and is used in production for years.\n\nCurrently, we are few maintainers trying to deal with it. :) More contributors are always welcome! :heart:\nJump on [issue #412](https://github.com/felixge/node-formidable/issues/412) if you are interested.\n\n_**Note:** Master is a \"development\" branch - try it with `npm i formidable@canary`.\nDo not expect (for now) things from it to be inside the`latest`\"dist-tag\" in the Npm.\nThe`formidable@latest`is the`v1.2.1` version and probably it will be the last`v1` release!_\n\n_**Note: v2 is coming soon!**_\n\n[![npm version][npmv-canary-img]][npmv-url]\n\n## Highlights\n\n- Fast (~900-2500 mb/sec), streaming multipart parser\n- Automatically writing file uploads to disk\n- Low memory footprint\n- Graceful error handling\n- Very high test coverage\n\n## Install\n\n```sh\nnpm install formidable\n# or the development version\nnpm install formidable@canary\n```\n\nor with Yarn v1/v2\n\n```sh\nyarn add formidable\n# or the development version\nyarn add formidable@canary\n```\n\nThis is a low-level package, and if you're using a high-level framework it may already be included.\n\nHowever, [Express v4](http://expressjs.com) does not include any multipart handling, nor does [body-parser](https://github.com/expressjs/body-parser).\n\nFor `koa` there is [koa-better-body](https://ghub.now.sh/koa-better-body)\nwhich can handle ANY type of body / form-data - JSON, urlencoded, multpart and so on.\nA new major release is coming there too.\n\n## Example\n\nParse an incoming file upload.\n\n```js\nconst http = require('http');\nconst util = require('util');\nconst formidable = require('formidable');\n\nhttp\n  .createServer((req, res) => {\n    if (req.url === '/upload' && req.method.toLowerCase() === 'post') {\n      // parse a file upload\n      const form = formidable();\n\n      form.parse(req, (err, fields, files) => {\n        res.writeHead(200, { 'content-type': 'text/plain' });\n        res.write('received upload:\\n\\n');\n        res.end(util.inspect({ fields: fields, files: files }));\n      });\n\n      return;\n    }\n\n    // show a file upload form\n    res.writeHead(200, { 'content-type': 'text/html' });\n    res.end(`\n      <form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">\n        <input type=\"text\" name=\"title\" /><br/>\n        <input type=\"file\" name=\"upload\" multiple=\"multiple\" /><br/>\n        <input type=\"submit\" value=\"Upload\" />\n      </form>\n    `);\n  })\n  .listen(8080, () => {\n    console.log('Server listening on http://localhost:8080/ ...');\n  });\n```\n\n## Benchmarks\n\nThe benchmark is quite old, from the old codebase. But maybe quite true though.\nPreviously the numbers was around ~500 mb/sec. Currently with moving to\nthe new Node.js Streams API it's faster. You can clearly see the differences\nbetween the Node versions.\n\n_Note: a lot better benchmarking could and should be done in future._\n\nBenchmarked on 8GB RAM, Xeon X3440 (2.53 GHz, 4 cores, 8 threads)\n\n```\n~/github/node-formidable master\n❯ nve --parallel 8 10 12 13 node benchmark/bench-multipart-parser.js\n\n ⬢  Node 8\n\n1261.08 mb/sec\n\n ⬢  Node 10\n\n1113.04 mb/sec\n\n ⬢  Node 12\n\n2107.00 mb/sec\n\n ⬢  Node 13\n\n2566.42 mb/sec\n```\n\n![benchmark January 29th, 2020](./benchmark/2020-01-29_xeon-x3440.png)\n\n## API\n\n### Formidable / IncomingForm\n\nAll shown are equivalent.\n\n_Please pass [`options`](#options) to the function/constructor,\nnot by passing assigning them to the instance `form`_\n\n```js\nconst formidable = require('formidable');\nconst form = formidable(options);\n\n// or\nconst { formidable } = require('formidable');\nconst form = formidable(options);\n\n// or\nconst { IncomingForm } = require('formidable');\nconst form = new IncomingForm(options);\n\n// or\nconst { Formidable } = require('formidable');\nconst form = new Formidable(options);\n```\n\n### Options\n\nSee it's defaults in [src/Formidable.js](./src/Formidable.js#L14-L22) (the `DEFAULT_OPTIONS` constant).\n\n- `options.encoding` **{string}** - default `'utf-8'`; sets encoding for incoming form fields,\n- `options.uploadDir` **{string}** - default `os.tmpdir()`; the directory for placing file uploads in. You can move them later by using `fs.rename()`\n- `options.keepExtensions` **{boolean}** - default `false`; to include the extensions of the original files or not\n- `options.maxFieldsSize` **{number}** - default `20 * 1024 * 1024` (20mb); limit the amount of memory all fields together (except files) can allocate in bytes.\n- `options.maxFieldsSize` **{number}** - default `200 * 1024 * 1024` (200mb); limit the size of uploaded file.\n- `options.maxFields` **{number}** - default `1000`; limit the number of fields that the Querystring parser will decode, set 0 for unlimited\n- `options.hash` **{boolean}** - default `false`; include checksums calculated for incoming files, set this to some hash algorithm, see [crypto.createHash](https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options) for available algorithms\n- `options.multiples` **{boolean}** - default `false`; when you call the `.parse` method, the `files` argument (of the callback) will contain arrays of files for inputs which submit multiple files using the HTML5 `multiple` attribute. Also, the `fields` argument will contain arrays of values for fields that have names ending with '[]'.\n\n_**Note:** If this value is exceeded, an `'error'` event is emitted._\n\n```js\n// The amount of bytes received for this form so far.\nform.bytesReceived;\n```\n\n```js\n// The expected number of bytes in this form.\nform.bytesExpected;\n```\n\n### .parse(request, callback)\n\nParses an incoming Node.js `request` containing form data.\nIf `callback` is provided, all fields and files are collected and passed to the callback.\n\n```js\nconst formidable = require('formidable');\n\nconst form = formidable({ multiples: true, uploadDir: __dirname });\n\nform.parse(req, (err, fields, files) => {\n  console.log('fields:', fields);\n  console.log('files:', files);\n});\n```\n\nYou may overwrite this method if you are interested in directly accessing the multipart stream. Doing so will disable any `'field'` / `'file'` events processing which would occur otherwise, making you fully responsible for handling the processing.\n\nIn the example below, we listen on couple of events and direct them to the `data` listener,\nso you can do whatever you choose there, based on whether its before the file been emitted,\nthe header value, the header name, on field, on file and etc.\n\nOr the other way could be to just override the `form.onPart` as it's shown a bit later.\n\n```js\nform.once('error', console.error);\n\nform.on('fileBegin', (filename, file) => {\n  form.emit('data', { name: 'fileBegin', filename, value: file });\n});\n\nform.on('file', (filename, file) => {\n  form.emit('data', { name: 'file', key: filename, value: file });\n});\n\nform.on('field', (fieldName, fieldValue) => {\n  form.emit('data', { name: 'field', key: fieldName, value: fieldValue });\n});\n\nform.once('end', () => {\n  console.log('Done!');\n});\n\n// If you want to customize whatever you want...\nform.on('data', ({ name, key, value, buffer, start, end, ...more }) => {\n  if (name === 'partBegin') {\n  }\n  if (name === 'partData') {\n  }\n  if (name === 'headerField') {\n  }\n  if (name === 'headerValue') {\n  }\n  if (name === 'headerEnd') {\n  }\n  if (name === 'headersEnd') {\n  }\n  if (name === 'field') {\n    console.log('field name:', key);\n    console.log('field value:', value);\n  }\n  if (name === 'file') {\n    console.log('file:', key, value);\n  }\n  if (name === 'fileBegin') {\n    console.log('fileBegin:', key, value);\n  }\n});\n```\n\n### form.onPart\n\nIf you want to use Formidable to only handle certain parts for you, you can do something similar.\nOr see [#387](https://github.com/node-formidable/node-formidable/issues/387) for inspiration,\nyou can for example validate the mime-type.\n\n```js\nconst form = formidable();\n\nform.onPart = (part) => {\n  part.on('data', (buffer) {\n    // do whatever you want here\n  });\n};\n```\n\nFor example, force Formidable to be used only on non-file \"parts\" (i.e., html fields)\n\n```js\nconst form = formidable();\n\nform.onPart = function(part) {\n  // let formidable handle only non-file parts\n  if (part.filename === '' || !part.mime) {\n    // used internally, please do not override!\n    form.handlePart(part);\n  }\n};\n```\n\n### File\n\n```ts\nexport interface File {\n  // The size of the uploaded file in bytes.\n  // If the file is still being uploaded (see `'fileBegin'` event),\n  // this property says how many bytes of the file have been written to disk yet.\n  file.size: number;\n\n  // The path this file is being written to. You can modify this in the `'fileBegin'` event in\n  // case you are unhappy with the way formidable generates a temporary path for your files.\n  file.path: string;\n\n  // The name this file had according to the uploading client.\n  file.name: string | null;\n\n  // The mime type of this file, according to the uploading client.\n  file.type: string | null;\n\n  // A Date object (or `null`) containing the time this file was last written to.\n  // Mostly here for compatibility with the [W3C File API Draft](http://dev.w3.org/2006/webapi/FileAPI/).\n  file.lastModifiedDate: Date | null;\n\n  // If `options.hash` calculation was set, you can read the hex digest out of this var.\n  file.hash: string | 'sha1' | 'md5' | 'sha256' | null;\n}\n```\n\n#### file.toJSON()\n\nThis method returns a JSON-representation of the file, allowing you to\n`JSON.stringify()` the file which is useful for logging and responding\nto requests.\n\n### Events\n\n#### `'progress'`\n\nEmitted after each incoming chunk of data that has been parsed. Can be used to roll your own progress bar.\n\n```js\nform.on('progress', (bytesReceived, bytesExpected) => {});\n```\n\n#### `'field'`\n\nEmitted whenever a field / value pair has been received.\n\n```js\nform.on('field', (name, value) => {});\n```\n\n#### `'fileBegin'`\n\nEmitted whenever a new file is detected in the upload stream. Use this event if\nyou want to stream the file to somewhere else while buffering the upload on\nthe file system.\n\n```js\nform.on('fileBegin', (name, file) => {});\n```\n\n#### `'file'`\n\nEmitted whenever a field / file pair has been received. `file` is an instance of `File`.\n\n```js\nform.on('file', (name, file) => {});\n```\n\n#### `'error'`\n\nEmitted when there is an error processing the incoming form. A request that experiences an error is automatically paused, you will have to manually call `request.resume()` if you want the request to continue firing `'data'` events.\n\n```js\nform.on('error', (err) => {});\n```\n\n#### `'aborted'`\n\nEmitted when the request was aborted by the user. Right now this can be due to a 'timeout' or 'close' event on the socket. After this event is emitted, an `error` event will follow. In the future there will be a separate 'timeout' event (needs a change in the node core).\n\n```js\nform.on('aborted', () => {});\n```\n\n#### `'end'`\n\nEmitted when the entire request has been received, and all contained files have finished flushing to disk. This is a great place for you to send your response.\n\n```js\nform.on('end', () => {});\n```\n\n## Ports & Credits\n\n- [multipart-parser](http://github.com/FooBarWidget/multipart-parser): a C++ parser based on formidable\n- [Ryan Dahl](http://twitter.com/ryah) for his work on [http-parser](http://github.com/ry/http-parser) which heavily inspired the initial `multipart_parser.js`.\n\n## Contributing\n\nIf the documentation is unclear or has a typo, please click on the page's `Edit`\nbutton (pencil icon) and suggest a correction. If you would like to help us fix a bug or add a new feature, please check our\n[Contributing Guide](./CONTRIBUTING.md). Pull requests are welcome!\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://twitter.com/felixge\"><img src=\"https://avatars3.githubusercontent.com/u/15000?s=460&v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Felix Geisendörfer</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=felixge\" title=\"Code\">💻</a> <a href=\"#design-felixge\" title=\"Design\">🎨</a> <a href=\"#ideas-felixge\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=felixge\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://tunnckoCore.com\"><img src=\"https://avatars3.githubusercontent.com/u/5038030?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Charlike Mike Reagent</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AtunnckoCore\" title=\"Bug reports\">🐛</a> <a href=\"#infra-tunnckoCore\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#design-tunnckoCore\" title=\"Design\">🎨</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Code\">💻</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Documentation\">📖</a> <a href=\"#example-tunnckoCore\" title=\"Examples\">💡</a> <a href=\"#ideas-tunnckoCore\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-tunnckoCore\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/kedarv\"><img src=\"https://avatars1.githubusercontent.com/u/1365665?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kedar</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=kedarv\" title=\"Code\">💻</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=kedarv\" title=\"Tests\">⚠️</a> <a href=\"#question-kedarv\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Akedarv\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/GrosSacASac\"><img src=\"https://avatars0.githubusercontent.com/u/5721194?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Walle Cyril</b></sub></a><br /><a href=\"#question-GrosSacASac\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AGrosSacASac\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=GrosSacASac\" title=\"Code\">💻</a> <a href=\"#financial-GrosSacASac\" title=\"Financial\">💵</a> <a href=\"#ideas-GrosSacASac\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-GrosSacASac\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/xarguments\"><img src=\"https://avatars2.githubusercontent.com/u/40522463?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Xargs</b></sub></a><br /><a href=\"#question-xarguments\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Axarguments\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=xarguments\" title=\"Code\">💻</a> <a href=\"#maintenance-xarguments\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Amit-A\"><img src=\"https://avatars1.githubusercontent.com/u/7987238?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Amit-A</b></sub></a><br /><a href=\"#question-Amit-A\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AAmit-A\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=Amit-A\" title=\"Code\">💻</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://charmander.me/\"><img src=\"https://avatars1.githubusercontent.com/u/1889843?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Charmander</b></sub></a><br /><a href=\"#question-charmander\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Acharmander\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=charmander\" title=\"Code\">💻</a> <a href=\"#ideas-charmander\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-charmander\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/dylan_piercey\"><img src=\"https://avatars2.githubusercontent.com/u/4985201?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Dylan Piercey</b></sub></a><br /><a href=\"#ideas-DylanPiercey\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"http://ochrona.jawne.info.pl\"><img src=\"https://avatars1.githubusercontent.com/u/3618479?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Adam Dobrawy</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Aad-m\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=ad-m\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/amitrohatgi\"><img src=\"https://avatars3.githubusercontent.com/u/12177021?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>amitrohatgi</b></sub></a><br /><a href=\"#ideas-amitrohatgi\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/fengxinming\"><img src=\"https://avatars2.githubusercontent.com/u/6262382?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jesse Feng</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Afengxinming\" title=\"Bug reports\">🐛</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\n## License\n\nFormidable is licensed under the [MIT License][license-url].\n\n<!-- badges -->\n\n[codestyle-url]: https://github.com/airbnb/javascript\n[codestyle-img]: https://badgen.net/badge/code%20style/airbnb%20%2B%20prettier/ff5a5f?icon=airbnb&cache=300\n[codecov-url]: https://codecov.io/gh/node-formidable/node-formidable\n[codecov-img]: https://badgen.net/codecov/c/github/node-formidable/node-formidable/master?icon=codecov\n[build-img]: https://badgen.net/github/checks/node-formidable/node-formidable?label=build&icon=github\n[build-url]: https://github.com/node-formidable/node-formidable/actions?query=workflow%3Anodejs\n[npmv-canary-img]: https://badgen.net/npm/v/formidable/canary?icon=npm\n[npmv-img]: https://badgen.net/npm/v/formidable?icon=npm\n[npmv-url]: https://npmjs.com/package/formidable\n[license-img]: https://badgen.net/npm/license/formidable\n[license-url]: https://github.com/node-formidable/node-formidable/blob/master/LICENSE\n[chat-img]: https://badgen.net/badge/chat/on%20gitter/46BC99?icon=gitter\n[chat-url]: https://gitter.im/node-formidable/Lobby\n[libera-manifesto-url]: https://liberamanifesto.com\n[libera-manifesto-img]: https://badgen.net/badge/libera/manifesto/grey\n[renovateapp-url]: https://renovatebot.com\n[renovateapp-img]: https://badgen.net/badge/renovate/enabled/green?cache=300\n[prs-welcome-img]: https://badgen.net/badge/PRs/welcome/green?cache=300\n[prs-welcome-url]: http://makeapullrequest.com\n[twitter-url]: https://twitter.com/tunnckoCore\n[twitter-img]: https://badgen.net/twitter/follow/tunnckoCore?icon=twitter&color=1da1f2&cache=300\n","readmeFilename":"README.md","gitHead":"d5365d8ac97e6e5c3c44c591b3e3240fefd1d8c8","bugs":{"url":"https://github.com/node-formidable/node-formidable/issues"},"_id":"formidable@2.0.0-canary.20200129.10","_nodeVersion":"12.14.0","_npmVersion":"6.13.4","dist":{"integrity":"sha512-2alffs+57OwPWD49/VO2u6r1qzgxz5GfyKpu1yWk9lc98QqJhI7pe0lEmE/0v93We/YcBZF3QV746hpBLkRsXg==","shasum":"552cd02d06323c0b90852f040a3aa857961a72f9","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-2.0.0-canary.20200129.10.tgz","fileCount":12,"unpackedSize":58939,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeMcM5CRA9TVsSAnZWagAAVQwP/ic+K0fn8vs1itvvvNJR\ncFKqah/PlvnUjOQrE73fUkK2txKIuQtEacvGmfL8+mrK4bh2hlNKPcrJCX3B\nFmGhYCnVRMi/JC+oS0rnsh4coBxfb0I1ngXcwDNOwjDeHVSt2x08568KSc+/\nZiJ4yCd3DcNXilTHAObf3+CqzCYxFNHk3wpkGuk99fOlXZ42AezexAek39Dc\nv2bUh+tH3+9xfz/tW4bnxPFHldTp5AB2gz3OcP+F/WfirHmCQfRoTIDKt30l\nGPb59aQROx9R8I/iuSpEbYGbhhwJ9Kf90gs1OCWyFv8OkLJWW/cG8PABHH0x\nnoo0DkcNw6AdfKsrAOdw1yFDZJEcfKf1GI9JhlZiVD1pqPR0rQxKU8RbBPLb\n29I6+9TsOF1qVQt7O032lD/N3BNS5vW9ilOPsiQT2zOdSGhGXvDVfak0t9b5\nqGvlDi00KseNUYd/Sf8BF9y1MOXcZOTx/I0esLeWMhOv+Con13BHNLi4xabE\nNuMGvmJmecOdtTxim/DgmPRxfFOVYVbQTh/AElzK27od6CDpcYr2kZUizgXv\nFzkPyEFrcK08p7oSq6irtCq14C2383n733dNJhLs+YMxMmwfIIkNXnkUfPQ+\nWp1lbkZae+0jsjLC12FGn1brRAyWbf9jpzzenhBF7hokBQ9sFh3rT5ivzx+3\nbZH3\r\n=kjWO\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"chalkerx@gmail.com","name":"chalker"},{"email":"felix@debuggable.com","name":"felixge"},{"email":"npmspam@geekhood.net","name":"kornel"},{"email":"nathanael.dmc@outlook.fr","name":"quantumsheep"},{"email":"superjoe30@gmail.com","name":"superjoe"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"tim@fostle.com","name":"tim-smart"},{"email":"mameto2011@gmail.com","name":"tunnckocore"},{"email":"super.ludiq@gmail.com","name":"vanchoy"},{"email":"xargs@disroot.org","name":"xargs"}],"_npmUser":{"name":"tunnckocore","email":"opensource@tunnckocore.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formidable_2.0.0-canary.20200129.10_1580319544969_0.6513922648031121"},"_hasShrinkwrap":false},"2.0.0-canary.20200129.32":{"name":"formidable","version":"2.0.0-canary.20200129.32","license":"MIT","description":"A node.js module for parsing form data, especially file uploads.","homepage":"https://github.com/node-formidable/node-formidable","funding":"https://ko-fi.com/tunnckoCore/commissions","repository":{"type":"git","url":"git+https://github.com/node-formidable/node-formidable.git"},"main":"./src/index.js","publishConfig":{"access":"public","tag":"canary"},"scripts":{"cleanup":"rm -rf test/tmp","fmt":"prettier '**/*.{md,js,json}' --write","lint":"eslint . --cache --fix --quiet --format codeframe","pretest":"yarn run cleanup && mkdir test/tmp","test":"node test/run.js","pretest:ci":"yarn pretest","test:ci":"nyc node test/run.js"},"devDependencies":{"@tunnckocore/prettier-config":"^1.2.0","eslint":"^6.8.0","eslint-config-airbnb-base":"^14.0.0","eslint-config-prettier":"^6.10.0","eslint-plugin-import":"^2.20.0","eslint-plugin-prettier":"^3.1.2","nyc":"^15.0.0","prettier":"^1.19.1","prettier-plugin-pkgjson":"^0.2.0","request":"^2.88.0","urun":"^0.0.8","utest":"^0.0.8"},"readme":"<p align=\"center\">\n  <img alt=\"node formidable logo\" src=\"./logo.png\" />\n</p>\n\n# formidable [![npm version][npmv-img]][npmv-url] [![MIT license][license-img]][license-url] [![Libera Manifesto][libera-manifesto-img]][libera-manifesto-url]\n\n> A Node.js module for parsing form data, especially file uploads.\n\n[![Code style][codestyle-img]][codestyle-url]\n[![build status][build-img]][build-url]\n[![codecoverage][codecov-img]][codecov-url]\n[![Renovate App Status][renovateapp-img]][renovateapp-url]\n[![Make A Pull Request][prs-welcome-img]][prs-welcome-url]\n[![Twitter][twitter-img]][twitter-url]\n\n## Status: Maintained\n\nThis module was initially developed by [**@felixge**](https://github.com/felixge) for [Transloadit](http://transloadit.com/), a service focused on uploading and encoding images and videos. It has been battle-tested against hundreds of GBs of file uploads from a large variety of clients and is considered production-ready and is used in production for years.\n\nCurrently, we are few maintainers trying to deal with it. :) More contributors are always welcome! :heart:\nJump on [issue #412](https://github.com/felixge/node-formidable/issues/412) if you are interested.\n\n_**Note:** Master is a \"development\" branch - try it with `npm i formidable@canary`.\nDo not expect (for now) things from it to be inside the`latest`\"dist-tag\" in the Npm.\nThe`formidable@latest`is the`v1.2.1` version and probably it will be the last`v1` release!_\n\n_**Note: v2 is coming soon!**_\n\n[![npm version][npmv-canary-img]][npmv-url]\n\n## Highlights\n\n- Fast (~900-2500 mb/sec), streaming multipart parser\n- Automatically writing file uploads to disk\n- Low memory footprint\n- Graceful error handling\n- Very high test coverage\n\n## Install\n\n```sh\nnpm install formidable\n# or the development version\nnpm install formidable@canary\n```\n\nor with Yarn v1/v2\n\n```sh\nyarn add formidable\n# or the development version\nyarn add formidable@canary\n```\n\nThis is a low-level package, and if you're using a high-level framework it may already be included.\n\nHowever, [Express v4](http://expressjs.com) does not include any multipart handling, nor does [body-parser](https://github.com/expressjs/body-parser).\n\nFor `koa` there is [koa-better-body](https://ghub.now.sh/koa-better-body)\nwhich can handle ANY type of body / form-data - JSON, urlencoded, multpart and so on.\nA new major release is coming there too.\n\n## Example\n\nParse an incoming file upload.\n\n```js\nconst http = require('http');\nconst util = require('util');\nconst formidable = require('formidable');\n\nhttp\n  .createServer((req, res) => {\n    if (req.url === '/upload' && req.method.toLowerCase() === 'post') {\n      // parse a file upload\n      const form = formidable();\n\n      form.parse(req, (err, fields, files) => {\n        res.writeHead(200, { 'content-type': 'text/plain' });\n        res.write('received upload:\\n\\n');\n        res.end(util.inspect({ fields: fields, files: files }));\n      });\n\n      return;\n    }\n\n    // show a file upload form\n    res.writeHead(200, { 'content-type': 'text/html' });\n    res.end(`\n      <form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">\n        <input type=\"text\" name=\"title\" /><br/>\n        <input type=\"file\" name=\"upload\" multiple=\"multiple\" /><br/>\n        <input type=\"submit\" value=\"Upload\" />\n      </form>\n    `);\n  })\n  .listen(8080, () => {\n    console.log('Server listening on http://localhost:8080/ ...');\n  });\n```\n\n## Benchmarks\n\nThe benchmark is quite old, from the old codebase. But maybe quite true though.\nPreviously the numbers was around ~500 mb/sec. Currently with moving to\nthe new Node.js Streams API it's faster. You can clearly see the differences\nbetween the Node versions.\n\n_Note: a lot better benchmarking could and should be done in future._\n\nBenchmarked on 8GB RAM, Xeon X3440 (2.53 GHz, 4 cores, 8 threads)\n\n```\n~/github/node-formidable master\n❯ nve --parallel 8 10 12 13 node benchmark/bench-multipart-parser.js\n\n ⬢  Node 8\n\n1261.08 mb/sec\n\n ⬢  Node 10\n\n1113.04 mb/sec\n\n ⬢  Node 12\n\n2107.00 mb/sec\n\n ⬢  Node 13\n\n2566.42 mb/sec\n```\n\n![benchmark January 29th, 2020](./benchmark/2020-01-29_xeon-x3440.png)\n\n## API\n\n### Formidable / IncomingForm\n\nAll shown are equivalent.\n\n_Please pass [`options`](#options) to the function/constructor,\nnot by passing assigning them to the instance `form`_\n\n```js\nconst formidable = require('formidable');\nconst form = formidable(options);\n\n// or\nconst { formidable } = require('formidable');\nconst form = formidable(options);\n\n// or\nconst { IncomingForm } = require('formidable');\nconst form = new IncomingForm(options);\n\n// or\nconst { Formidable } = require('formidable');\nconst form = new Formidable(options);\n```\n\n### Options\n\nSee it's defaults in [src/Formidable.js](./src/Formidable.js#L14-L22) (the `DEFAULT_OPTIONS` constant).\n\n- `options.encoding` **{string}** - default `'utf-8'`; sets encoding for incoming form fields,\n- `options.uploadDir` **{string}** - default `os.tmpdir()`; the directory for placing file uploads in. You can move them later by using `fs.rename()`\n- `options.keepExtensions` **{boolean}** - default `false`; to include the extensions of the original files or not\n- `options.maxFieldsSize` **{number}** - default `20 * 1024 * 1024` (20mb); limit the amount of memory all fields together (except files) can allocate in bytes.\n- `options.maxFieldsSize` **{number}** - default `200 * 1024 * 1024` (200mb); limit the size of uploaded file.\n- `options.maxFields` **{number}** - default `1000`; limit the number of fields that the Querystring parser will decode, set 0 for unlimited\n- `options.hash` **{boolean}** - default `false`; include checksums calculated for incoming files, set this to some hash algorithm, see [crypto.createHash](https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options) for available algorithms\n- `options.multiples` **{boolean}** - default `false`; when you call the `.parse` method, the `files` argument (of the callback) will contain arrays of files for inputs which submit multiple files using the HTML5 `multiple` attribute. Also, the `fields` argument will contain arrays of values for fields that have names ending with '[]'.\n\n_**Note:** If this value is exceeded, an `'error'` event is emitted._\n\n```js\n// The amount of bytes received for this form so far.\nform.bytesReceived;\n```\n\n```js\n// The expected number of bytes in this form.\nform.bytesExpected;\n```\n\n### .parse(request, callback)\n\nParses an incoming Node.js `request` containing form data.\nIf `callback` is provided, all fields and files are collected and passed to the callback.\n\n```js\nconst formidable = require('formidable');\n\nconst form = formidable({ multiples: true, uploadDir: __dirname });\n\nform.parse(req, (err, fields, files) => {\n  console.log('fields:', fields);\n  console.log('files:', files);\n});\n```\n\nYou may overwrite this method if you are interested in directly accessing the multipart stream. Doing so will disable any `'field'` / `'file'` events processing which would occur otherwise, making you fully responsible for handling the processing.\n\nIn the example below, we listen on couple of events and direct them to the `data` listener,\nso you can do whatever you choose there, based on whether its before the file been emitted,\nthe header value, the header name, on field, on file and etc.\n\nOr the other way could be to just override the `form.onPart` as it's shown a bit later.\n\n```js\nform.once('error', console.error);\n\nform.on('fileBegin', (filename, file) => {\n  form.emit('data', { name: 'fileBegin', filename, value: file });\n});\n\nform.on('file', (filename, file) => {\n  form.emit('data', { name: 'file', key: filename, value: file });\n});\n\nform.on('field', (fieldName, fieldValue) => {\n  form.emit('data', { name: 'field', key: fieldName, value: fieldValue });\n});\n\nform.once('end', () => {\n  console.log('Done!');\n});\n\n// If you want to customize whatever you want...\nform.on('data', ({ name, key, value, buffer, start, end, ...more }) => {\n  if (name === 'partBegin') {\n  }\n  if (name === 'partData') {\n  }\n  if (name === 'headerField') {\n  }\n  if (name === 'headerValue') {\n  }\n  if (name === 'headerEnd') {\n  }\n  if (name === 'headersEnd') {\n  }\n  if (name === 'field') {\n    console.log('field name:', key);\n    console.log('field value:', value);\n  }\n  if (name === 'file') {\n    console.log('file:', key, value);\n  }\n  if (name === 'fileBegin') {\n    console.log('fileBegin:', key, value);\n  }\n});\n```\n\n### form.onPart\n\nIf you want to use Formidable to only handle certain parts for you, you can do something similar.\nOr see [#387](https://github.com/node-formidable/node-formidable/issues/387) for inspiration,\nyou can for example validate the mime-type.\n\n```js\nconst form = formidable();\n\nform.onPart = (part) => {\n  part.on('data', (buffer) {\n    // do whatever you want here\n  });\n};\n```\n\nFor example, force Formidable to be used only on non-file \"parts\" (i.e., html fields)\n\n```js\nconst form = formidable();\n\nform.onPart = function(part) {\n  // let formidable handle only non-file parts\n  if (part.filename === '' || !part.mime) {\n    // used internally, please do not override!\n    form.handlePart(part);\n  }\n};\n```\n\n### File\n\n```ts\nexport interface File {\n  // The size of the uploaded file in bytes.\n  // If the file is still being uploaded (see `'fileBegin'` event),\n  // this property says how many bytes of the file have been written to disk yet.\n  file.size: number;\n\n  // The path this file is being written to. You can modify this in the `'fileBegin'` event in\n  // case you are unhappy with the way formidable generates a temporary path for your files.\n  file.path: string;\n\n  // The name this file had according to the uploading client.\n  file.name: string | null;\n\n  // The mime type of this file, according to the uploading client.\n  file.type: string | null;\n\n  // A Date object (or `null`) containing the time this file was last written to.\n  // Mostly here for compatibility with the [W3C File API Draft](http://dev.w3.org/2006/webapi/FileAPI/).\n  file.lastModifiedDate: Date | null;\n\n  // If `options.hash` calculation was set, you can read the hex digest out of this var.\n  file.hash: string | 'sha1' | 'md5' | 'sha256' | null;\n}\n```\n\n#### file.toJSON()\n\nThis method returns a JSON-representation of the file, allowing you to\n`JSON.stringify()` the file which is useful for logging and responding\nto requests.\n\n### Events\n\n#### `'progress'`\n\nEmitted after each incoming chunk of data that has been parsed. Can be used to roll your own progress bar.\n\n```js\nform.on('progress', (bytesReceived, bytesExpected) => {});\n```\n\n#### `'field'`\n\nEmitted whenever a field / value pair has been received.\n\n```js\nform.on('field', (name, value) => {});\n```\n\n#### `'fileBegin'`\n\nEmitted whenever a new file is detected in the upload stream. Use this event if\nyou want to stream the file to somewhere else while buffering the upload on\nthe file system.\n\n```js\nform.on('fileBegin', (name, file) => {});\n```\n\n#### `'file'`\n\nEmitted whenever a field / file pair has been received. `file` is an instance of `File`.\n\n```js\nform.on('file', (name, file) => {});\n```\n\n#### `'error'`\n\nEmitted when there is an error processing the incoming form. A request that experiences an error is automatically paused, you will have to manually call `request.resume()` if you want the request to continue firing `'data'` events.\n\n```js\nform.on('error', (err) => {});\n```\n\n#### `'aborted'`\n\nEmitted when the request was aborted by the user. Right now this can be due to a 'timeout' or 'close' event on the socket. After this event is emitted, an `error` event will follow. In the future there will be a separate 'timeout' event (needs a change in the node core).\n\n```js\nform.on('aborted', () => {});\n```\n\n#### `'end'`\n\nEmitted when the entire request has been received, and all contained files have finished flushing to disk. This is a great place for you to send your response.\n\n```js\nform.on('end', () => {});\n```\n\n## Ports & Credits\n\n- [multipart-parser](http://github.com/FooBarWidget/multipart-parser): a C++ parser based on formidable\n- [Ryan Dahl](http://twitter.com/ryah) for his work on [http-parser](http://github.com/ry/http-parser) which heavily inspired the initial `multipart_parser.js`.\n\n## Contributing\n\nIf the documentation is unclear or has a typo, please click on the page's `Edit`\nbutton (pencil icon) and suggest a correction. If you would like to help us fix a bug or add a new feature, please check our\n[Contributing Guide](./CONTRIBUTING.md). Pull requests are welcome!\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://twitter.com/felixge\"><img src=\"https://avatars3.githubusercontent.com/u/15000?s=460&v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Felix Geisendörfer</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=felixge\" title=\"Code\">💻</a> <a href=\"#design-felixge\" title=\"Design\">🎨</a> <a href=\"#ideas-felixge\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=felixge\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://tunnckoCore.com\"><img src=\"https://avatars3.githubusercontent.com/u/5038030?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Charlike Mike Reagent</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AtunnckoCore\" title=\"Bug reports\">🐛</a> <a href=\"#infra-tunnckoCore\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#design-tunnckoCore\" title=\"Design\">🎨</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Code\">💻</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Documentation\">📖</a> <a href=\"#example-tunnckoCore\" title=\"Examples\">💡</a> <a href=\"#ideas-tunnckoCore\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-tunnckoCore\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/kedarv\"><img src=\"https://avatars1.githubusercontent.com/u/1365665?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kedar</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=kedarv\" title=\"Code\">💻</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=kedarv\" title=\"Tests\">⚠️</a> <a href=\"#question-kedarv\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Akedarv\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/GrosSacASac\"><img src=\"https://avatars0.githubusercontent.com/u/5721194?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Walle Cyril</b></sub></a><br /><a href=\"#question-GrosSacASac\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AGrosSacASac\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=GrosSacASac\" title=\"Code\">💻</a> <a href=\"#financial-GrosSacASac\" title=\"Financial\">💵</a> <a href=\"#ideas-GrosSacASac\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-GrosSacASac\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/xarguments\"><img src=\"https://avatars2.githubusercontent.com/u/40522463?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Xargs</b></sub></a><br /><a href=\"#question-xarguments\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Axarguments\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=xarguments\" title=\"Code\">💻</a> <a href=\"#maintenance-xarguments\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Amit-A\"><img src=\"https://avatars1.githubusercontent.com/u/7987238?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Amit-A</b></sub></a><br /><a href=\"#question-Amit-A\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AAmit-A\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=Amit-A\" title=\"Code\">💻</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://charmander.me/\"><img src=\"https://avatars1.githubusercontent.com/u/1889843?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Charmander</b></sub></a><br /><a href=\"#question-charmander\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Acharmander\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=charmander\" title=\"Code\">💻</a> <a href=\"#ideas-charmander\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-charmander\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/dylan_piercey\"><img src=\"https://avatars2.githubusercontent.com/u/4985201?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Dylan Piercey</b></sub></a><br /><a href=\"#ideas-DylanPiercey\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"http://ochrona.jawne.info.pl\"><img src=\"https://avatars1.githubusercontent.com/u/3618479?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Adam Dobrawy</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Aad-m\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=ad-m\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/amitrohatgi\"><img src=\"https://avatars3.githubusercontent.com/u/12177021?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>amitrohatgi</b></sub></a><br /><a href=\"#ideas-amitrohatgi\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/fengxinming\"><img src=\"https://avatars2.githubusercontent.com/u/6262382?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jesse Feng</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Afengxinming\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://qtmsheep.com\"><img src=\"https://avatars1.githubusercontent.com/u/7271496?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Nathanael Demacon</b></sub></a><br /><a href=\"#question-quantumsheep\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=quantumsheep\" title=\"Code\">💻</a> <a href=\"https://github.com/node-formidable/node-formidable/pulls?q=is%3Apr+reviewed-by%3Aquantumsheep\" title=\"Reviewed Pull Requests\">👀</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/MunMunMiao\"><img src=\"https://avatars1.githubusercontent.com/u/18216142?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>MunMunMiao</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AMunMunMiao\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/gabipetrovay\"><img src=\"https://avatars0.githubusercontent.com/u/1170398?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Gabriel Petrovay</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Agabipetrovay\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=gabipetrovay\" title=\"Code\">💻</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\n## License\n\nFormidable is licensed under the [MIT License][license-url].\n\n<!-- badges -->\n\n[codestyle-url]: https://github.com/airbnb/javascript\n[codestyle-img]: https://badgen.net/badge/code%20style/airbnb%20%2B%20prettier/ff5a5f?icon=airbnb&cache=300\n[codecov-url]: https://codecov.io/gh/node-formidable/node-formidable\n[codecov-img]: https://badgen.net/codecov/c/github/node-formidable/node-formidable/master?icon=codecov\n[build-img]: https://badgen.net/github/checks/node-formidable/node-formidable?label=build&icon=github\n[build-url]: https://github.com/node-formidable/node-formidable/actions?query=workflow%3Anodejs\n[npmv-canary-img]: https://badgen.net/npm/v/formidable/canary?icon=npm\n[npmv-img]: https://badgen.net/npm/v/formidable?icon=npm\n[npmv-url]: https://npmjs.com/package/formidable\n[license-img]: https://badgen.net/npm/license/formidable\n[license-url]: https://github.com/node-formidable/node-formidable/blob/master/LICENSE\n[chat-img]: https://badgen.net/badge/chat/on%20gitter/46BC99?icon=gitter\n[chat-url]: https://gitter.im/node-formidable/Lobby\n[libera-manifesto-url]: https://liberamanifesto.com\n[libera-manifesto-img]: https://badgen.net/badge/libera/manifesto/grey\n[renovateapp-url]: https://renovatebot.com\n[renovateapp-img]: https://badgen.net/badge/renovate/enabled/green?cache=300\n[prs-welcome-img]: https://badgen.net/badge/PRs/welcome/green?cache=300\n[prs-welcome-url]: http://makeapullrequest.com\n[twitter-url]: https://twitter.com/tunnckoCore\n[twitter-img]: https://badgen.net/twitter/follow/tunnckoCore?icon=twitter&color=1da1f2&cache=300\n","readmeFilename":"README.md","gitHead":"7970ab1dca6e65c530e5b3aed15fa6dcb6dd5ea4","bugs":{"url":"https://github.com/node-formidable/node-formidable/issues"},"_id":"formidable@2.0.0-canary.20200129.32","_nodeVersion":"12.14.0","_npmVersion":"6.13.4","dist":{"integrity":"sha512-jeRANkKf986UkrCxgGjxWS125QlptN9HquunObpb7MLB/n1g5KNDmRHtdaAQgN4lbskqj9YRBBtseQR/Y3q14g==","shasum":"dce6e1a7ced7725d8a0b82eef7dc62d0fab365c1","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-2.0.0-canary.20200129.32.tgz","fileCount":12,"unpackedSize":60768,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeMdAQCRA9TVsSAnZWagAAi4EP/jwER/IHXajrwfW3lAWY\nhiO0P2rlf48DYqnV4+sICN8lYE7Mn1SRrmbvWBhAdtCs5A1EzDb+Pchuc2tc\n4HiBPwclW0neOv8CowCkEVeIR1CwAEFVbXHrE951K1D9zyI/QCHHdd8PENiU\nprhCoCkWEwcCEoYyF4wyCWyxTBC4VC1/3KvAHUQFgRo5MFI+ucNhz5EqVK0D\nBr71mTsf5Q7x7qMonBrVl8H83Vfwq5JKngtu7HR1HeK4sVBJuM8XrtE0yxCz\nKisj3Kn+etV26l4qMCoR+LLKZEJIAvT1A8AGmUJEBFBvFZaeUfEpm2HOe1cm\n5DRnH2jJjwCwq6CEAExHYcYzPIFhPcOuMsPiosDzkLRCSWEsNQwW2ZJ/zy8j\nH28uiATSWgT4V78u2X7ojU5n5VtANarwp8P2y14e72rrYPoZ5HSHzlgLv34+\nf+hRgGKKQE4BuZcSuPyT4LSlZIdn6xFSX4Qxn1m4O1STqGJ6q2YjWBN59PCY\nbLrn//a54YN4gvZ9thMNRZSgWdXCCyfAAQYuPnIBmhS36peFNXhl65JBQEQ7\niHpK6StZA+uXOinaC+2df6mC6AGdtF+kxFZYcBqxj0d/fVxZRf+18xqTEWuv\n/AyyJxL9lOY2rVeek/f5EzsTc6v6bieBX4DwWeU8cNO8GddyHA6SjVlHzSPx\nlKKp\r\n=cA2n\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"chalkerx@gmail.com","name":"chalker"},{"email":"felix@debuggable.com","name":"felixge"},{"email":"npmspam@geekhood.net","name":"kornel"},{"email":"nathanael.dmc@outlook.fr","name":"quantumsheep"},{"email":"superjoe30@gmail.com","name":"superjoe"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"tim@fostle.com","name":"tim-smart"},{"email":"mameto2011@gmail.com","name":"tunnckocore"},{"email":"super.ludiq@gmail.com","name":"vanchoy"},{"email":"xargs@disroot.org","name":"xargs"}],"_npmUser":{"name":"tunnckocore","email":"opensource@tunnckocore.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formidable_2.0.0-canary.20200129.32_1580322831876_0.7314079292535549"},"_hasShrinkwrap":false},"2.0.0-dev.20200130.1":{"name":"formidable","version":"2.0.0-dev.20200130.1","license":"MIT","description":"A node.js module for parsing form data, especially file uploads.","homepage":"https://github.com/node-formidable/node-formidable","funding":"https://ko-fi.com/tunnckoCore/commissions","repository":{"type":"git","url":"git+https://github.com/node-formidable/node-formidable.git"},"main":"./src/index.js","publishConfig":{"access":"public","tag":"dev"},"scripts":{"cleanup":"rm -rf test/tmp","fmt":"prettier '**/*.{md,js,json}' --write","lint":"eslint . --cache --fix --quiet --format codeframe","pretest":"yarn run cleanup && mkdir test/tmp","test":"node test/run.js","pretest:ci":"yarn pretest","test:ci":"nyc node test/run.js"},"dependencies":{"dezalgo":"^1.0.3","once":"^1.4.0"},"devDependencies":{"@tunnckocore/prettier-config":"^1.2.0","eslint":"^6.8.0","eslint-config-airbnb-base":"^14.0.0","eslint-config-prettier":"^6.10.0","eslint-plugin-import":"^2.20.0","eslint-plugin-prettier":"^3.1.2","jest":"^25.1.0","koa":"^2.11.0","nyc":"^15.0.0","prettier":"^1.19.1","prettier-plugin-pkgjson":"^0.2.0","request":"^2.88.0","supertest":"^4.0.2","urun":"^0.0.8","utest":"^0.0.8"},"readme":"<p align=\"center\">\n  <img alt=\"node formidable logo\" src=\"./logo.png\" />\n</p>\n\n# formidable [![npm version][npmv-img]][npmv-url] [![MIT license][license-img]][license-url] [![Libera Manifesto][libera-manifesto-img]][libera-manifesto-url]\n\n> A Node.js module for parsing form data, especially file uploads.\n\n[![Code style][codestyle-img]][codestyle-url]\n[![build status][build-img]][build-url]\n[![codecoverage][codecov-img]][codecov-url]\n[![Renovate App Status][renovateapp-img]][renovateapp-url]\n[![Make A Pull Request][prs-welcome-img]][prs-welcome-url]\n[![Twitter][twitter-img]][twitter-url]\n\n## Status: Maintained\n\nThis module was initially developed by [**@felixge**](https://github.com/felixge) for [Transloadit](http://transloadit.com/), a service focused on uploading and encoding images and videos. It has been battle-tested against hundreds of GBs of file uploads from a large variety of clients and is considered production-ready and is used in production for years.\n\nCurrently, we are few maintainers trying to deal with it. :) More contributors are always welcome! :heart:\nJump on [issue #412](https://github.com/felixge/node-formidable/issues/412) if you are interested.\n\n_**Note:** Master is a \"development\" branch - try it with `npm i formidable@canary`.\nDo not expect (for now) things from it to be inside the`latest`\"dist-tag\" in the Npm.\nThe`formidable@latest`is the`v1.2.1` version and probably it will be the last`v1` release!_\n\n_**Note: v2 is coming soon!**_\n\n[![npm version][npmv-canary-img]][npmv-url]\n\n## Highlights\n\n- Fast (~900-2500 mb/sec), streaming multipart parser\n- Automatically writing file uploads to disk\n- Low memory footprint\n- Graceful error handling\n- Very high test coverage\n\n## Install\n\n```sh\nnpm install formidable\n# or the development version\nnpm install formidable@canary\n```\n\nor with Yarn v1/v2\n\n```sh\nyarn add formidable\n# or the development version\nyarn add formidable@canary\n```\n\nThis is a low-level package, and if you're using a high-level framework it may already be included.\n\nHowever, [Express v4](http://expressjs.com) does not include any multipart handling, nor does [body-parser](https://github.com/expressjs/body-parser).\n\nFor `koa` there is [koa-better-body](https://ghub.now.sh/koa-better-body)\nwhich can handle ANY type of body / form-data - JSON, urlencoded, multpart and so on.\nA new major release is coming there too.\n\n## Example\n\nParse an incoming file upload.\n\n```js\nconst http = require('http');\nconst util = require('util');\nconst formidable = require('formidable');\n\nhttp\n  .createServer((req, res) => {\n    if (req.url === '/upload' && req.method.toLowerCase() === 'post') {\n      // parse a file upload\n      const form = formidable();\n\n      form.parse(req, (err, fields, files) => {\n        res.writeHead(200, { 'content-type': 'text/plain' });\n        res.write('received upload:\\n\\n');\n        res.end(util.inspect({ fields: fields, files: files }));\n      });\n\n      return;\n    }\n\n    // show a file upload form\n    res.writeHead(200, { 'content-type': 'text/html' });\n    res.end(`\n      <form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">\n        <input type=\"text\" name=\"title\" /><br/>\n        <input type=\"file\" name=\"upload\" multiple=\"multiple\" /><br/>\n        <input type=\"submit\" value=\"Upload\" />\n      </form>\n    `);\n  })\n  .listen(8080, () => {\n    console.log('Server listening on http://localhost:8080/ ...');\n  });\n```\n\n## Benchmarks\n\nThe benchmark is quite old, from the old codebase. But maybe quite true though.\nPreviously the numbers was around ~500 mb/sec. Currently with moving to\nthe new Node.js Streams API it's faster. You can clearly see the differences\nbetween the Node versions.\n\n_Note: a lot better benchmarking could and should be done in future._\n\nBenchmarked on 8GB RAM, Xeon X3440 (2.53 GHz, 4 cores, 8 threads)\n\n```\n~/github/node-formidable master\n❯ nve --parallel 8 10 12 13 node benchmark/bench-multipart-parser.js\n\n ⬢  Node 8\n\n1261.08 mb/sec\n\n ⬢  Node 10\n\n1113.04 mb/sec\n\n ⬢  Node 12\n\n2107.00 mb/sec\n\n ⬢  Node 13\n\n2566.42 mb/sec\n```\n\n![benchmark January 29th, 2020](./benchmark/2020-01-29_xeon-x3440.png)\n\n## API\n\n### Formidable / IncomingForm\n\nAll shown are equivalent.\n\n_Please pass [`options`](#options) to the function/constructor,\nnot by passing assigning them to the instance `form`_\n\n```js\nconst formidable = require('formidable');\nconst form = formidable(options);\n\n// or\nconst { formidable } = require('formidable');\nconst form = formidable(options);\n\n// or\nconst { IncomingForm } = require('formidable');\nconst form = new IncomingForm(options);\n\n// or\nconst { Formidable } = require('formidable');\nconst form = new Formidable(options);\n```\n\n### Options\n\nSee it's defaults in [src/Formidable.js](./src/Formidable.js#L14-L22) (the `DEFAULT_OPTIONS` constant).\n\n- `options.encoding` **{string}** - default `'utf-8'`; sets encoding for incoming form fields,\n- `options.uploadDir` **{string}** - default `os.tmpdir()`; the directory for placing file uploads in. You can move them later by using `fs.rename()`\n- `options.keepExtensions` **{boolean}** - default `false`; to include the extensions of the original files or not\n- `options.maxFieldsSize` **{number}** - default `20 * 1024 * 1024` (20mb); limit the amount of memory all fields together (except files) can allocate in bytes.\n- `options.maxFieldsSize` **{number}** - default `200 * 1024 * 1024` (200mb); limit the size of uploaded file.\n- `options.maxFields` **{number}** - default `1000`; limit the number of fields that the Querystring parser will decode, set 0 for unlimited\n- `options.hash` **{boolean}** - default `false`; include checksums calculated for incoming files, set this to some hash algorithm, see [crypto.createHash](https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options) for available algorithms\n- `options.multiples` **{boolean}** - default `false`; when you call the `.parse` method, the `files` argument (of the callback) will contain arrays of files for inputs which submit multiple files using the HTML5 `multiple` attribute. Also, the `fields` argument will contain arrays of values for fields that have names ending with '[]'.\n- `options.enabledPlugins` **{array}** - default `['octetstream', 'urlencoded', 'multipart', 'json']`; list of enabled built-in plugins, for custom ones use `form.use(() => {})` before the `.parse()` method, see [plugins](#plugins)\n\n_**Note:** If this value is exceeded, an `'error'` event is emitted._\n\n```js\n// The amount of bytes received for this form so far.\nform.bytesReceived;\n```\n\n```js\n// The expected number of bytes in this form.\nform.bytesExpected;\n```\n\n### .parse(request, callback)\n\nParses an incoming Node.js `request` containing form data.\nIf `callback` is provided, all fields and files are collected and passed to the callback.\n\n```js\nconst formidable = require('formidable');\n\nconst form = formidable({ multiples: true, uploadDir: __dirname });\n\nform.parse(req, (err, fields, files) => {\n  console.log('fields:', fields);\n  console.log('files:', files);\n});\n```\n\nYou may overwrite this method if you are interested in directly accessing the multipart stream. Doing so will disable any `'field'` / `'file'` events processing which would occur otherwise, making you fully responsible for handling the processing.\n\nIn the example below, we listen on couple of events and direct them to the `data` listener,\nso you can do whatever you choose there, based on whether its before the file been emitted,\nthe header value, the header name, on field, on file and etc.\n\nOr the other way could be to just override the `form.onPart` as it's shown a bit later.\n\n```js\nform.once('error', console.error);\n\nform.on('fileBegin', (filename, file) => {\n  form.emit('data', { name: 'fileBegin', filename, value: file });\n});\n\nform.on('file', (filename, file) => {\n  form.emit('data', { name: 'file', key: filename, value: file });\n});\n\nform.on('field', (fieldName, fieldValue) => {\n  form.emit('data', { name: 'field', key: fieldName, value: fieldValue });\n});\n\nform.once('end', () => {\n  console.log('Done!');\n});\n\n// If you want to customize whatever you want...\nform.on('data', ({ name, key, value, buffer, start, end, ...more }) => {\n  if (name === 'partBegin') {\n  }\n  if (name === 'partData') {\n  }\n  if (name === 'headerField') {\n  }\n  if (name === 'headerValue') {\n  }\n  if (name === 'headerEnd') {\n  }\n  if (name === 'headersEnd') {\n  }\n  if (name === 'field') {\n    console.log('field name:', key);\n    console.log('field value:', value);\n  }\n  if (name === 'file') {\n    console.log('file:', key, value);\n  }\n  if (name === 'fileBegin') {\n    console.log('fileBegin:', key, value);\n  }\n});\n```\n\n### .use(plugin: Plugin)\n\nA method that allows you to extend the Formidable library. By default we include 4 plugins,\nwhich esentially are adapters to plug the different built-in parsers.\n\n**The plugins added by this method are always enabled.**\n\n_See [src/plugins/](./src/plugins/) for more detailed look on default plugins._\n\nThe `plugin` param has such signature:\n\n```typescript\nfunction(formidable: Formidable, options: Options): void;\n```\n\nThe architecture is simple. The `plugin` is a function that is passed with\nthe Formidable instance (the `form` across the README examples) and the options.\n\n**Note:** the plugin function's `this` context is also the same instance.\n\n```js\nconst formidable = require('formidable');\n\nconst form = formidable({ keepExtensions: true });\n\nform.use((self, options) => {\n  // self === this === form\n  console.log('woohoo, custom plugin');\n  // do your stuff; check `src/plugins` for inspiration\n});\n\nform.parse(req, (error, fields, files) => {\n  console.log('done!');\n});\n```\n\n**Important to note**, is that inside plugin `this.options`, `self.options` and `options`\nMAY or MAY NOT be the same. General best practice is to always use the `this`, so you can\nlater test your plugin independently and more easily.\n\nIf you want to disable some parsing capabilities of Formidable, you can disable the plugin\nwhich corresponds to the parser. For example, if you want to disable multipart parsing\n(so the [src/parsers/Multipart.js](./src/parsers/Multipart.js) which is used in [src/plugins/multipart.js](./src/plugins/multipart.js)), then you can remove it from\nthe `options.enabledPlugins`, like so\n\n```js\nconst { Formidable } = require('formidable');\n\nconst form = new Formidable({\n  hash: 'sha1',\n  enabledPlugins: ['octetstream', 'querystring', 'json'],\n});\n```\n\n**Be aware** that the order _MAY_ be important too. The names corresponds 1:1\nto files in [src/plugins/](./src/plugins) folder.\n\nPull requests for new built-in plugins MAY be accepted - for example,\nmore advanced querystring parser. Add your plugin as a new file\nin `src/plugins/` folder (lowercased) and follow how the other plugins are made.\n\n### form.onPart\n\nIf you want to use Formidable to only handle certain parts for you, you can do something similar.\nOr see [#387](https://github.com/node-formidable/node-formidable/issues/387) for inspiration,\nyou can for example validate the mime-type.\n\n```js\nconst form = formidable();\n\nform.onPart = (part) => {\n  part.on('data', (buffer) {\n    // do whatever you want here\n  });\n};\n```\n\nFor example, force Formidable to be used only on non-file \"parts\" (i.e., html fields)\n\n```js\nconst form = formidable();\n\nform.onPart = function(part) {\n  // let formidable handle only non-file parts\n  if (part.filename === '' || !part.mime) {\n    // used internally, please do not override!\n    form.handlePart(part);\n  }\n};\n```\n\n### File\n\n```ts\nexport interface File {\n  // The size of the uploaded file in bytes.\n  // If the file is still being uploaded (see `'fileBegin'` event),\n  // this property says how many bytes of the file have been written to disk yet.\n  file.size: number;\n\n  // The path this file is being written to. You can modify this in the `'fileBegin'` event in\n  // case you are unhappy with the way formidable generates a temporary path for your files.\n  file.path: string;\n\n  // The name this file had according to the uploading client.\n  file.name: string | null;\n\n  // The mime type of this file, according to the uploading client.\n  file.type: string | null;\n\n  // A Date object (or `null`) containing the time this file was last written to.\n  // Mostly here for compatibility with the [W3C File API Draft](http://dev.w3.org/2006/webapi/FileAPI/).\n  file.lastModifiedDate: Date | null;\n\n  // If `options.hash` calculation was set, you can read the hex digest out of this var.\n  file.hash: string | 'sha1' | 'md5' | 'sha256' | null;\n}\n```\n\n#### file.toJSON()\n\nThis method returns a JSON-representation of the file, allowing you to\n`JSON.stringify()` the file which is useful for logging and responding\nto requests.\n\n### Events\n\n#### `'progress'`\n\nEmitted after each incoming chunk of data that has been parsed. Can be used to roll your own progress bar.\n\n```js\nform.on('progress', (bytesReceived, bytesExpected) => {});\n```\n\n#### `'field'`\n\nEmitted whenever a field / value pair has been received.\n\n```js\nform.on('field', (name, value) => {});\n```\n\n#### `'fileBegin'`\n\nEmitted whenever a new file is detected in the upload stream. Use this event if\nyou want to stream the file to somewhere else while buffering the upload on\nthe file system.\n\n```js\nform.on('fileBegin', (name, file) => {});\n```\n\n#### `'file'`\n\nEmitted whenever a field / file pair has been received. `file` is an instance of `File`.\n\n```js\nform.on('file', (name, file) => {});\n```\n\n#### `'error'`\n\nEmitted when there is an error processing the incoming form. A request that experiences an error is automatically paused, you will have to manually call `request.resume()` if you want the request to continue firing `'data'` events.\n\n```js\nform.on('error', (err) => {});\n```\n\n#### `'aborted'`\n\nEmitted when the request was aborted by the user. Right now this can be due to a 'timeout' or 'close' event on the socket. After this event is emitted, an `error` event will follow. In the future there will be a separate 'timeout' event (needs a change in the node core).\n\n```js\nform.on('aborted', () => {});\n```\n\n#### `'end'`\n\nEmitted when the entire request has been received, and all contained files have finished flushing to disk. This is a great place for you to send your response.\n\n```js\nform.on('end', () => {});\n```\n\n## Ports & Credits\n\n- [multipart-parser](http://github.com/FooBarWidget/multipart-parser): a C++ parser based on formidable\n- [Ryan Dahl](http://twitter.com/ryah) for his work on [http-parser](http://github.com/ry/http-parser) which heavily inspired the initial `multipart_parser.js`.\n\n## Contributing\n\nIf the documentation is unclear or has a typo, please click on the page's `Edit`\nbutton (pencil icon) and suggest a correction. If you would like to help us fix a bug or add a new feature, please check our\n[Contributing Guide](./CONTRIBUTING.md). Pull requests are welcome!\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://twitter.com/felixge\"><img src=\"https://avatars3.githubusercontent.com/u/15000?s=460&v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Felix Geisendörfer</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=felixge\" title=\"Code\">💻</a> <a href=\"#design-felixge\" title=\"Design\">🎨</a> <a href=\"#ideas-felixge\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=felixge\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://tunnckoCore.com\"><img src=\"https://avatars3.githubusercontent.com/u/5038030?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Charlike Mike Reagent</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AtunnckoCore\" title=\"Bug reports\">🐛</a> <a href=\"#infra-tunnckoCore\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#design-tunnckoCore\" title=\"Design\">🎨</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Code\">💻</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Documentation\">📖</a> <a href=\"#example-tunnckoCore\" title=\"Examples\">💡</a> <a href=\"#ideas-tunnckoCore\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-tunnckoCore\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/kedarv\"><img src=\"https://avatars1.githubusercontent.com/u/1365665?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kedar</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=kedarv\" title=\"Code\">💻</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=kedarv\" title=\"Tests\">⚠️</a> <a href=\"#question-kedarv\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Akedarv\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/GrosSacASac\"><img src=\"https://avatars0.githubusercontent.com/u/5721194?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Walle Cyril</b></sub></a><br /><a href=\"#question-GrosSacASac\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AGrosSacASac\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=GrosSacASac\" title=\"Code\">💻</a> <a href=\"#financial-GrosSacASac\" title=\"Financial\">💵</a> <a href=\"#ideas-GrosSacASac\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-GrosSacASac\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/xarguments\"><img src=\"https://avatars2.githubusercontent.com/u/40522463?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Xargs</b></sub></a><br /><a href=\"#question-xarguments\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Axarguments\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=xarguments\" title=\"Code\">💻</a> <a href=\"#maintenance-xarguments\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Amit-A\"><img src=\"https://avatars1.githubusercontent.com/u/7987238?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Amit-A</b></sub></a><br /><a href=\"#question-Amit-A\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AAmit-A\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=Amit-A\" title=\"Code\">💻</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://charmander.me/\"><img src=\"https://avatars1.githubusercontent.com/u/1889843?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Charmander</b></sub></a><br /><a href=\"#question-charmander\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Acharmander\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=charmander\" title=\"Code\">💻</a> <a href=\"#ideas-charmander\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-charmander\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/dylan_piercey\"><img src=\"https://avatars2.githubusercontent.com/u/4985201?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Dylan Piercey</b></sub></a><br /><a href=\"#ideas-DylanPiercey\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"http://ochrona.jawne.info.pl\"><img src=\"https://avatars1.githubusercontent.com/u/3618479?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Adam Dobrawy</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Aad-m\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=ad-m\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/amitrohatgi\"><img src=\"https://avatars3.githubusercontent.com/u/12177021?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>amitrohatgi</b></sub></a><br /><a href=\"#ideas-amitrohatgi\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/fengxinming\"><img src=\"https://avatars2.githubusercontent.com/u/6262382?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jesse Feng</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Afengxinming\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://qtmsheep.com\"><img src=\"https://avatars1.githubusercontent.com/u/7271496?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Nathanael Demacon</b></sub></a><br /><a href=\"#question-quantumsheep\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=quantumsheep\" title=\"Code\">💻</a> <a href=\"https://github.com/node-formidable/node-formidable/pulls?q=is%3Apr+reviewed-by%3Aquantumsheep\" title=\"Reviewed Pull Requests\">👀</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/MunMunMiao\"><img src=\"https://avatars1.githubusercontent.com/u/18216142?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>MunMunMiao</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AMunMunMiao\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/gabipetrovay\"><img src=\"https://avatars0.githubusercontent.com/u/1170398?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Gabriel Petrovay</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Agabipetrovay\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=gabipetrovay\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Elzair\"><img src=\"https://avatars0.githubusercontent.com/u/2352818?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Philip Woods</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=Elzair\" title=\"Code\">💻</a> <a href=\"#ideas-Elzair\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\n## License\n\nFormidable is licensed under the [MIT License][license-url].\n\n<!-- badges -->\n\n[codestyle-url]: https://github.com/airbnb/javascript\n[codestyle-img]: https://badgen.net/badge/code%20style/airbnb%20%2B%20prettier/ff5a5f?icon=airbnb&cache=300\n[codecov-url]: https://codecov.io/gh/node-formidable/node-formidable\n[codecov-img]: https://badgen.net/codecov/c/github/node-formidable/node-formidable/master?icon=codecov\n[build-img]: https://badgen.net/github/checks/node-formidable/node-formidable?label=build&icon=github\n[build-url]: https://github.com/node-formidable/node-formidable/actions?query=workflow%3Anodejs\n[npmv-canary-img]: https://badgen.net/npm/v/formidable/canary?icon=npm\n[npmv-img]: https://badgen.net/npm/v/formidable?icon=npm\n[npmv-url]: https://npmjs.com/package/formidable\n[license-img]: https://badgen.net/npm/license/formidable\n[license-url]: https://github.com/node-formidable/node-formidable/blob/master/LICENSE\n[chat-img]: https://badgen.net/badge/chat/on%20gitter/46BC99?icon=gitter\n[chat-url]: https://gitter.im/node-formidable/Lobby\n[libera-manifesto-url]: https://liberamanifesto.com\n[libera-manifesto-img]: https://badgen.net/badge/libera/manifesto/grey\n[renovateapp-url]: https://renovatebot.com\n[renovateapp-img]: https://badgen.net/badge/renovate/enabled/green?cache=300\n[prs-welcome-img]: https://badgen.net/badge/PRs/welcome/green?cache=300\n[prs-welcome-url]: http://makeapullrequest.com\n[twitter-url]: https://twitter.com/tunnckoCore\n[twitter-img]: https://badgen.net/twitter/follow/tunnckoCore?icon=twitter&color=1da1f2&cache=300\n","readmeFilename":"README.md","gitHead":"b44bcbd3f061a5bc025c1b0ed584b712851c5be5","bugs":{"url":"https://github.com/node-formidable/node-formidable/issues"},"_id":"formidable@2.0.0-dev.20200130.1","_nodeVersion":"12.14.0","_npmVersion":"6.13.4","dist":{"integrity":"sha512-lkCyK7jh+5y+kCFlXirAN07Ecr9V33UBiJVlxdtemM9gKdIQda3ZBNyfzG7qow8HN7UtnkJYMlcg0FNP8XiyCA==","shasum":"3df3ee553722ccde7017c816daae40b774d24753","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-2.0.0-dev.20200130.1.tgz","fileCount":71,"unpackedSize":2073034,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeMi5SCRA9TVsSAnZWagAAP1kP/3cwj7T7yvXXxLX5bzGk\nA2yXSCcM0ypdp4icFAEPCO8ZPE9MjBoRp2h9XlsdNaiPu0EPI/ebCJacK0A/\nHZP+IY2j5J4rffQhyESwUsr7jlLRxbRNxSf3Tw4BkqKlEuURhsPBumEZN2/f\n2bXZzAFV6n50PR0kvVlVgCG1yNOopkoK+njkkBoegQy3OW+KdD2XEiaP6VFg\n4n0xOwwwA3xBTNgDu8eBRUjte5v9kOSBeKyTQ2EXqGPxdkQvsMUohWGaTIAD\nToJogfu+mA6bmmnkiGmaIyYmj0F9Jv2gLYhCmSjU5KP3ZO+1eEAS92+qN6vb\nufoILpn0l+uoP+8peKNn6y9k06XGOpsPQo5IKgyy+I9/0u7dAeVFRzpY97Aq\nj/5nqK3OGa8s1mQBbxox4jC2ixz7Lo819KFggslssgLeDlzRq81QwNXmFk0L\nZiu5wDgugLnObQEDY4A6i74+4q90d8ggd0yD/IzLAjUB6v775+KazsaSqgzq\nGsnzVseUMuq/UmZh+1dzYXsyznDlWu0j2nRIlwkzffPNbPlkU3LdDTVJtWut\nsmpwAYnnBbv7lBx2/pFp1m5ulomtyTBO6UqXn3CLRp3E2IXcAkgvyvObFmcT\ngwrN5uRbML9fl8ISVKcU0lKwMzr0XesC8xLpVeqF+hEEDAPGpVJ3OdHWx3ew\n7LOr\r\n=d5wL\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"chalkerx@gmail.com","name":"chalker"},{"email":"felix@debuggable.com","name":"felixge"},{"email":"npmspam@geekhood.net","name":"kornel"},{"email":"nathanael.dmc@outlook.fr","name":"quantumsheep"},{"email":"superjoe30@gmail.com","name":"superjoe"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"tim@fostle.com","name":"tim-smart"},{"email":"mameto2011@gmail.com","name":"tunnckocore"},{"email":"super.ludiq@gmail.com","name":"vanchoy"},{"email":"xargs@disroot.org","name":"xargs"}],"_npmUser":{"name":"tunnckocore","email":"opensource@tunnckocore.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formidable_2.0.0-dev.20200130.1_1580346958763_0.24242945862713872"},"_hasShrinkwrap":false},"2.0.0-canary.20200131.1":{"name":"formidable","version":"2.0.0-canary.20200131.1","license":"MIT","description":"A node.js module for parsing form data, especially file uploads.","homepage":"https://github.com/node-formidable/node-formidable","funding":"https://ko-fi.com/tunnckoCore/commissions","repository":{"type":"git","url":"git+https://github.com/node-formidable/node-formidable.git"},"main":"./src/index.js","publishConfig":{"access":"public","tag":"canary"},"scripts":{"bench":"node benchmark","fmt":"yarn run fmt:prepare '**/*'","fmt:prepare":"prettier --write","lint":"yarn run lint:prepare .","lint:prepare":"eslint --cache --fix --quiet --format codeframe","reinstall":"rm -rf node_modules yarn.lock && yarn","pretest":"rm -rf test/tmp && mkdir test/tmp","test":"node test/run.js","pretest:ci":"yarn pretest","test:ci":"nyc node test/run.js"},"devDependencies":{"@commitlint/cli":"^8.3.5","@commitlint/config-conventional":"^8.3.4","@tunnckocore/prettier-config":"^1.2.0","eslint":"^6.8.0","eslint-config-airbnb-base":"^14.0.0","eslint-config-prettier":"^6.10.0","eslint-plugin-import":"^2.20.0","eslint-plugin-prettier":"^3.1.2","husky":"^4.2.1","jest":"^25.1.0","lint-staged":"^10.0.6","nyc":"^15.0.0","prettier":"^1.19.1","prettier-plugin-pkgjson":"^0.2.0","request":"^2.88.0","urun":"^0.0.8","utest":"^0.0.8"},"husky":{"hooks":{"pre-commit":"lint-staged","commit-msg":"commitlint -E HUSKY_GIT_PARAMS"}},"commitlint":{"extends":["@commitlint/config-conventional"]},"lint-staged":{"!*.{js,jsx,ts,tsx}":["yarn run fmt:prepare"],"*.{js,jsx,ts,tsx}":["yarn run lint"]},"readme":"<p align=\"center\">\n  <img alt=\"node formidable logo\" src=\"./logo.png\" />\n</p>\n\n# formidable [![npm version][npmv-img]][npmv-url] [![MIT license][license-img]][license-url] [![Libera Manifesto][libera-manifesto-img]][libera-manifesto-url]\n\n> A Node.js module for parsing form data, especially file uploads.\n\n[![Code style][codestyle-img]][codestyle-url]\n[![build status][build-img]][build-url]\n[![codecoverage][codecov-img]][codecov-url]\n[![Renovate App Status][renovateapp-img]][renovateapp-url]\n[![Make A Pull Request][prs-welcome-img]][prs-welcome-url]\n[![Twitter][twitter-img]][twitter-url]\n\n## Status: Maintained [![npm version][npmv-canary-img]][npmv-url] [![npm version][npmv-dev-img]][npmv-url]\n\nThis module was initially developed by\n[**@felixge**](https://github.com/felixge) for\n[Transloadit](http://transloadit.com/), a service focused on uploading and\nencoding images and videos. It has been battle-tested against hundreds of GBs of\nfile uploads from a large variety of clients and is considered production-ready\nand is used in production for years.\n\nCurrently, we are few maintainers trying to deal with it. :) More contributors\nare always welcome! :heart: Jump on\n[issue #412](https://github.com/felixge/node-formidable/issues/412) if you are\ninterested.\n\n_**Note:** Master is a \"canary\" branch - try it with `npm i formidable@canary`.\nDo not expect (for now) things from it to be inside the`latest`\"dist-tag\" in the\nNpm. The`formidable@latest`is the`v1.2.1` version and probably it will be the\nlast`v1` release!_\n\n_**Note: v2 is coming soon!**_\n\nYou can try the\n[Plugins API](https://github.com/felixge/node-formidable/tree/plugins-api)\n([#545](https://github.com/felixge/node-formidable/pull/545)), which is\navailable through `formidable@dev`.\n\n## Highlights\n\n- Fast (~900-2500 mb/sec), streaming multipart parser\n- Automatically writing file uploads to disk\n- Low memory footprint\n- Graceful error handling\n- Very high test coverage\n\n## Install\n\n```sh\nnpm install formidable\n# or the canary version\nnpm install formidable@canary\n```\n\nor with Yarn v1/v2\n\n```sh\nyarn add formidable\n# or the canary version\nyarn add formidable@canary\n```\n\nThis is a low-level package, and if you're using a high-level framework it may\nalready be included.\n\nHowever, [Express v4](http://expressjs.com) does not include any multipart\nhandling, nor does [body-parser](https://github.com/expressjs/body-parser).\n\nFor `koa` there is [koa-better-body](https://ghub.now.sh/koa-better-body) which\ncan handle ANY type of body / form-data - JSON, urlencoded, multpart and so on.\nA new major release is coming there too.\n\n## Example\n\nParse an incoming file upload.\n\n```js\nconst http = require('http');\nconst util = require('util');\nconst formidable = require('formidable');\n\nhttp\n  .createServer((req, res) => {\n    if (req.url === '/upload' && req.method.toLowerCase() === 'post') {\n      // parse a file upload\n      const form = formidable();\n\n      form.parse(req, (err, fields, files) => {\n        res.writeHead(200, { 'content-type': 'text/plain' });\n        res.write('received upload:\\n\\n');\n        res.end(util.inspect({ fields: fields, files: files }));\n      });\n\n      return;\n    }\n\n    // show a file upload form\n    res.writeHead(200, { 'content-type': 'text/html' });\n    res.end(`\n      <form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">\n        <input type=\"text\" name=\"title\" /><br/>\n        <input type=\"file\" name=\"upload\" multiple=\"multiple\" /><br/>\n        <input type=\"submit\" value=\"Upload\" />\n      </form>\n    `);\n  })\n  .listen(8080, () => {\n    console.log('Server listening on http://localhost:8080/ ...');\n  });\n```\n\n## Benchmarks\n\nThe benchmark is quite old, from the old codebase. But maybe quite true though.\nPreviously the numbers was around ~500 mb/sec. Currently with moving to the new\nNode.js Streams API it's faster. You can clearly see the differences between the\nNode versions.\n\n_Note: a lot better benchmarking could and should be done in future._\n\nBenchmarked on 8GB RAM, Xeon X3440 (2.53 GHz, 4 cores, 8 threads)\n\n```\n~/github/node-formidable master\n❯ nve --parallel 8 10 12 13 node benchmark/bench-multipart-parser.js\n\n ⬢  Node 8\n\n1261.08 mb/sec\n\n ⬢  Node 10\n\n1113.04 mb/sec\n\n ⬢  Node 12\n\n2107.00 mb/sec\n\n ⬢  Node 13\n\n2566.42 mb/sec\n```\n\n![benchmark January 29th, 2020](./benchmark/2020-01-29_xeon-x3440.png)\n\n## API\n\n### Formidable / IncomingForm\n\nAll shown are equivalent.\n\n_Please pass [`options`](#options) to the function/constructor, not by passing\nassigning them to the instance `form`_\n\n```js\nconst formidable = require('formidable');\nconst form = formidable(options);\n\n// or\nconst { formidable } = require('formidable');\nconst form = formidable(options);\n\n// or\nconst { IncomingForm } = require('formidable');\nconst form = new IncomingForm(options);\n\n// or\nconst { Formidable } = require('formidable');\nconst form = new Formidable(options);\n```\n\n### Options\n\nSee it's defaults in [src/Formidable.js](./src/Formidable.js#L14-L22) (the\n`DEFAULT_OPTIONS` constant).\n\n- `options.encoding` **{string}** - default `'utf-8'`; sets encoding for\n  incoming form fields,\n- `options.uploadDir` **{string}** - default `os.tmpdir()`; the directory for\n  placing file uploads in. You can move them later by using `fs.rename()`\n- `options.keepExtensions` **{boolean}** - default `false`; to include the\n  extensions of the original files or not\n- `options.maxFileSize` **{number}** - default `200 * 1024 * 1024` (200mb);\n  limit the size of uploaded file.\n- `options.maxFields` **{number}** - default `1000`; limit the number of fields\n  that the Querystring parser will decode, set 0 for unlimited\n- `options.maxFieldsSize` **{number}** - default `20 * 1024 * 1024` (20mb);\n  limit the amount of memory all fields together (except files) can allocate in\n  bytes.\n- `options.hash` **{boolean}** - default `false`; include checksums calculated\n  for incoming files, set this to some hash algorithm, see\n  [crypto.createHash](https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options)\n  for available algorithms\n- `options.multiples` **{boolean}** - default `false`; when you call the\n  `.parse` method, the `files` argument (of the callback) will contain arrays of\n  files for inputs which submit multiple files using the HTML5 `multiple`\n  attribute. Also, the `fields` argument will contain arrays of values for\n  fields that have names ending with '[]'.\n\n_**Note:** If this value is exceeded, an `'error'` event is emitted._\n\n```js\n// The amount of bytes received for this form so far.\nform.bytesReceived;\n```\n\n```js\n// The expected number of bytes in this form.\nform.bytesExpected;\n```\n\n### .parse(request, callback)\n\nParses an incoming Node.js `request` containing form data. If `callback` is\nprovided, all fields and files are collected and passed to the callback.\n\n```js\nconst formidable = require('formidable');\n\nconst form = formidable({ multiples: true, uploadDir: __dirname });\n\nform.parse(req, (err, fields, files) => {\n  console.log('fields:', fields);\n  console.log('files:', files);\n});\n```\n\nYou may overwrite this method if you are interested in directly accessing the\nmultipart stream. Doing so will disable any `'field'` / `'file'` events\nprocessing which would occur otherwise, making you fully responsible for\nhandling the processing.\n\nIn the example below, we listen on couple of events and direct them to the\n`data` listener, so you can do whatever you choose there, based on whether its\nbefore the file been emitted, the header value, the header name, on field, on\nfile and etc.\n\nOr the other way could be to just override the `form.onPart` as it's shown a bit\nlater.\n\n```js\nform.once('error', console.error);\n\nform.on('fileBegin', (filename, file) => {\n  form.emit('data', { name: 'fileBegin', filename, value: file });\n});\n\nform.on('file', (filename, file) => {\n  form.emit('data', { name: 'file', key: filename, value: file });\n});\n\nform.on('field', (fieldName, fieldValue) => {\n  form.emit('data', { name: 'field', key: fieldName, value: fieldValue });\n});\n\nform.once('end', () => {\n  console.log('Done!');\n});\n\n// If you want to customize whatever you want...\nform.on('data', ({ name, key, value, buffer, start, end, ...more }) => {\n  if (name === 'partBegin') {\n  }\n  if (name === 'partData') {\n  }\n  if (name === 'headerField') {\n  }\n  if (name === 'headerValue') {\n  }\n  if (name === 'headerEnd') {\n  }\n  if (name === 'headersEnd') {\n  }\n  if (name === 'field') {\n    console.log('field name:', key);\n    console.log('field value:', value);\n  }\n  if (name === 'file') {\n    console.log('file:', key, value);\n  }\n  if (name === 'fileBegin') {\n    console.log('fileBegin:', key, value);\n  }\n});\n```\n\n### form.onPart\n\nIf you want to use Formidable to only handle certain parts for you, you can do\nsomething similar. Or see\n[#387](https://github.com/node-formidable/node-formidable/issues/387) for\ninspiration, you can for example validate the mime-type.\n\n```js\nconst form = formidable();\n\nform.onPart = (part) => {\n  part.on('data', (buffer) {\n    // do whatever you want here\n  });\n};\n```\n\nFor example, force Formidable to be used only on non-file \"parts\" (i.e., html\nfields)\n\n```js\nconst form = formidable();\n\nform.onPart = function(part) {\n  // let formidable handle only non-file parts\n  if (part.filename === '' || !part.mime) {\n    // used internally, please do not override!\n    form.handlePart(part);\n  }\n};\n```\n\n### File\n\n```ts\nexport interface File {\n  // The size of the uploaded file in bytes.\n  // If the file is still being uploaded (see `'fileBegin'` event),\n  // this property says how many bytes of the file have been written to disk yet.\n  file.size: number;\n\n  // The path this file is being written to. You can modify this in the `'fileBegin'` event in\n  // case you are unhappy with the way formidable generates a temporary path for your files.\n  file.path: string;\n\n  // The name this file had according to the uploading client.\n  file.name: string | null;\n\n  // The mime type of this file, according to the uploading client.\n  file.type: string | null;\n\n  // A Date object (or `null`) containing the time this file was last written to.\n  // Mostly here for compatibility with the [W3C File API Draft](http://dev.w3.org/2006/webapi/FileAPI/).\n  file.lastModifiedDate: Date | null;\n\n  // If `options.hash` calculation was set, you can read the hex digest out of this var.\n  file.hash: string | 'sha1' | 'md5' | 'sha256' | null;\n}\n```\n\n#### file.toJSON()\n\nThis method returns a JSON-representation of the file, allowing you to\n`JSON.stringify()` the file which is useful for logging and responding to\nrequests.\n\n### Events\n\n#### `'progress'`\n\nEmitted after each incoming chunk of data that has been parsed. Can be used to\nroll your own progress bar.\n\n```js\nform.on('progress', (bytesReceived, bytesExpected) => {});\n```\n\n#### `'field'`\n\nEmitted whenever a field / value pair has been received.\n\n```js\nform.on('field', (name, value) => {});\n```\n\n#### `'fileBegin'`\n\nEmitted whenever a new file is detected in the upload stream. Use this event if\nyou want to stream the file to somewhere else while buffering the upload on the\nfile system.\n\n```js\nform.on('fileBegin', (name, file) => {});\n```\n\n#### `'file'`\n\nEmitted whenever a field / file pair has been received. `file` is an instance of\n`File`.\n\n```js\nform.on('file', (name, file) => {});\n```\n\n#### `'error'`\n\nEmitted when there is an error processing the incoming form. A request that\nexperiences an error is automatically paused, you will have to manually call\n`request.resume()` if you want the request to continue firing `'data'` events.\n\n```js\nform.on('error', (err) => {});\n```\n\n#### `'aborted'`\n\nEmitted when the request was aborted by the user. Right now this can be due to a\n'timeout' or 'close' event on the socket. After this event is emitted, an\n`error` event will follow. In the future there will be a separate 'timeout'\nevent (needs a change in the node core).\n\n```js\nform.on('aborted', () => {});\n```\n\n#### `'end'`\n\nEmitted when the entire request has been received, and all contained files have\nfinished flushing to disk. This is a great place for you to send your response.\n\n```js\nform.on('end', () => {});\n```\n\n## Ports & Credits\n\n- [multipart-parser](http://github.com/FooBarWidget/multipart-parser): a C++\n  parser based on formidable\n- [Ryan Dahl](http://twitter.com/ryah) for his work on\n  [http-parser](http://github.com/ry/http-parser) which heavily inspired the\n  initial `multipart_parser.js`.\n\n## Contributing\n\nIf the documentation is unclear or has a typo, please click on the page's `Edit`\nbutton (pencil icon) and suggest a correction. If you would like to help us fix\na bug or add a new feature, please check our\n[Contributing Guide](./CONTRIBUTING.md). Pull requests are welcome!\n\nThanks goes to these wonderful people\n([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://twitter.com/felixge\"><img src=\"https://avatars3.githubusercontent.com/u/15000?s=460&v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Felix Geisendörfer</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=felixge\" title=\"Code\">💻</a> <a href=\"#design-felixge\" title=\"Design\">🎨</a> <a href=\"#ideas-felixge\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=felixge\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://tunnckoCore.com\"><img src=\"https://avatars3.githubusercontent.com/u/5038030?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Charlike Mike Reagent</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AtunnckoCore\" title=\"Bug reports\">🐛</a> <a href=\"#infra-tunnckoCore\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#design-tunnckoCore\" title=\"Design\">🎨</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Code\">💻</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Documentation\">📖</a> <a href=\"#example-tunnckoCore\" title=\"Examples\">💡</a> <a href=\"#ideas-tunnckoCore\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-tunnckoCore\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/kedarv\"><img src=\"https://avatars1.githubusercontent.com/u/1365665?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kedar</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=kedarv\" title=\"Code\">💻</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=kedarv\" title=\"Tests\">⚠️</a> <a href=\"#question-kedarv\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Akedarv\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/GrosSacASac\"><img src=\"https://avatars0.githubusercontent.com/u/5721194?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Walle Cyril</b></sub></a><br /><a href=\"#question-GrosSacASac\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AGrosSacASac\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=GrosSacASac\" title=\"Code\">💻</a> <a href=\"#financial-GrosSacASac\" title=\"Financial\">💵</a> <a href=\"#ideas-GrosSacASac\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-GrosSacASac\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/xarguments\"><img src=\"https://avatars2.githubusercontent.com/u/40522463?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Xargs</b></sub></a><br /><a href=\"#question-xarguments\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Axarguments\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=xarguments\" title=\"Code\">💻</a> <a href=\"#maintenance-xarguments\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Amit-A\"><img src=\"https://avatars1.githubusercontent.com/u/7987238?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Amit-A</b></sub></a><br /><a href=\"#question-Amit-A\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AAmit-A\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=Amit-A\" title=\"Code\">💻</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://charmander.me/\"><img src=\"https://avatars1.githubusercontent.com/u/1889843?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Charmander</b></sub></a><br /><a href=\"#question-charmander\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Acharmander\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=charmander\" title=\"Code\">💻</a> <a href=\"#ideas-charmander\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-charmander\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/dylan_piercey\"><img src=\"https://avatars2.githubusercontent.com/u/4985201?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Dylan Piercey</b></sub></a><br /><a href=\"#ideas-DylanPiercey\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"http://ochrona.jawne.info.pl\"><img src=\"https://avatars1.githubusercontent.com/u/3618479?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Adam Dobrawy</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Aad-m\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=ad-m\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/amitrohatgi\"><img src=\"https://avatars3.githubusercontent.com/u/12177021?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>amitrohatgi</b></sub></a><br /><a href=\"#ideas-amitrohatgi\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/fengxinming\"><img src=\"https://avatars2.githubusercontent.com/u/6262382?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jesse Feng</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Afengxinming\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://qtmsheep.com\"><img src=\"https://avatars1.githubusercontent.com/u/7271496?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Nathanael Demacon</b></sub></a><br /><a href=\"#question-quantumsheep\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=quantumsheep\" title=\"Code\">💻</a> <a href=\"https://github.com/node-formidable/node-formidable/pulls?q=is%3Apr+reviewed-by%3Aquantumsheep\" title=\"Reviewed Pull Requests\">👀</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/MunMunMiao\"><img src=\"https://avatars1.githubusercontent.com/u/18216142?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>MunMunMiao</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AMunMunMiao\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/gabipetrovay\"><img src=\"https://avatars0.githubusercontent.com/u/1170398?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Gabriel Petrovay</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Agabipetrovay\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=gabipetrovay\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Elzair\"><img src=\"https://avatars0.githubusercontent.com/u/2352818?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Philip Woods</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=Elzair\" title=\"Code\">💻</a> <a href=\"#ideas-Elzair\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/dmolim\"><img src=\"https://avatars2.githubusercontent.com/u/7090374?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Dmitry Ivonin</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=dmolim\" title=\"Documentation\">📖</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\n## License\n\nFormidable is licensed under the [MIT License][license-url].\n\n<!-- badges -->\n<!-- prettier-ignore-start -->\n\n[codestyle-url]: https://github.com/airbnb/javascript\n[codestyle-img]: https://badgen.net/badge/code%20style/airbnb%20%2B%20prettier/ff5a5f?icon=airbnb&cache=300\n[codecov-url]: https://codecov.io/gh/node-formidable/node-formidable\n[codecov-img]: https://badgen.net/codecov/c/github/node-formidable/node-formidable/master?icon=codecov\n[build-img]: https://badgen.net/github/checks/node-formidable/node-formidable?label=build&icon=github\n[build-url]: https://github.com/node-formidable/node-formidable/actions?query=workflow%3Anodejs\n[npmv-canary-img]: https://badgen.net/npm/v/formidable/canary?icon=npm\n[npmv-dev-img]: https://badgen.net/npm/v/formidable/dev?icon=npm\n[npmv-img]: https://badgen.net/npm/v/formidable?icon=npm\n[npmv-url]: https://npmjs.com/package/formidable\n[license-img]: https://badgen.net/npm/license/formidable\n[license-url]: https://github.com/node-formidable/node-formidable/blob/master/LICENSE\n[chat-img]: https://badgen.net/badge/chat/on%20gitter/46BC99?icon=gitter\n[chat-url]: https://gitter.im/node-formidable/Lobby\n[libera-manifesto-url]: https://liberamanifesto.com\n[libera-manifesto-img]: https://badgen.net/badge/libera/manifesto/grey\n[renovateapp-url]: https://renovatebot.com\n[renovateapp-img]: https://badgen.net/badge/renovate/enabled/green?cache=300\n[prs-welcome-img]: https://badgen.net/badge/PRs/welcome/green?cache=300\n[prs-welcome-url]: http://makeapullrequest.com\n[twitter-url]: https://twitter.com/tunnckoCore\n[twitter-img]: https://badgen.net/twitter/follow/tunnckoCore?icon=twitter&color=1da1f2&cache=300\n\n<!-- prettier-ignore-end -->\n","readmeFilename":"README.md","gitHead":"88d22b8a097710e753a7d12f5667620731993df3","bugs":{"url":"https://github.com/node-formidable/node-formidable/issues"},"_id":"formidable@2.0.0-canary.20200131.1","_nodeVersion":"12.14.0","_npmVersion":"6.13.4","dist":{"integrity":"sha512-A1qoSfcobB9QHknvTGAUxDaUWKN+/P2nhFur8n+QPYE8BY//boyxuTJHOw5Vp5iOdC+G8YPpbuMETuV2gBIjJQ==","shasum":"c6d374fc833fd6587e55751bce515f216a96122a","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-2.0.0-canary.20200131.1.tgz","fileCount":12,"unpackedSize":62490,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeM+pPCRA9TVsSAnZWagAAep0P/AhLYUKuf8WnGqV/v/+5\nFp929Ka22EL28W0rGZfmqy9PeSed6DmAnuQiEnmwCUsZOrX5OdKsIiPak1W3\nO51+DclZWjOf8lRxvHKYak5pbtJV9RNptn65yQwkdkDf3rH80DvLilyGXUVt\nFYZHx9z5ra4BxUJ6MtBW5TWv/0AYcBvsYMoZJ4Ro2yqXH0fedEx9vDoCG6Wq\nyRzsAkgtJt1wJUD3ZIrGUfE8XBqDfOX/Fk3F5j68D9RWqCjUklKHl3i25aEe\nsvHyNrn9hRmg9DxgpiBnlUQzb8OwQqWy5lF5VwCGNFaKJz/WaN1HoVP35PiG\njbZ2+s5YW3wM/C9JDMBdycn/W7CqYdWmgVPaynwgaaQIx3o42tU/MRbSGFPh\nBKYCMMtkeA5yPd7yWoG93IdWr1naitGn73qkFpTiyOiyUaGK++PCEpmXLu/5\nmsBnfbBzMRKGTPhtZ4/cBWxjFAIpUyh8DoC0gFwWEUh7Mjy0KJJvl7FXeUMH\nLeWXTU21NaWJUey4Q6jgszJTVtWuXC2cEWxNThMa38Oy5P2nbx4x1Xd+UKnl\nlTRsWbY7dfZrVeY8r3+yLO/zHsVv0/bhg4RXdZBlBtMokb6/sPouHFP1eUjJ\nHlLUkLb3WtWDTIZcR7mgUVRNvCZU0Dj4apm8DMpj8x2W/c3odKDvmz1t1R6a\nVi79\r\n=xKMK\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"chalkerx@gmail.com","name":"chalker"},{"email":"felix@debuggable.com","name":"felixge"},{"email":"npmspam@geekhood.net","name":"kornel"},{"email":"nathanael.dmc@outlook.fr","name":"quantumsheep"},{"email":"superjoe30@gmail.com","name":"superjoe"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"tim@fostle.com","name":"tim-smart"},{"email":"mameto2011@gmail.com","name":"tunnckocore"},{"email":"super.ludiq@gmail.com","name":"vanchoy"},{"email":"xargs@disroot.org","name":"xargs"}],"_npmUser":{"name":"tunnckocore","email":"opensource@tunnckocore.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formidable_2.0.0-canary.20200131.1_1580460623221_0.8104394355906412"},"_hasShrinkwrap":false},"2.0.0-dev.20200131.2":{"name":"formidable","version":"2.0.0-dev.20200131.2","license":"MIT","description":"A node.js module for parsing form data, especially file uploads.","homepage":"https://github.com/node-formidable/node-formidable","funding":"https://ko-fi.com/tunnckoCore/commissions","repository":{"type":"git","url":"git+https://github.com/node-formidable/node-formidable.git"},"main":"./src/index.js","publishConfig":{"access":"public","tag":"dev"},"scripts":{"bench":"node benchmark","fmt":"yarn run fmt:prepare '**/*'","fmt:prepare":"prettier --write","lint":"yarn run lint:prepare .","lint:prepare":"eslint --cache --fix --quiet --format codeframe","reinstall":"rm -rf node_modules yarn.lock && yarn","pretest":"rm -rf test/tmp && mkdir test/tmp","test":"node test/run.js","pretest:ci":"yarn pretest","test:ci":"nyc node test/run.js"},"dependencies":{"dezalgo":"^1.0.3","once":"^1.4.0"},"devDependencies":{"@commitlint/cli":"^8.3.5","@commitlint/config-conventional":"^8.3.4","@tunnckocore/prettier-config":"^1.2.0","eslint":"^6.8.0","eslint-config-airbnb-base":"^14.0.0","eslint-config-prettier":"^6.10.0","eslint-plugin-import":"^2.20.0","eslint-plugin-prettier":"^3.1.2","husky":"^4.2.1","jest":"^25.1.0","koa":"^2.11.0","lint-staged":"^10.0.6","nyc":"^15.0.0","prettier":"^1.19.1","prettier-plugin-pkgjson":"^0.2.0","request":"^2.88.0","supertest":"^4.0.2","urun":"^0.0.8","utest":"^0.0.8"},"husky":{"hooks":{"pre-commit":"git status --porcelain && lint-staged","commit-msg":"commitlint -E HUSKY_GIT_PARAMS"}},"commitlint":{"extends":["@commitlint/config-conventional"]},"lint-staged":{"!*.{js,jsx,ts,tsx}":["yarn run fmt:prepare"],"*.{js,jsx,ts,tsx}":["yarn run lint"]},"readme":"<p align=\"center\">\n  <img alt=\"node formidable logo\" src=\"./logo.png\" />\n</p>\n\n# formidable [![npm version][npmv-img]][npmv-url] [![MIT license][license-img]][license-url] [![Libera Manifesto][libera-manifesto-img]][libera-manifesto-url]\n\n> A Node.js module for parsing form data, especially file uploads.\n\n[![Code style][codestyle-img]][codestyle-url]\n[![build status][build-img]][build-url]\n[![codecoverage][codecov-img]][codecov-url]\n[![Renovate App Status][renovateapp-img]][renovateapp-url]\n[![Make A Pull Request][prs-welcome-img]][prs-welcome-url]\n[![Twitter][twitter-img]][twitter-url]\n\n## Status: Maintained [![npm version][npmv-canary-img]][npmv-url] [![npm version][npmv-dev-img]][npmv-url]\n\nThis module was initially developed by\n[**@felixge**](https://github.com/felixge) for\n[Transloadit](http://transloadit.com/), a service focused on uploading and\nencoding images and videos. It has been battle-tested against hundreds of GBs of\nfile uploads from a large variety of clients and is considered production-ready\nand is used in production for years.\n\nCurrently, we are few maintainers trying to deal with it. :) More contributors\nare always welcome! :heart: Jump on\n[issue #412](https://github.com/felixge/node-formidable/issues/412) if you are\ninterested.\n\n_**Note:** Master is a \"canary\" branch - try it with `npm i formidable@canary`.\nDo not expect (for now) things from it to be inside the`latest`\"dist-tag\" in the\nNpm. The`formidable@latest`is the`v1.2.1` version and probably it will be the\nlast`v1` release!_\n\n_**Note: v2 is coming soon!**_\n\nYou can try the\n[Plugins API](https://github.com/felixge/node-formidable/tree/plugins-api)\n([#545](https://github.com/felixge/node-formidable/pull/545)), which is\navailable through `formidable@dev`.\n\n## Highlights\n\n- Fast (~900-2500 mb/sec), streaming multipart parser\n- Automatically writing file uploads to disk\n- Low memory footprint\n- Graceful error handling\n- Very high test coverage\n\n## Install\n\n```sh\nnpm install formidable\n# or the canary version\nnpm install formidable@canary\n```\n\nor with Yarn v1/v2\n\n```sh\nyarn add formidable\n# or the canary version\nyarn add formidable@canary\n```\n\nThis is a low-level package, and if you're using a high-level framework it may\nalready be included.\n\nHowever, [Express v4](http://expressjs.com) does not include any multipart\nhandling, nor does [body-parser](https://github.com/expressjs/body-parser).\n\nFor `koa` there is [koa-better-body](https://ghub.now.sh/koa-better-body) which\ncan handle ANY type of body / form-data - JSON, urlencoded, multpart and so on.\nA new major release is coming there too.\n\n## Example\n\nParse an incoming file upload.\n\n```js\nconst http = require('http');\nconst util = require('util');\nconst formidable = require('formidable');\n\nhttp\n  .createServer((req, res) => {\n    if (req.url === '/upload' && req.method.toLowerCase() === 'post') {\n      // parse a file upload\n      const form = formidable();\n\n      form.parse(req, (err, fields, files) => {\n        res.writeHead(200, { 'content-type': 'text/plain' });\n        res.write('received upload:\\n\\n');\n        res.end(util.inspect({ fields: fields, files: files }));\n      });\n\n      return;\n    }\n\n    // show a file upload form\n    res.writeHead(200, { 'content-type': 'text/html' });\n    res.end(`\n      <form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">\n        <input type=\"text\" name=\"title\" /><br/>\n        <input type=\"file\" name=\"upload\" multiple=\"multiple\" /><br/>\n        <input type=\"submit\" value=\"Upload\" />\n      </form>\n    `);\n  })\n  .listen(8080, () => {\n    console.log('Server listening on http://localhost:8080/ ...');\n  });\n```\n\n## Benchmarks\n\nThe benchmark is quite old, from the old codebase. But maybe quite true though.\nPreviously the numbers was around ~500 mb/sec. Currently with moving to the new\nNode.js Streams API it's faster. You can clearly see the differences between the\nNode versions.\n\n_Note: a lot better benchmarking could and should be done in future._\n\nBenchmarked on 8GB RAM, Xeon X3440 (2.53 GHz, 4 cores, 8 threads)\n\n```\n~/github/node-formidable master\n❯ nve --parallel 8 10 12 13 node benchmark/bench-multipart-parser.js\n\n ⬢  Node 8\n\n1261.08 mb/sec\n\n ⬢  Node 10\n\n1113.04 mb/sec\n\n ⬢  Node 12\n\n2107.00 mb/sec\n\n ⬢  Node 13\n\n2566.42 mb/sec\n```\n\n![benchmark January 29th, 2020](./benchmark/2020-01-29_xeon-x3440.png)\n\n## API\n\n### Formidable / IncomingForm\n\nAll shown are equivalent.\n\n_Please pass [`options`](#options) to the function/constructor, not by passing\nassigning them to the instance `form`_\n\n```js\nconst formidable = require('formidable');\nconst form = formidable(options);\n\n// or\nconst { formidable } = require('formidable');\nconst form = formidable(options);\n\n// or\nconst { IncomingForm } = require('formidable');\nconst form = new IncomingForm(options);\n\n// or\nconst { Formidable } = require('formidable');\nconst form = new Formidable(options);\n```\n\n### Options\n\nSee it's defaults in [src/Formidable.js](./src/Formidable.js#L14-L22) (the\n`DEFAULT_OPTIONS` constant).\n\n- `options.encoding` **{string}** - default `'utf-8'`; sets encoding for\n  incoming form fields,\n- `options.uploadDir` **{string}** - default `os.tmpdir()`; the directory for\n  placing file uploads in. You can move them later by using `fs.rename()`\n- `options.keepExtensions` **{boolean}** - default `false`; to include the\n  extensions of the original files or not\n- `options.maxFileSize` **{number}** - default `200 * 1024 * 1024` (200mb);\n  limit the size of uploaded file.\n- `options.maxFields` **{number}** - default `1000`; limit the number of fields\n  that the Querystring parser will decode, set 0 for unlimited\n- `options.maxFieldsSize` **{number}** - default `20 * 1024 * 1024` (20mb);\n  limit the amount of memory all fields together (except files) can allocate in\n  bytes.\n- `options.hash` **{boolean}** - default `false`; include checksums calculated\n  for incoming files, set this to some hash algorithm, see\n  [crypto.createHash](https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options)\n  for available algorithms\n- `options.multiples` **{boolean}** - default `false`; when you call the\n  `.parse` method, the `files` argument (of the callback) will contain arrays of\n  files for inputs which submit multiple files using the HTML5 `multiple`\n  attribute. Also, the `fields` argument will contain arrays of values for\n  fields that have names ending with '[]'.\n\n_**Note:** If this value is exceeded, an `'error'` event is emitted._\n\n```js\n// The amount of bytes received for this form so far.\nform.bytesReceived;\n```\n\n```js\n// The expected number of bytes in this form.\nform.bytesExpected;\n```\n\n### .parse(request, callback)\n\nParses an incoming Node.js `request` containing form data. If `callback` is\nprovided, all fields and files are collected and passed to the callback.\n\n```js\nconst formidable = require('formidable');\n\nconst form = formidable({ multiples: true, uploadDir: __dirname });\n\nform.parse(req, (err, fields, files) => {\n  console.log('fields:', fields);\n  console.log('files:', files);\n});\n```\n\nYou may overwrite this method if you are interested in directly accessing the\nmultipart stream. Doing so will disable any `'field'` / `'file'` events\nprocessing which would occur otherwise, making you fully responsible for\nhandling the processing.\n\nIn the example below, we listen on couple of events and direct them to the\n`data` listener, so you can do whatever you choose there, based on whether its\nbefore the file been emitted, the header value, the header name, on field, on\nfile and etc.\n\nOr the other way could be to just override the `form.onPart` as it's shown a bit\nlater.\n\n```js\nform.once('error', console.error);\n\nform.on('fileBegin', (filename, file) => {\n  form.emit('data', { name: 'fileBegin', filename, value: file });\n});\n\nform.on('file', (filename, file) => {\n  form.emit('data', { name: 'file', key: filename, value: file });\n});\n\nform.on('field', (fieldName, fieldValue) => {\n  form.emit('data', { name: 'field', key: fieldName, value: fieldValue });\n});\n\nform.once('end', () => {\n  console.log('Done!');\n});\n\n// If you want to customize whatever you want...\nform.on('data', ({ name, key, value, buffer, start, end, ...more }) => {\n  if (name === 'partBegin') {\n  }\n  if (name === 'partData') {\n  }\n  if (name === 'headerField') {\n  }\n  if (name === 'headerValue') {\n  }\n  if (name === 'headerEnd') {\n  }\n  if (name === 'headersEnd') {\n  }\n  if (name === 'field') {\n    console.log('field name:', key);\n    console.log('field value:', value);\n  }\n  if (name === 'file') {\n    console.log('file:', key, value);\n  }\n  if (name === 'fileBegin') {\n    console.log('fileBegin:', key, value);\n  }\n});\n```\n\n### .use(plugin: Plugin)\n\nA method that allows you to extend the Formidable library. By default we include\n4 plugins, which esentially are adapters to plug the different built-in parsers.\n\n**The plugins added by this method are always enabled.**\n\n_See [src/plugins/](./src/plugins/) for more detailed look on default plugins._\n\nThe `plugin` param has such signature:\n\n```typescript\nfunction(formidable: Formidable, options: Options): void;\n```\n\nThe architecture is simple. The `plugin` is a function that is passed with the\nFormidable instance (the `form` across the README examples) and the options.\n\n**Note:** the plugin function's `this` context is also the same instance.\n\n```js\nconst formidable = require('formidable');\n\nconst form = formidable({ keepExtensions: true });\n\nform.use((self, options) => {\n  // self === this === form\n  console.log('woohoo, custom plugin');\n  // do your stuff; check `src/plugins` for inspiration\n});\n\nform.parse(req, (error, fields, files) => {\n  console.log('done!');\n});\n```\n\n**Important to note**, is that inside plugin `this.options`, `self.options` and\n`options` MAY or MAY NOT be the same. General best practice is to always use the\n`this`, so you can later test your plugin independently and more easily.\n\nIf you want to disable some parsing capabilities of Formidable, you can disable\nthe plugin which corresponds to the parser. For example, if you want to disable\nmultipart parsing (so the [src/parsers/Multipart.js](./src/parsers/Multipart.js)\nwhich is used in [src/plugins/multipart.js](./src/plugins/multipart.js)), then\nyou can remove it from the `options.enabledPlugins`, like so\n\n```js\nconst { Formidable } = require('formidable');\n\nconst form = new Formidable({\n  hash: 'sha1',\n  enabledPlugins: ['octetstream', 'querystring', 'json'],\n});\n```\n\n**Be aware** that the order _MAY_ be important too. The names corresponds 1:1 to\nfiles in [src/plugins/](./src/plugins) folder.\n\nPull requests for new built-in plugins MAY be accepted - for example, more\nadvanced querystring parser. Add your plugin as a new file in `src/plugins/`\nfolder (lowercased) and follow how the other plugins are made.\n\n### form.onPart\n\nIf you want to use Formidable to only handle certain parts for you, you can do\nsomething similar. Or see\n[#387](https://github.com/node-formidable/node-formidable/issues/387) for\ninspiration, you can for example validate the mime-type.\n\n```js\nconst form = formidable();\n\nform.onPart = (part) => {\n  part.on('data', (buffer) {\n    // do whatever you want here\n  });\n};\n```\n\nFor example, force Formidable to be used only on non-file \"parts\" (i.e., html\nfields)\n\n```js\nconst form = formidable();\n\nform.onPart = function(part) {\n  // let formidable handle only non-file parts\n  if (part.filename === '' || !part.mime) {\n    // used internally, please do not override!\n    form.handlePart(part);\n  }\n};\n```\n\n### File\n\n```ts\nexport interface File {\n  // The size of the uploaded file in bytes.\n  // If the file is still being uploaded (see `'fileBegin'` event),\n  // this property says how many bytes of the file have been written to disk yet.\n  file.size: number;\n\n  // The path this file is being written to. You can modify this in the `'fileBegin'` event in\n  // case you are unhappy with the way formidable generates a temporary path for your files.\n  file.path: string;\n\n  // The name this file had according to the uploading client.\n  file.name: string | null;\n\n  // The mime type of this file, according to the uploading client.\n  file.type: string | null;\n\n  // A Date object (or `null`) containing the time this file was last written to.\n  // Mostly here for compatibility with the [W3C File API Draft](http://dev.w3.org/2006/webapi/FileAPI/).\n  file.lastModifiedDate: Date | null;\n\n  // If `options.hash` calculation was set, you can read the hex digest out of this var.\n  file.hash: string | 'sha1' | 'md5' | 'sha256' | null;\n}\n```\n\n#### file.toJSON()\n\nThis method returns a JSON-representation of the file, allowing you to\n`JSON.stringify()` the file which is useful for logging and responding to\nrequests.\n\n### Events\n\n#### `'progress'`\n\nEmitted after each incoming chunk of data that has been parsed. Can be used to\nroll your own progress bar.\n\n```js\nform.on('progress', (bytesReceived, bytesExpected) => {});\n```\n\n#### `'field'`\n\nEmitted whenever a field / value pair has been received.\n\n```js\nform.on('field', (name, value) => {});\n```\n\n#### `'fileBegin'`\n\nEmitted whenever a new file is detected in the upload stream. Use this event if\nyou want to stream the file to somewhere else while buffering the upload on the\nfile system.\n\n```js\nform.on('fileBegin', (name, file) => {});\n```\n\n#### `'file'`\n\nEmitted whenever a field / file pair has been received. `file` is an instance of\n`File`.\n\n```js\nform.on('file', (name, file) => {});\n```\n\n#### `'error'`\n\nEmitted when there is an error processing the incoming form. A request that\nexperiences an error is automatically paused, you will have to manually call\n`request.resume()` if you want the request to continue firing `'data'` events.\n\n```js\nform.on('error', (err) => {});\n```\n\n#### `'aborted'`\n\nEmitted when the request was aborted by the user. Right now this can be due to a\n'timeout' or 'close' event on the socket. After this event is emitted, an\n`error` event will follow. In the future there will be a separate 'timeout'\nevent (needs a change in the node core).\n\n```js\nform.on('aborted', () => {});\n```\n\n#### `'end'`\n\nEmitted when the entire request has been received, and all contained files have\nfinished flushing to disk. This is a great place for you to send your response.\n\n```js\nform.on('end', () => {});\n```\n\n## Ports & Credits\n\n- [multipart-parser](http://github.com/FooBarWidget/multipart-parser): a C++\n  parser based on formidable\n- [Ryan Dahl](http://twitter.com/ryah) for his work on\n  [http-parser](http://github.com/ry/http-parser) which heavily inspired the\n  initial `multipart_parser.js`.\n\n## Contributing\n\nIf the documentation is unclear or has a typo, please click on the page's `Edit`\nbutton (pencil icon) and suggest a correction. If you would like to help us fix\na bug or add a new feature, please check our\n[Contributing Guide](./CONTRIBUTING.md). Pull requests are welcome!\n\nThanks goes to these wonderful people\n([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://twitter.com/felixge\"><img src=\"https://avatars3.githubusercontent.com/u/15000?s=460&v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Felix Geisendörfer</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=felixge\" title=\"Code\">💻</a> <a href=\"#design-felixge\" title=\"Design\">🎨</a> <a href=\"#ideas-felixge\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=felixge\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://tunnckoCore.com\"><img src=\"https://avatars3.githubusercontent.com/u/5038030?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Charlike Mike Reagent</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AtunnckoCore\" title=\"Bug reports\">🐛</a> <a href=\"#infra-tunnckoCore\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#design-tunnckoCore\" title=\"Design\">🎨</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Code\">💻</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Documentation\">📖</a> <a href=\"#example-tunnckoCore\" title=\"Examples\">💡</a> <a href=\"#ideas-tunnckoCore\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-tunnckoCore\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/kedarv\"><img src=\"https://avatars1.githubusercontent.com/u/1365665?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kedar</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=kedarv\" title=\"Code\">💻</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=kedarv\" title=\"Tests\">⚠️</a> <a href=\"#question-kedarv\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Akedarv\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/GrosSacASac\"><img src=\"https://avatars0.githubusercontent.com/u/5721194?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Walle Cyril</b></sub></a><br /><a href=\"#question-GrosSacASac\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AGrosSacASac\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=GrosSacASac\" title=\"Code\">💻</a> <a href=\"#financial-GrosSacASac\" title=\"Financial\">💵</a> <a href=\"#ideas-GrosSacASac\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-GrosSacASac\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/xarguments\"><img src=\"https://avatars2.githubusercontent.com/u/40522463?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Xargs</b></sub></a><br /><a href=\"#question-xarguments\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Axarguments\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=xarguments\" title=\"Code\">💻</a> <a href=\"#maintenance-xarguments\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Amit-A\"><img src=\"https://avatars1.githubusercontent.com/u/7987238?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Amit-A</b></sub></a><br /><a href=\"#question-Amit-A\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AAmit-A\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=Amit-A\" title=\"Code\">💻</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://charmander.me/\"><img src=\"https://avatars1.githubusercontent.com/u/1889843?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Charmander</b></sub></a><br /><a href=\"#question-charmander\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Acharmander\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=charmander\" title=\"Code\">💻</a> <a href=\"#ideas-charmander\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-charmander\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/dylan_piercey\"><img src=\"https://avatars2.githubusercontent.com/u/4985201?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Dylan Piercey</b></sub></a><br /><a href=\"#ideas-DylanPiercey\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"http://ochrona.jawne.info.pl\"><img src=\"https://avatars1.githubusercontent.com/u/3618479?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Adam Dobrawy</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Aad-m\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=ad-m\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/amitrohatgi\"><img src=\"https://avatars3.githubusercontent.com/u/12177021?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>amitrohatgi</b></sub></a><br /><a href=\"#ideas-amitrohatgi\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/fengxinming\"><img src=\"https://avatars2.githubusercontent.com/u/6262382?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jesse Feng</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Afengxinming\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://qtmsheep.com\"><img src=\"https://avatars1.githubusercontent.com/u/7271496?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Nathanael Demacon</b></sub></a><br /><a href=\"#question-quantumsheep\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=quantumsheep\" title=\"Code\">💻</a> <a href=\"https://github.com/node-formidable/node-formidable/pulls?q=is%3Apr+reviewed-by%3Aquantumsheep\" title=\"Reviewed Pull Requests\">👀</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/MunMunMiao\"><img src=\"https://avatars1.githubusercontent.com/u/18216142?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>MunMunMiao</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AMunMunMiao\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/gabipetrovay\"><img src=\"https://avatars0.githubusercontent.com/u/1170398?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Gabriel Petrovay</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Agabipetrovay\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=gabipetrovay\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Elzair\"><img src=\"https://avatars0.githubusercontent.com/u/2352818?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Philip Woods</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=Elzair\" title=\"Code\">💻</a> <a href=\"#ideas-Elzair\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/dmolim\"><img src=\"https://avatars2.githubusercontent.com/u/7090374?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Dmitry Ivonin</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=dmolim\" title=\"Documentation\">📖</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\n## License\n\nFormidable is licensed under the [MIT License][license-url].\n\n<!-- badges -->\n<!-- prettier-ignore-start -->\n\n[codestyle-url]: https://github.com/airbnb/javascript\n[codestyle-img]: https://badgen.net/badge/code%20style/airbnb%20%2B%20prettier/ff5a5f?icon=airbnb&cache=300\n[codecov-url]: https://codecov.io/gh/node-formidable/node-formidable\n[codecov-img]: https://badgen.net/codecov/c/github/node-formidable/node-formidable/master?icon=codecov\n[build-img]: https://badgen.net/github/checks/node-formidable/node-formidable?label=build&icon=github\n[build-url]: https://github.com/node-formidable/node-formidable/actions?query=workflow%3Anodejs\n[npmv-canary-img]: https://badgen.net/npm/v/formidable/canary?icon=npm\n[npmv-dev-img]: https://badgen.net/npm/v/formidable/dev?icon=npm\n[npmv-img]: https://badgen.net/npm/v/formidable?icon=npm\n[npmv-url]: https://npmjs.com/package/formidable\n[license-img]: https://badgen.net/npm/license/formidable\n[license-url]: https://github.com/node-formidable/node-formidable/blob/master/LICENSE\n[chat-img]: https://badgen.net/badge/chat/on%20gitter/46BC99?icon=gitter\n[chat-url]: https://gitter.im/node-formidable/Lobby\n[libera-manifesto-url]: https://liberamanifesto.com\n[libera-manifesto-img]: https://badgen.net/badge/libera/manifesto/grey\n[renovateapp-url]: https://renovatebot.com\n[renovateapp-img]: https://badgen.net/badge/renovate/enabled/green?cache=300\n[prs-welcome-img]: https://badgen.net/badge/PRs/welcome/green?cache=300\n[prs-welcome-url]: http://makeapullrequest.com\n[twitter-url]: https://twitter.com/tunnckoCore\n[twitter-img]: https://badgen.net/twitter/follow/tunnckoCore?icon=twitter&color=1da1f2&cache=300\n\n<!-- prettier-ignore-end -->\n","readmeFilename":"README.md","gitHead":"e02c69cd21bca200da1a85b17ce5a0242a411e6e","bugs":{"url":"https://github.com/node-formidable/node-formidable/issues"},"_id":"formidable@2.0.0-dev.20200131.2","_nodeVersion":"12.14.0","_npmVersion":"6.13.4","dist":{"integrity":"sha512-QqOPy9YPdGO0aL1iW2xNjABA+qRvb5H24iV6cFAwtJVfo8XsfJ7EcNocuxBI6oAt83fNCfBN6GbcqB5A5xvR1A==","shasum":"e36fa8bc527cf83a3f8bb042c61062513e7dee03","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-2.0.0-dev.20200131.2.tgz","fileCount":71,"unpackedSize":2074594,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeM/BFCRA9TVsSAnZWagAAGvIQAJV2Op7Zcdo8ypcVoy49\nXMf8+TOGl1x28gEz6UdoNLTYEQFQKuYkIJHoPk9KdhK760cIXK9lrsnFAeMI\nq3OjzIp95Ebud611B8TNoWdVz/eIe5mDzKUS3XpzmIMfOpgshOl7pBe+i0h9\nVoerIL3bUXfA20iD9xfmyCZDkHYlp459DJR56WmeKaCw7ppDM/TURiBfsVJo\nWT9FhMtvWp6b5DZ98bHb7N92jncttJtblXcxz7PfGvnsnsLEPLHZwN9h+7mz\nfOWZ+RO8WrIgCseCl+mQSwZfsW2aEfBdq6lgZVN9SJz4h45bGP5EvsTWg5Kc\nuAEyjy5EnGWpJibx2JvIo+2PrgsIlMiXUnKsTFRZtu/+T4HygM3ChfdENnDS\nI5mUYZfzVGQtCfNClKq9o4tNOP+zxAiEbrasJ+NTnngE2M31vNwRjdMZPgXW\n3BIyQGlHdCuTWJGj8ClsWmpcSqRP/x7zVisxx7QdxwHFMGnxugLjDDurGPZ/\nJ5FmxRunGseF/IiQsdaTKeco7IHhTtK1NtEqCJ/P4hRzMDjL0w3ZYMSOVwUr\nrjxkWRDElx7//N9bV6z8D09VIZ3F7EldsdAq3LmR9zaVay3iVzv5FFCYg7AQ\nM0yZ3kJzG2O4hHu2Nhu4w9enawxLh7cR+74PqQuMT3d9CXPZD4tt/sNNptoS\nQdHr\r\n=mibo\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"chalkerx@gmail.com","name":"chalker"},{"email":"felix@debuggable.com","name":"felixge"},{"email":"npmspam@geekhood.net","name":"kornel"},{"email":"nathanael.dmc@outlook.fr","name":"quantumsheep"},{"email":"superjoe30@gmail.com","name":"superjoe"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"tim@fostle.com","name":"tim-smart"},{"email":"mameto2011@gmail.com","name":"tunnckocore"},{"email":"super.ludiq@gmail.com","name":"vanchoy"},{"email":"xargs@disroot.org","name":"xargs"}],"_npmUser":{"name":"tunnckocore","email":"opensource@tunnckocore.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formidable_2.0.0-dev.20200131.2_1580462148521_0.9097906830685603"},"_hasShrinkwrap":false},"2.0.0-canary.20200212.1":{"name":"formidable","version":"2.0.0-canary.20200212.1","license":"MIT","description":"A node.js module for parsing form data, especially file uploads.","homepage":"https://github.com/node-formidable/node-formidable","funding":"https://ko-fi.com/tunnckoCore/commissions","repository":{"type":"git","url":"git+https://github.com/node-formidable/node-formidable.git"},"main":"./src/index.js","publishConfig":{"access":"public","tag":"canary"},"scripts":{"bench":"node benchmark","fmt":"yarn run fmt:prepare '**/*'","fmt:prepare":"prettier --write","lint":"yarn run lint:prepare .","lint:prepare":"eslint --cache --fix --quiet --format codeframe","reinstall":"rm -rf node_modules yarn.lock && yarn","pretest":"rm -rf test/tmp && mkdir test/tmp","test":"node test/run.js","pretest:ci":"yarn pretest","test:ci":"nyc node test/run.js"},"devDependencies":{"@commitlint/cli":"^8.3.5","@commitlint/config-conventional":"^8.3.4","@tunnckocore/prettier-config":"^1.3.3","eslint":"^6.8.0","eslint-config-airbnb-base":"^14.0.0","eslint-config-prettier":"^6.10.0","eslint-plugin-import":"^2.20.1","eslint-plugin-prettier":"^3.1.2","husky":"^4.2.2","jest":"^25.1.0","lint-staged":"^10.0.7","nyc":"^15.0.0","prettier":"^1.19.1","prettier-plugin-pkgjson":"^0.2.3","request":"^2.88.2","urun":"^0.0.8","utest":"^0.0.8"},"husky":{"hooks":{"pre-commit":"git status --porcelain && yarn lint-staged","commit-msg":"yarn commitlint -E HUSKY_GIT_PARAMS"}},"commitlint":{"extends":["@commitlint/config-conventional"]},"lint-staged":{"!*.{js,jsx,ts,tsx}":["yarn run fmt:prepare"],"*.{js,jsx,ts,tsx}":["yarn run lint"]},"renovate":{"extends":["@tunnckocore"]},"readme":"<p align=\"center\">\n  <img alt=\"node formidable logo\" src=\"./logo.png\" />\n</p>\n\n# formidable [![npm version][npmv-img]][npmv-url] [![MIT license][license-img]][license-url] [![Libera Manifesto][libera-manifesto-img]][libera-manifesto-url]\n\n> A Node.js module for parsing form data, especially file uploads.\n\n[![Code style][codestyle-img]][codestyle-url]\n[![build status][build-img]][build-url]\n[![codecoverage][codecov-img]][codecov-url]\n[![Renovate App Status][renovateapp-img]][renovateapp-url]\n[![Make A Pull Request][prs-welcome-img]][prs-welcome-url]\n[![Twitter][twitter-img]][twitter-url]\n\n[![][npm-weekly-img]][npmv-url] [![][npm-monthly-img]][npmv-url]\n[![][npm-yearly-img]][npmv-url] [![][npm-alltime-img]][npmv-url]\n\n## Status: Maintained [![npm version][npmv-canary-img]][npmv-url] [![npm version][npmv-dev-img]][npmv-url]\n\nThis module was initially developed by\n[**@felixge**](https://github.com/felixge) for\n[Transloadit](http://transloadit.com/), a service focused on uploading and\nencoding images and videos. It has been battle-tested against hundreds of GBs of\nfile uploads from a large variety of clients and is considered production-ready\nand is used in production for years.\n\nCurrently, we are few maintainers trying to deal with it. :) More contributors\nare always welcome! :heart: Jump on\n[issue #412](https://github.com/felixge/node-formidable/issues/412) if you are\ninterested.\n\n_**Note:** Master is a \"canary\" branch - try it with `npm i formidable@canary`.\nDo not expect (for now) things from it to be inside the`latest`\"dist-tag\" in the\nNpm. The`formidable@latest`is the`v1.2.1` version and probably it will be the\nlast`v1` release!_\n\n_**Note: v2 is coming soon!**_\n\nYou can try the\n[Plugins API](https://github.com/felixge/node-formidable/tree/plugins-api)\n([#545](https://github.com/felixge/node-formidable/pull/545)), which is\navailable through `formidable@dev`.\n\n## Highlights\n\n- Fast (~900-2500 mb/sec), streaming multipart parser\n- Automatically writing file uploads to disk\n- Low memory footprint\n- Graceful error handling\n- Very high test coverage\n\n## Install\n\n```sh\nnpm install formidable\n# or the canary version\nnpm install formidable@canary\n```\n\nor with Yarn v1/v2\n\n```sh\nyarn add formidable\n# or the canary version\nyarn add formidable@canary\n```\n\nThis is a low-level package, and if you're using a high-level framework it may\nalready be included.\n\nHowever, [Express v4](http://expressjs.com) does not include any multipart\nhandling, nor does [body-parser](https://github.com/expressjs/body-parser).\n\nFor `koa` there is [koa-better-body](https://ghub.now.sh/koa-better-body) which\ncan handle ANY type of body / form-data - JSON, urlencoded, multpart and so on.\nA new major release is coming there too.\n\n## Example\n\nParse an incoming file upload.\n\n```js\nconst http = require('http');\nconst util = require('util');\nconst formidable = require('formidable');\n\nhttp\n  .createServer((req, res) => {\n    if (req.url === '/upload' && req.method.toLowerCase() === 'post') {\n      // parse a file upload\n      const form = formidable();\n\n      form.parse(req, (err, fields, files) => {\n        res.writeHead(200, { 'content-type': 'text/plain' });\n        res.write('received upload:\\n\\n');\n        res.end(util.inspect({ fields: fields, files: files }));\n      });\n\n      return;\n    }\n\n    // show a file upload form\n    res.writeHead(200, { 'content-type': 'text/html' });\n    res.end(`\n      <form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">\n        <input type=\"text\" name=\"title\" /><br/>\n        <input type=\"file\" name=\"upload\" multiple=\"multiple\" /><br/>\n        <input type=\"submit\" value=\"Upload\" />\n      </form>\n    `);\n  })\n  .listen(8080, () => {\n    console.log('Server listening on http://localhost:8080/ ...');\n  });\n```\n\n## Benchmarks\n\nThe benchmark is quite old, from the old codebase. But maybe quite true though.\nPreviously the numbers was around ~500 mb/sec. Currently with moving to the new\nNode.js Streams API it's faster. You can clearly see the differences between the\nNode versions.\n\n_Note: a lot better benchmarking could and should be done in future._\n\nBenchmarked on 8GB RAM, Xeon X3440 (2.53 GHz, 4 cores, 8 threads)\n\n```\n~/github/node-formidable master\n❯ nve --parallel 8 10 12 13 node benchmark/bench-multipart-parser.js\n\n ⬢  Node 8\n\n1261.08 mb/sec\n\n ⬢  Node 10\n\n1113.04 mb/sec\n\n ⬢  Node 12\n\n2107.00 mb/sec\n\n ⬢  Node 13\n\n2566.42 mb/sec\n```\n\n![benchmark January 29th, 2020](./benchmark/2020-01-29_xeon-x3440.png)\n\n## API\n\n### Formidable / IncomingForm\n\nAll shown are equivalent.\n\n_Please pass [`options`](#options) to the function/constructor, not by passing\nassigning them to the instance `form`_\n\n```js\nconst formidable = require('formidable');\nconst form = formidable(options);\n\n// or\nconst { formidable } = require('formidable');\nconst form = formidable(options);\n\n// or\nconst { IncomingForm } = require('formidable');\nconst form = new IncomingForm(options);\n\n// or\nconst { Formidable } = require('formidable');\nconst form = new Formidable(options);\n```\n\n### Options\n\nSee it's defaults in [src/Formidable.js](./src/Formidable.js#L14-L22) (the\n`DEFAULT_OPTIONS` constant).\n\n- `options.encoding` **{string}** - default `'utf-8'`; sets encoding for\n  incoming form fields,\n- `options.uploadDir` **{string}** - default `os.tmpdir()`; the directory for\n  placing file uploads in. You can move them later by using `fs.rename()`\n- `options.keepExtensions` **{boolean}** - default `false`; to include the\n  extensions of the original files or not\n- `options.maxFileSize` **{number}** - default `200 * 1024 * 1024` (200mb);\n  limit the size of uploaded file.\n- `options.maxFields` **{number}** - default `1000`; limit the number of fields\n  that the Querystring parser will decode, set 0 for unlimited\n- `options.maxFieldsSize` **{number}** - default `20 * 1024 * 1024` (20mb);\n  limit the amount of memory all fields together (except files) can allocate in\n  bytes.\n- `options.hash` **{boolean}** - default `false`; include checksums calculated\n  for incoming files, set this to some hash algorithm, see\n  [crypto.createHash](https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options)\n  for available algorithms\n- `options.multiples` **{boolean}** - default `false`; when you call the\n  `.parse` method, the `files` argument (of the callback) will contain arrays of\n  files for inputs which submit multiple files using the HTML5 `multiple`\n  attribute. Also, the `fields` argument will contain arrays of values for\n  fields that have names ending with '[]'.\n\n_**Note:** If this value is exceeded, an `'error'` event is emitted._\n\n```js\n// The amount of bytes received for this form so far.\nform.bytesReceived;\n```\n\n```js\n// The expected number of bytes in this form.\nform.bytesExpected;\n```\n\n### .parse(request, callback)\n\nParses an incoming Node.js `request` containing form data. If `callback` is\nprovided, all fields and files are collected and passed to the callback.\n\n```js\nconst formidable = require('formidable');\n\nconst form = formidable({ multiples: true, uploadDir: __dirname });\n\nform.parse(req, (err, fields, files) => {\n  console.log('fields:', fields);\n  console.log('files:', files);\n});\n```\n\nYou may overwrite this method if you are interested in directly accessing the\nmultipart stream. Doing so will disable any `'field'` / `'file'` events\nprocessing which would occur otherwise, making you fully responsible for\nhandling the processing.\n\nIn the example below, we listen on couple of events and direct them to the\n`data` listener, so you can do whatever you choose there, based on whether its\nbefore the file been emitted, the header value, the header name, on field, on\nfile and etc.\n\nOr the other way could be to just override the `form.onPart` as it's shown a bit\nlater.\n\n```js\nform.once('error', console.error);\n\nform.on('fileBegin', (filename, file) => {\n  form.emit('data', { name: 'fileBegin', filename, value: file });\n});\n\nform.on('file', (filename, file) => {\n  form.emit('data', { name: 'file', key: filename, value: file });\n});\n\nform.on('field', (fieldName, fieldValue) => {\n  form.emit('data', { name: 'field', key: fieldName, value: fieldValue });\n});\n\nform.once('end', () => {\n  console.log('Done!');\n});\n\n// If you want to customize whatever you want...\nform.on('data', ({ name, key, value, buffer, start, end, ...more }) => {\n  if (name === 'partBegin') {\n  }\n  if (name === 'partData') {\n  }\n  if (name === 'headerField') {\n  }\n  if (name === 'headerValue') {\n  }\n  if (name === 'headerEnd') {\n  }\n  if (name === 'headersEnd') {\n  }\n  if (name === 'field') {\n    console.log('field name:', key);\n    console.log('field value:', value);\n  }\n  if (name === 'file') {\n    console.log('file:', key, value);\n  }\n  if (name === 'fileBegin') {\n    console.log('fileBegin:', key, value);\n  }\n});\n```\n\n### form.onPart\n\nIf you want to use Formidable to only handle certain parts for you, you can do\nsomething similar. Or see\n[#387](https://github.com/node-formidable/node-formidable/issues/387) for\ninspiration, you can for example validate the mime-type.\n\n```js\nconst form = formidable();\n\nform.onPart = (part) => {\n  part.on('data', (buffer) {\n    // do whatever you want here\n  });\n};\n```\n\nFor example, force Formidable to be used only on non-file \"parts\" (i.e., html\nfields)\n\n```js\nconst form = formidable();\n\nform.onPart = function(part) {\n  // let formidable handle only non-file parts\n  if (part.filename === '' || !part.mime) {\n    // used internally, please do not override!\n    form.handlePart(part);\n  }\n};\n```\n\n### File\n\n```ts\nexport interface File {\n  // The size of the uploaded file in bytes.\n  // If the file is still being uploaded (see `'fileBegin'` event),\n  // this property says how many bytes of the file have been written to disk yet.\n  file.size: number;\n\n  // The path this file is being written to. You can modify this in the `'fileBegin'` event in\n  // case you are unhappy with the way formidable generates a temporary path for your files.\n  file.path: string;\n\n  // The name this file had according to the uploading client.\n  file.name: string | null;\n\n  // The mime type of this file, according to the uploading client.\n  file.type: string | null;\n\n  // A Date object (or `null`) containing the time this file was last written to.\n  // Mostly here for compatibility with the [W3C File API Draft](http://dev.w3.org/2006/webapi/FileAPI/).\n  file.lastModifiedDate: Date | null;\n\n  // If `options.hash` calculation was set, you can read the hex digest out of this var.\n  file.hash: string | 'sha1' | 'md5' | 'sha256' | null;\n}\n```\n\n#### file.toJSON()\n\nThis method returns a JSON-representation of the file, allowing you to\n`JSON.stringify()` the file which is useful for logging and responding to\nrequests.\n\n### Events\n\n#### `'progress'`\n\nEmitted after each incoming chunk of data that has been parsed. Can be used to\nroll your own progress bar.\n\n```js\nform.on('progress', (bytesReceived, bytesExpected) => {});\n```\n\n#### `'field'`\n\nEmitted whenever a field / value pair has been received.\n\n```js\nform.on('field', (name, value) => {});\n```\n\n#### `'fileBegin'`\n\nEmitted whenever a new file is detected in the upload stream. Use this event if\nyou want to stream the file to somewhere else while buffering the upload on the\nfile system.\n\n```js\nform.on('fileBegin', (name, file) => {});\n```\n\n#### `'file'`\n\nEmitted whenever a field / file pair has been received. `file` is an instance of\n`File`.\n\n```js\nform.on('file', (name, file) => {});\n```\n\n#### `'error'`\n\nEmitted when there is an error processing the incoming form. A request that\nexperiences an error is automatically paused, you will have to manually call\n`request.resume()` if you want the request to continue firing `'data'` events.\n\n```js\nform.on('error', (err) => {});\n```\n\n#### `'aborted'`\n\nEmitted when the request was aborted by the user. Right now this can be due to a\n'timeout' or 'close' event on the socket. After this event is emitted, an\n`error` event will follow. In the future there will be a separate 'timeout'\nevent (needs a change in the node core).\n\n```js\nform.on('aborted', () => {});\n```\n\n#### `'end'`\n\nEmitted when the entire request has been received, and all contained files have\nfinished flushing to disk. This is a great place for you to send your response.\n\n```js\nform.on('end', () => {});\n```\n\n## Ports & Credits\n\n- [multipart-parser](http://github.com/FooBarWidget/multipart-parser): a C++\n  parser based on formidable\n- [Ryan Dahl](http://twitter.com/ryah) for his work on\n  [http-parser](http://github.com/ry/http-parser) which heavily inspired the\n  initial `multipart_parser.js`.\n\n## Contributing\n\nIf the documentation is unclear or has a typo, please click on the page's `Edit`\nbutton (pencil icon) and suggest a correction. If you would like to help us fix\na bug or add a new feature, please check our\n[Contributing Guide](./CONTRIBUTING.md). Pull requests are welcome!\n\nThanks goes to these wonderful people\n([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://twitter.com/felixge\"><img src=\"https://avatars3.githubusercontent.com/u/15000?s=460&v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Felix Geisendörfer</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=felixge\" title=\"Code\">💻</a> <a href=\"#design-felixge\" title=\"Design\">🎨</a> <a href=\"#ideas-felixge\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=felixge\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://tunnckoCore.com\"><img src=\"https://avatars3.githubusercontent.com/u/5038030?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Charlike Mike Reagent</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AtunnckoCore\" title=\"Bug reports\">🐛</a> <a href=\"#infra-tunnckoCore\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#design-tunnckoCore\" title=\"Design\">🎨</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Code\">💻</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Documentation\">📖</a> <a href=\"#example-tunnckoCore\" title=\"Examples\">💡</a> <a href=\"#ideas-tunnckoCore\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-tunnckoCore\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/kedarv\"><img src=\"https://avatars1.githubusercontent.com/u/1365665?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kedar</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=kedarv\" title=\"Code\">💻</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=kedarv\" title=\"Tests\">⚠️</a> <a href=\"#question-kedarv\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Akedarv\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/GrosSacASac\"><img src=\"https://avatars0.githubusercontent.com/u/5721194?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Walle Cyril</b></sub></a><br /><a href=\"#question-GrosSacASac\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AGrosSacASac\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=GrosSacASac\" title=\"Code\">💻</a> <a href=\"#financial-GrosSacASac\" title=\"Financial\">💵</a> <a href=\"#ideas-GrosSacASac\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-GrosSacASac\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/xarguments\"><img src=\"https://avatars2.githubusercontent.com/u/40522463?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Xargs</b></sub></a><br /><a href=\"#question-xarguments\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Axarguments\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=xarguments\" title=\"Code\">💻</a> <a href=\"#maintenance-xarguments\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Amit-A\"><img src=\"https://avatars1.githubusercontent.com/u/7987238?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Amit-A</b></sub></a><br /><a href=\"#question-Amit-A\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AAmit-A\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=Amit-A\" title=\"Code\">💻</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://charmander.me/\"><img src=\"https://avatars1.githubusercontent.com/u/1889843?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Charmander</b></sub></a><br /><a href=\"#question-charmander\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Acharmander\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=charmander\" title=\"Code\">💻</a> <a href=\"#ideas-charmander\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-charmander\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/dylan_piercey\"><img src=\"https://avatars2.githubusercontent.com/u/4985201?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Dylan Piercey</b></sub></a><br /><a href=\"#ideas-DylanPiercey\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"http://ochrona.jawne.info.pl\"><img src=\"https://avatars1.githubusercontent.com/u/3618479?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Adam Dobrawy</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Aad-m\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=ad-m\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/amitrohatgi\"><img src=\"https://avatars3.githubusercontent.com/u/12177021?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>amitrohatgi</b></sub></a><br /><a href=\"#ideas-amitrohatgi\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/fengxinming\"><img src=\"https://avatars2.githubusercontent.com/u/6262382?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jesse Feng</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Afengxinming\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://qtmsheep.com\"><img src=\"https://avatars1.githubusercontent.com/u/7271496?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Nathanael Demacon</b></sub></a><br /><a href=\"#question-quantumsheep\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=quantumsheep\" title=\"Code\">💻</a> <a href=\"https://github.com/node-formidable/node-formidable/pulls?q=is%3Apr+reviewed-by%3Aquantumsheep\" title=\"Reviewed Pull Requests\">👀</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/MunMunMiao\"><img src=\"https://avatars1.githubusercontent.com/u/18216142?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>MunMunMiao</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AMunMunMiao\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/gabipetrovay\"><img src=\"https://avatars0.githubusercontent.com/u/1170398?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Gabriel Petrovay</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Agabipetrovay\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=gabipetrovay\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Elzair\"><img src=\"https://avatars0.githubusercontent.com/u/2352818?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Philip Woods</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=Elzair\" title=\"Code\">💻</a> <a href=\"#ideas-Elzair\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/dmolim\"><img src=\"https://avatars2.githubusercontent.com/u/7090374?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Dmitry Ivonin</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=dmolim\" title=\"Documentation\">📖</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\n## License\n\nFormidable is licensed under the [MIT License][license-url].\n\n<!-- badges -->\n<!-- prettier-ignore-start -->\n\n[codestyle-url]: https://github.com/airbnb/javascript\n[codestyle-img]: https://badgen.net/badge/code%20style/airbnb%20%2B%20prettier/ff5a5f?icon=airbnb&cache=300\n[codecov-url]: https://codecov.io/gh/node-formidable/node-formidable\n[codecov-img]: https://badgen.net/codecov/c/github/node-formidable/node-formidable/master?icon=codecov\n[build-img]: https://badgen.net/github/checks/node-formidable/node-formidable?label=build&icon=github\n[build-url]: https://github.com/node-formidable/node-formidable/actions?query=workflow%3Anodejs\n[npmv-canary-img]: https://badgen.net/npm/v/formidable/canary?icon=npm\n[npmv-dev-img]: https://badgen.net/npm/v/formidable/dev?icon=npm\n[npmv-img]: https://badgen.net/npm/v/formidable?icon=npm\n[npmv-url]: https://npmjs.com/package/formidable\n[license-img]: https://badgen.net/npm/license/formidable\n[license-url]: https://github.com/node-formidable/node-formidable/blob/master/LICENSE\n[chat-img]: https://badgen.net/badge/chat/on%20gitter/46BC99?icon=gitter\n[chat-url]: https://gitter.im/node-formidable/Lobby\n[libera-manifesto-url]: https://liberamanifesto.com\n[libera-manifesto-img]: https://badgen.net/badge/libera/manifesto/grey\n[renovateapp-url]: https://renovatebot.com\n[renovateapp-img]: https://badgen.net/badge/renovate/enabled/green?cache=300\n[prs-welcome-img]: https://badgen.net/badge/PRs/welcome/green?cache=300\n[prs-welcome-url]: http://makeapullrequest.com\n[twitter-url]: https://twitter.com/tunnckoCore\n[twitter-img]: https://badgen.net/twitter/follow/tunnckoCore?icon=twitter&color=1da1f2&cache=300\n\n[npm-weekly-img]: https://badgen.net/npm/dw/formidable?icon=npm&cache=300\n[npm-monthly-img]: https://badgen.net/npm/dm/formidable?icon=npm&cache=300\n[npm-yearly-img]: https://badgen.net/npm/dy/formidable?icon=npm&cache=300\n[npm-alltime-img]: https://badgen.net/npm/dt/formidable?icon=npm&cache=300\n<!-- prettier-ignore-end -->\n","readmeFilename":"README.md","gitHead":"d413c1326fec2326390317277826695b293c3670","bugs":{"url":"https://github.com/node-formidable/node-formidable/issues"},"_id":"formidable@2.0.0-canary.20200212.1","_nodeVersion":"12.14.0","_npmVersion":"6.13.7","dist":{"integrity":"sha512-2MSmuN+bRoH+yTctAMMvi4xB5iQVlGbpO40Ym959wbE1Hy+g/gtVrel7rMKAbTosYu6VcQ1Ih5exPKSRcwzfiA==","shasum":"f6571dca559f53af29a3428c01bdc4291a8c9394","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-2.0.0-canary.20200212.1.tgz","fileCount":12,"unpackedSize":62898,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeRAEHCRA9TVsSAnZWagAAG3UP/13XIsna4yRJBSZsC6lJ\nbWeNBuNa3j9OE/Rh2I3Wvrl1EdAmycBDjooMQ9nzrOCPbbb7+ZvCHShFKo4H\nMQCcLXAnaKKlShRAp4HxllJ43J/59bMLXdExyIbVsj03+Z5wKnCLYd6GSOkm\nNSipnsUP7UhQDdBu4htwomR7QrFizmd2Yic6gE44aVZTCDm1PkEff5HUOE/u\n2hwUSlG6pdTYO5bBfExpcQVaTakEebZUzL8Di3DrFiTtNMO5XVgcr/mHKFp9\nMreGcx3I+1FTk2uv+kBmA778sK69bS5hz3uKTD+EqLOgcQ+1ZFptaEvY92wJ\nWPWnOVGPryEfh734Re1hzuHVET+AGHW/GZb3SWRz7oKBVO6cOgS6J6IpQkO1\n+3NfsC2cL4ksdvCtIL8v8bks2UVxZLlQCsFJxo3qX4vadufuhhVfAaPtSD6X\nlKRyCkTPsBKOLILhrUOmmqFzCPs6xDBPeD2qZOpuASstOgVCi3Wjlgt0aF2t\nUUMp415/veliw+S1HxPkpN7V7LpxoxO0eaMkukXtJ+q8Oi6x1DxToub2/csU\nTd2gGAb/MSHDap3NhemJuELX3Pi49nCWFa6mYZ1lSrHcu8tLUwWqftZxMkCH\nhpqGVUVEOvfzo8rLhsmJfdlnY2my7vEiqe9cfd4Qklv9B1I18qTpzIbAOqEa\nTqoM\r\n=0GZw\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"chalkerx@gmail.com","name":"chalker"},{"email":"felix@debuggable.com","name":"felixge"},{"email":"npmspam@geekhood.net","name":"kornel"},{"email":"nathanael.dmc@outlook.fr","name":"quantumsheep"},{"email":"superjoe30@gmail.com","name":"superjoe"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"tim@fostle.com","name":"tim-smart"},{"email":"mameto2011@gmail.com","name":"tunnckocore"},{"email":"super.ludiq@gmail.com","name":"vanchoy"},{"email":"xargs@disroot.org","name":"xargs"}],"_npmUser":{"name":"tunnckocore","email":"opensource@tunnckocore.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formidable_2.0.0-canary.20200212.1_1581515014729_0.7425087727701907"},"_hasShrinkwrap":false},"1.2.2":{"name":"formidable","description":"A node.js module for parsing form data, especially file uploads.","homepage":"https://github.com/node-formidable/formidable","funding":"https://ko-fi.com/tunnckoCore/commissions","repository":{"type":"git","url":"git+https://github.com/node-formidable/formidable.git"},"license":"MIT","version":"1.2.2","devDependencies":{"gently":"^0.8.0","findit":"^0.1.2","hashish":"^0.0.4","urun":"^0.0.6","utest":"^0.0.8","request":"^2.11.4"},"main":"./lib/index.js","scripts":{"test":"node test/run.js","clean":"rm test/tmp/*"},"bugs":{"url":"https://github.com/node-formidable/formidable/issues"},"_id":"formidable@1.2.2","_nodeVersion":"12.14.0","_npmVersion":"6.13.7","dist":{"integrity":"sha512-V8gLm+41I/8kguQ4/o1D3RIHRmhYFG4pnNyonvua+40rqcEmT4+V71yaZ3B457xbbgCsCfjSPi65u/W6vK1U5Q==","shasum":"bf69aea2972982675f00865342b982986f6b8dd9","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-1.2.2.tgz","fileCount":11,"unpackedSize":85148,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeVThaCRA9TVsSAnZWagAA2LsQAII/AReBeTjQIPCvJFon\ndRJyExvXuguu8WTbI5kNa24Vsi+w/n95Krg0OFgmiiQWjv0jIhARcJgBz8WI\nry+Uop2Rg34exEyd0kiK6A72GH4095X++MgqfDCDO8hTozPv5MHWcR56QuLE\nKvXm+PdYpIn96yTsdR25ZJquXCKYKIfA2SGKK/VpY7gA+/38InSNG+hj2qEl\nK9m6PjQl9JGIxUQ9aqwLFK3UgJ5FzMo957B7Ro9Z0G0vptAHC4II0YqS8VLa\nyHgKviSFfOwfQHlNenjR29p4ujD4ULkFt3V5LwU+Xt8n78z3DKUsPfHx0veT\nIiwsR3L7S04K0lRrJexrAoXbQEYSbaReKyMMlRdlm60C0AY+HdX6k3cPoS61\ng3G/I0So3OGO+4mGNl10qkdeqYHiTTbNWHFiPLCXuZyC3aE5AxrYhKX7+1nb\nKqHn5tMTt4HILtgkorS1UJrNJwt4nwc4dtNLb1QD+MeNVZ3OLCwFo78dXyI9\nH7aT4IsF+FoQLGKAW4Z27X2jxr7+tjpe4pQc6Fi8Ngce97JdRqPhBBgcMlvd\nZMgQf/LS1IMKS3pKWeSP2Edrbt0JW+2/KU10l9cnNILhadjr1RC3xxGfkkO4\nyzRYXWrB/5/P9L6+okMZ9KAoPzdXWN7HpIhOogBJ5R+6lqtes6oQWO5DnPXB\nqEdD\r\n=UPdV\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"chalkerx@gmail.com","name":"chalker"},{"email":"felix@debuggable.com","name":"felixge"},{"email":"npmspam@geekhood.net","name":"kornel"},{"email":"nathanael.dmc@outlook.fr","name":"quantumsheep"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"tim@fostle.com","name":"tim-smart"},{"email":"opensource@tunnckocore.com","name":"tunnckocore"},{"email":"xargs@disroot.org","name":"xargs"}],"_npmUser":{"name":"tunnckocore","email":"opensource@tunnckocore.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formidable_1.2.2_1582643289567_0.8844181760586558"},"_hasShrinkwrap":false},"2.0.0-canary.20200226.1":{"name":"formidable","version":"2.0.0-canary.20200226.1","license":"MIT","description":"A node.js module for parsing form data, especially file uploads.","homepage":"https://github.com/node-formidable/formidable","funding":"https://ko-fi.com/tunnckoCore/commissions","repository":{"type":"git","url":"git+https://github.com/node-formidable/formidable.git"},"main":"./src/index.js","publishConfig":{"access":"public","tag":"canary"},"scripts":{"bench":"node benchmark","fmt":"yarn run fmt:prepare '**/*'","fmt:prepare":"prettier --write","lint":"yarn run lint:prepare .","lint:prepare":"eslint --cache --fix --quiet --format codeframe","pretest":"yarn del ./test/tmp","postpretest":"yarn make-dir ./test/tmp","reinstall":"yarn del ./node_modules ./yarn.lock","postreinstall":"yarn setup","setup":"yarn","test":"yarn node test/run.js","pretest:ci":"yarn pretest","test:ci":"nyc node test/run.js","test:jest":"jest --coverage"},"dependencies":{"dezalgo":"^1.0.3","once":"^1.4.0"},"devDependencies":{"@commitlint/cli":"^8.3.5","@commitlint/config-conventional":"^8.3.4","@tunnckocore/prettier-config":"^1.3.3","del-cli":"^3.0.0","eslint":"^6.8.0","eslint-config-airbnb-base":"^14.0.0","eslint-config-prettier":"^6.10.0","eslint-plugin-import":"^2.20.1","eslint-plugin-prettier":"^3.1.2","express":"^4.17.1","husky":"^4.2.2","jest":"^25.1.0","koa":"^2.11.0","lint-staged":"^10.0.7","make-dir-cli":"^2.0.0","nyc":"^15.0.0","prettier":"^1.19.1","prettier-plugin-pkgjson":"^0.2.3","request":"^2.88.2","supertest":"^4.0.2","urun":"^0.0.8","utest":"^0.0.8"},"husky":{"hooks":{"pre-commit":"git status --porcelain && yarn lint-staged","commit-msg":"yarn commitlint -E HUSKY_GIT_PARAMS"}},"commitlint":{"extends":["@commitlint/config-conventional"]},"lint-staged":{"!*.{js,jsx,ts,tsx}":["yarn run fmt:prepare"],"*.{js,jsx,ts,tsx}":["yarn run lint"]},"renovate":{"extends":["@tunnckocore"]},"readme":"<p align=\"center\">\n  <img alt=\"npm formidable package logo\" src=\"https://raw.githubusercontent.com/node-formidable/formidable/master/logo.png\" />\n</p>\n\n# formidable [![npm version][npmv-img]][npmv-url] [![MIT license][license-img]][license-url] [![Libera Manifesto][libera-manifesto-img]][libera-manifesto-url] [![Twitter][twitter-img]][twitter-url]\n\n> A Node.js module for parsing form data, especially file uploads.\n\n[![Code style][codestyle-img]][codestyle-url]\n[![codecoverage][codecov-img]][codecov-url]\n[![linux build status][linux-build-img]][build-url]\n[![windows build status][windows-build-img]][build-url]\n[![macos build status][macos-build-img]][build-url]\n\nIf you have any _how-to_ kind of questions, please read the [Contributing\nGuide][contributing-url] and [Code of Conduct][code_of_conduct-url]\ndocuments.<br /> For bugs reports and feature requests, [please create an\nissue][open-issue-url] or ping [@tunnckoCore](https://twitter.com/tunnckoCore)\nat Twitter.\n\n[![Conventional Commits][ccommits-img]][ccommits-url]\n[![Minimum Required Nodejs][nodejs-img]][npmv-url]\n[![Tidelift Subcsription][tidelift-img]][tidelift-url]\n[![Buy me a Kofi][kofi-img]][kofi-url]\n[![Renovate App Status][renovateapp-img]][renovateapp-url]\n[![Make A Pull Request][prs-welcome-img]][prs-welcome-url]\n\nThis project is [semantically versioned](https://semver.org) and available as\npart of the [Tidelift Subscription][tidelift-url] for professional grade\nassurances, enhanced support and security.\n[Learn more.](https://tidelift.com/subscription/pkg/npm-formidable?utm_source=npm-formidable&utm_medium=referral&utm_campaign=enterprise)\n\n_The maintainers of `formidable` and thousands of other packages are working\nwith Tidelift to deliver commercial support and maintenance for the Open Source\ndependencies you use to build your applications. Save time, reduce risk, and\nimprove code health, while paying the maintainers of the exact dependencies you\nuse._\n\n[![][npm-weekly-img]][npmv-url] [![][npm-monthly-img]][npmv-url]\n[![][npm-yearly-img]][npmv-url] [![][npm-alltime-img]][npmv-url]\n\n## Status: Maintained [![npm version][npmv-canary-img]][npmv-url]\n\nThis module was initially developed by\n[**@felixge**](https://github.com/felixge) for\n[Transloadit](http://transloadit.com/), a service focused on uploading and\nencoding images and videos. It has been battle-tested against hundreds of GBs of\nfile uploads from a large variety of clients and is considered production-ready\nand is used in production for years.\n\nCurrently, we are few maintainers trying to deal with it. :) More contributors\nare always welcome! :heart: Jump on\n[issue #412](https://github.com/felixge/node-formidable/issues/412) which is\nclosed, but if you are interested we can discuss it and add you after strict\nrules, like enabling Two-Factor Auth in your npm and GitHub accounts.\n\n_**Note:** The github `master` branch is a \"canary\" branch - try it with\n`npm i formidable@canary`. Do not expect (for now) things from it to be inside\nthe`latest` \"dist-tag\" in the Npm. The`formidable@latest`is the`v1.2.1` version\nand probably it will be the last`v1` release!_\n\n_**Note: v2 is coming soon!**_\n\n## Highlights\n\n- [Fast (~900-2500 mb/sec)](#benchmarks) & streaming multipart parser\n- Automatically writing file uploads to disk (soon optionally)\n- [Plugins API](#useplugin-plugin) - allowing custom parsers and plugins\n- Low memory footprint\n- Graceful error handling\n- Very high test coverage\n\n## Install\n\nThis project requires `Node.js >= 10.13`. Install it using\n[yarn](https://yarnpkg.com) or [npm](https://npmjs.com).<br /> _We highly\nrecommend to use Yarn when you think to contribute to this project._\n\n```sh\nnpm install formidable\n# or the canary version\nnpm install formidable@canary\n```\n\nor with Yarn v1/v2\n\n```sh\nyarn add formidable\n# or the canary version\nyarn add formidable@canary\n```\n\nThis is a low-level package, and if you're using a high-level framework it _may_\nalready be included. Check the examples below and the `examples/` folder.\n\n## Examples\n\nFor more examples look at the `examples/` directory.\n\n### with Node.js http module\n\nParse an incoming file upload, with the\n[Node.js's built-in `http` module](https://nodejs.org/api/http.html).\n\n```js\nconst http = require('http');\nconst formidable = require('formidable');\n\nconst server = http.createServer((req, res) => {\n  if (req.url === '/api/upload' && req.method.toLowerCase() === 'post') {\n    // parse a file upload\n    const form = formidable({ multiples: true });\n\n    form.parse(req, (err, fields, files) => {\n      res.writeHead(200, { 'content-type': 'application/json' });\n      res.end(JSON.stringify({ fields, files }, null, 2));\n    });\n\n    return;\n  }\n\n  // show a file upload form\n  res.writeHead(200, { 'content-type': 'text/html' });\n  res.end(`\n    <h2>With Node.js <code>\"http\"</code> module</h2>\n    <form action=\"/api/upload\" enctype=\"multipart/form-data\" method=\"post\">\n      <div>Text field title: <input type=\"text\" name=\"title\" /></div>\n      <div>File: <input type=\"file\" name=\"multipleFiles\" multiple=\"multiple\" /></div>\n      <input type=\"submit\" value=\"Upload\" />\n    </form>\n  `);\n});\n\nserver.listen(8080, () => {\n  console.log('Server listening on http://localhost:8080/ ...');\n});\n```\n\n### with Express.js\n\nThere are multiple variants to do this, but Formidable just need Node.js Request\nstream, so something like the following example should work just fine, without\nany third-party [Express.js](https://ghub.now.sh/express) middleware.\n\nOr try the\n[examples/with-express.js](https://github.com/node-formidable/node-formidable/blob/master/examples/with-express.js)\n\n```js\nconst express = require('express');\nconst formidable = require('formidable');\n\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send(`\n    <h2>With <code>\"express\"</code> npm package</h2>\n    <form action=\"/api/upload\" enctype=\"multipart/form-data\" method=\"post\">\n      <div>Text field title: <input type=\"text\" name=\"title\" /></div>\n      <div>File: <input type=\"file\" name=\"someExpressFiles\" multiple=\"multiple\" /></div>\n      <input type=\"submit\" value=\"Upload\" />\n    </form>\n  `);\n});\n\napp.post('/api/upload', (req, res, next) => {\n  const form = formidable({ multiples: true });\n\n  form.parse(req, (err, fields, files) => {\n    if (err) {\n      next(err);\n      return;\n    }\n    res.json({ fields, files });\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on http://localhost:3000 ...');\n});\n```\n\n### with Koa and Formidable\n\nOf course, with [Koa v1, v2 or future v3](https://ghub.now.sh/koa) the things\nare very similar. You can use `formidable` manually as shown below or through\nthe [koa-better-body](https://ghub.now.sh/koa-better-body) package which is\nusing `formidable` under the hood and support more features and different\nrequest bodies, check its documentation for more info.\n\n_Note: this example is assuming Koa v2. Be aware that you should pass `ctx.req`\nwhich is Node.js's Request, and **NOT** the `ctx.request` which is Koa's Request\nobject - there is a difference._\n\n```js\nconst Koa = require('koa');\nconst formidable = require('formidable');\n\nconst app = new Koa();\n\napp.on('error', (err) => {\n  console.error('server error', err);\n});\n\napp.use(async (ctx, next) => {\n  if (ctx.url === '/api/upload' && ctx.method.toLowerCase() === 'post') {\n    const form = formidable({ multiples: true });\n\n    // not very elegant, but that's for now if you don't want touse `koa-better-body`\n    // or other middlewares.\n    await new Promise((resolve, reject) => {\n      form.parse(ctx.req, (err, fields, files) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        ctx.set('Content-Type', 'application/json');\n        ctx.status = 200;\n        ctx.state = { fields, files };\n        ctx.body = JSON.stringify(ctx.state, null, 2);\n        resolve();\n      });\n    });\n    await next();\n    return;\n  }\n\n  // show a file upload form\n  ctx.set('Content-Type', 'text/html');\n  ctx.status = 200;\n  ctx.body = `\n    <h2>With <code>\"koa\"</code> npm package</h2>\n    <form action=\"/api/upload\" enctype=\"multipart/form-data\" method=\"post\">\n    <div>Text field title: <input type=\"text\" name=\"title\" /></div>\n    <div>File: <input type=\"file\" name=\"koaFiles\" multiple=\"multiple\" /></div>\n    <input type=\"submit\" value=\"Upload\" />\n    </form>\n  `;\n});\n\napp.use((ctx) => {\n  console.log('The next middleware is called');\n  console.log('Results:', ctx.state);\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on http://localhost:3000 ...');\n});\n```\n\n## Benchmarks\n\nThe benchmark is quite old, from the old codebase. But maybe quite true though.\nPreviously the numbers was around ~500 mb/sec. Currently with moving to the new\nNode.js Streams API it's faster. You can clearly see the differences between the\nNode versions.\n\n_Note: a lot better benchmarking could and should be done in future._\n\nBenchmarked on 8GB RAM, Xeon X3440 (2.53 GHz, 4 cores, 8 threads)\n\n```\n~/github/node-formidable master\n❯ nve --parallel 8 10 12 13 node benchmark/bench-multipart-parser.js\n\n ⬢  Node 8\n\n1261.08 mb/sec\n\n ⬢  Node 10\n\n1113.04 mb/sec\n\n ⬢  Node 12\n\n2107.00 mb/sec\n\n ⬢  Node 13\n\n2566.42 mb/sec\n```\n\n![benchmark January 29th, 2020](./benchmark/2020-01-29_xeon-x3440.png)\n\n## API\n\n### Formidable / IncomingForm\n\nAll shown are equivalent.\n\n_Please pass [`options`](#options) to the function/constructor, not by assigning\nthem to the instance `form`_\n\n```js\nconst formidable = require('formidable');\nconst form = formidable(options);\n\n// or\nconst { formidable } = require('formidable');\nconst form = formidable(options);\n\n// or\nconst { IncomingForm } = require('formidable');\nconst form = new IncomingForm(options);\n\n// or\nconst { Formidable } = require('formidable');\nconst form = new Formidable(options);\n```\n\n### Options\n\nSee it's defaults in [src/Formidable.js](./src/Formidable.js#L14-L22) (the\n`DEFAULT_OPTIONS` constant).\n\n- `options.encoding` **{string}** - default `'utf-8'`; sets encoding for\n  incoming form fields,\n- `options.uploadDir` **{string}** - default `os.tmpdir()`; the directory for\n  placing file uploads in. You can move them later by using `fs.rename()`\n- `options.keepExtensions` **{boolean}** - default `false`; to include the\n  extensions of the original files or not\n- `options.maxFileSize` **{number}** - default `200 * 1024 * 1024` (200mb);\n  limit the size of uploaded file.\n- `options.maxFields` **{number}** - default `1000`; limit the number of fields\n  that the Querystring parser will decode, set 0 for unlimited\n- `options.maxFieldsSize` **{number}** - default `20 * 1024 * 1024` (20mb);\n  limit the amount of memory all fields together (except files) can allocate in\n  bytes.\n- `options.hash` **{boolean}** - default `false`; include checksums calculated\n  for incoming files, set this to some hash algorithm, see\n  [crypto.createHash](https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options)\n  for available algorithms\n- `options.multiples` **{boolean}** - default `false`; when you call the\n  `.parse` method, the `files` argument (of the callback) will contain arrays of\n  files for inputs which submit multiple files using the HTML5 `multiple`\n  attribute. Also, the `fields` argument will contain arrays of values for\n  fields that have names ending with '[]'.\n\n_**Note:** If this size of combined fields, or size of some file is exceeded, an\n`'error'` event is fired._\n\n```js\n// The amount of bytes received for this form so far.\nform.bytesReceived;\n```\n\n```js\n// The expected number of bytes in this form.\nform.bytesExpected;\n```\n\n### .parse(request, callback)\n\nParses an incoming Node.js `request` containing form data. If `callback` is\nprovided, all fields and files are collected and passed to the callback.\n\n```js\nconst formidable = require('formidable');\n\nconst form = formidable({ multiples: true, uploadDir: __dirname });\n\nform.parse(req, (err, fields, files) => {\n  console.log('fields:', fields);\n  console.log('files:', files);\n});\n```\n\nYou may overwrite this method if you are interested in directly accessing the\nmultipart stream. Doing so will disable any `'field'` / `'file'` events\nprocessing which would occur otherwise, making you fully responsible for\nhandling the processing.\n\nIn the example below, we listen on couple of events and direct them to the\n`data` listener, so you can do whatever you choose there, based on whether its\nbefore the file been emitted, the header value, the header name, on field, on\nfile and etc.\n\nOr the other way could be to just override the `form.onPart` as it's shown a bit\nlater.\n\n```js\nform.once('error', console.error);\n\nform.on('fileBegin', (filename, file) => {\n  form.emit('data', { name: 'fileBegin', filename, value: file });\n});\n\nform.on('file', (filename, file) => {\n  form.emit('data', { name: 'file', key: filename, value: file });\n});\n\nform.on('field', (fieldName, fieldValue) => {\n  form.emit('data', { name: 'field', key: fieldName, value: fieldValue });\n});\n\nform.once('end', () => {\n  console.log('Done!');\n});\n\n// If you want to customize whatever you want...\nform.on('data', ({ name, key, value, buffer, start, end, ...more }) => {\n  if (name === 'partBegin') {\n  }\n  if (name === 'partData') {\n  }\n  if (name === 'headerField') {\n  }\n  if (name === 'headerValue') {\n  }\n  if (name === 'headerEnd') {\n  }\n  if (name === 'headersEnd') {\n  }\n  if (name === 'field') {\n    console.log('field name:', key);\n    console.log('field value:', value);\n  }\n  if (name === 'file') {\n    console.log('file:', key, value);\n  }\n  if (name === 'fileBegin') {\n    console.log('fileBegin:', key, value);\n  }\n});\n```\n\n### .use(plugin: Plugin)\n\nA method that allows you to extend the Formidable library. By default we include\n4 plugins, which esentially are adapters to plug the different built-in parsers.\n\n**The plugins added by this method are always enabled.**\n\n_See [src/plugins/](./src/plugins/) for more detailed look on default plugins._\n\nThe `plugin` param has such signature:\n\n```typescript\nfunction(formidable: Formidable, options: Options): void;\n```\n\nThe architecture is simple. The `plugin` is a function that is passed with the\nFormidable instance (the `form` across the README examples) and the options.\n\n**Note:** the plugin function's `this` context is also the same instance.\n\n```js\nconst formidable = require('formidable');\n\nconst form = formidable({ keepExtensions: true });\n\nform.use((self, options) => {\n  // self === this === form\n  console.log('woohoo, custom plugin');\n  // do your stuff; check `src/plugins` for inspiration\n});\n\nform.parse(req, (error, fields, files) => {\n  console.log('done!');\n});\n```\n\n**Important to note**, is that inside plugin `this.options`, `self.options` and\n`options` MAY or MAY NOT be the same. General best practice is to always use the\n`this`, so you can later test your plugin independently and more easily.\n\nIf you want to disable some parsing capabilities of Formidable, you can disable\nthe plugin which corresponds to the parser. For example, if you want to disable\nmultipart parsing (so the [src/parsers/Multipart.js](./src/parsers/Multipart.js)\nwhich is used in [src/plugins/multipart.js](./src/plugins/multipart.js)), then\nyou can remove it from the `options.enabledPlugins`, like so\n\n```js\nconst { Formidable } = require('formidable');\n\nconst form = new Formidable({\n  hash: 'sha1',\n  enabledPlugins: ['octetstream', 'querystring', 'json'],\n});\n```\n\n**Be aware** that the order _MAY_ be important too. The names corresponds 1:1 to\nfiles in [src/plugins/](./src/plugins) folder.\n\nPull requests for new built-in plugins MAY be accepted - for example, more\nadvanced querystring parser. Add your plugin as a new file in `src/plugins/`\nfolder (lowercased) and follow how the other plugins are made.\n\n### form.onPart\n\nIf you want to use Formidable to only handle certain parts for you, you can do\nsomething similar. Or see\n[#387](https://github.com/node-formidable/node-formidable/issues/387) for\ninspiration, you can for example validate the mime-type.\n\n```js\nconst form = formidable();\n\nform.onPart = (part) => {\n  part.on('data', (buffer) {\n    // do whatever you want here\n  });\n};\n```\n\nFor example, force Formidable to be used only on non-file \"parts\" (i.e., html\nfields)\n\n```js\nconst form = formidable();\n\nform.onPart = function(part) {\n  // let formidable handle only non-file parts\n  if (part.filename === '' || !part.mime) {\n    // used internally, please do not override!\n    form.handlePart(part);\n  }\n};\n```\n\n### File\n\n```ts\nexport interface File {\n  // The size of the uploaded file in bytes.\n  // If the file is still being uploaded (see `'fileBegin'` event),\n  // this property says how many bytes of the file have been written to disk yet.\n  file.size: number;\n\n  // The path this file is being written to. You can modify this in the `'fileBegin'` event in\n  // case you are unhappy with the way formidable generates a temporary path for your files.\n  file.path: string;\n\n  // The name this file had according to the uploading client.\n  file.name: string | null;\n\n  // The mime type of this file, according to the uploading client.\n  file.type: string | null;\n\n  // A Date object (or `null`) containing the time this file was last written to.\n  // Mostly here for compatibility with the [W3C File API Draft](http://dev.w3.org/2006/webapi/FileAPI/).\n  file.lastModifiedDate: Date | null;\n\n  // If `options.hash` calculation was set, you can read the hex digest out of this var.\n  file.hash: string | 'sha1' | 'md5' | 'sha256' | null;\n}\n```\n\n#### file.toJSON()\n\nThis method returns a JSON-representation of the file, allowing you to\n`JSON.stringify()` the file which is useful for logging and responding to\nrequests.\n\n### Events\n\n#### `'progress'`\n\nEmitted after each incoming chunk of data that has been parsed. Can be used to\nroll your own progress bar.\n\n```js\nform.on('progress', (bytesReceived, bytesExpected) => {});\n```\n\n#### `'field'`\n\nEmitted whenever a field / value pair has been received.\n\n```js\nform.on('field', (name, value) => {});\n```\n\n#### `'fileBegin'`\n\nEmitted whenever a new file is detected in the upload stream. Use this event if\nyou want to stream the file to somewhere else while buffering the upload on the\nfile system.\n\n```js\nform.on('fileBegin', (name, file) => {});\n```\n\n#### `'file'`\n\nEmitted whenever a field / file pair has been received. `file` is an instance of\n`File`.\n\n```js\nform.on('file', (name, file) => {});\n```\n\n#### `'error'`\n\nEmitted when there is an error processing the incoming form. A request that\nexperiences an error is automatically paused, you will have to manually call\n`request.resume()` if you want the request to continue firing `'data'` events.\n\n```js\nform.on('error', (err) => {});\n```\n\n#### `'aborted'`\n\nEmitted when the request was aborted by the user. Right now this can be due to a\n'timeout' or 'close' event on the socket. After this event is emitted, an\n`error` event will follow. In the future there will be a separate 'timeout'\nevent (needs a change in the node core).\n\n```js\nform.on('aborted', () => {});\n```\n\n#### `'end'`\n\nEmitted when the entire request has been received, and all contained files have\nfinished flushing to disk. This is a great place for you to send your response.\n\n```js\nform.on('end', () => {});\n```\n\n## Ports & Credits\n\n- [multipart-parser](http://github.com/FooBarWidget/multipart-parser): a C++\n  parser based on formidable\n- [Ryan Dahl](http://twitter.com/ryah) for his work on\n  [http-parser](http://github.com/ry/http-parser) which heavily inspired the\n  initial `multipart_parser.js`.\n\n## Contributing\n\nIf the documentation is unclear or has a typo, please click on the page's `Edit`\nbutton (pencil icon) and suggest a correction. If you would like to help us fix\na bug or add a new feature, please check our\n[Contributing Guide](./CONTRIBUTING.md). Pull requests are welcome!\n\nThanks goes to these wonderful people\n([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://twitter.com/felixge\"><img src=\"https://avatars3.githubusercontent.com/u/15000?s=460&v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Felix Geisendörfer</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=felixge\" title=\"Code\">💻</a> <a href=\"#design-felixge\" title=\"Design\">🎨</a> <a href=\"#ideas-felixge\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=felixge\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://tunnckoCore.com\"><img src=\"https://avatars3.githubusercontent.com/u/5038030?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Charlike Mike Reagent</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AtunnckoCore\" title=\"Bug reports\">🐛</a> <a href=\"#infra-tunnckoCore\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#design-tunnckoCore\" title=\"Design\">🎨</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Code\">💻</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Documentation\">📖</a> <a href=\"#example-tunnckoCore\" title=\"Examples\">💡</a> <a href=\"#ideas-tunnckoCore\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-tunnckoCore\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/kedarv\"><img src=\"https://avatars1.githubusercontent.com/u/1365665?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kedar</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=kedarv\" title=\"Code\">💻</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=kedarv\" title=\"Tests\">⚠️</a> <a href=\"#question-kedarv\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Akedarv\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/GrosSacASac\"><img src=\"https://avatars0.githubusercontent.com/u/5721194?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Walle Cyril</b></sub></a><br /><a href=\"#question-GrosSacASac\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AGrosSacASac\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=GrosSacASac\" title=\"Code\">💻</a> <a href=\"#financial-GrosSacASac\" title=\"Financial\">💵</a> <a href=\"#ideas-GrosSacASac\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-GrosSacASac\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/xarguments\"><img src=\"https://avatars2.githubusercontent.com/u/40522463?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Xargs</b></sub></a><br /><a href=\"#question-xarguments\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Axarguments\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=xarguments\" title=\"Code\">💻</a> <a href=\"#maintenance-xarguments\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Amit-A\"><img src=\"https://avatars1.githubusercontent.com/u/7987238?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Amit-A</b></sub></a><br /><a href=\"#question-Amit-A\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AAmit-A\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=Amit-A\" title=\"Code\">💻</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://charmander.me/\"><img src=\"https://avatars1.githubusercontent.com/u/1889843?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Charmander</b></sub></a><br /><a href=\"#question-charmander\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Acharmander\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=charmander\" title=\"Code\">💻</a> <a href=\"#ideas-charmander\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-charmander\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/dylan_piercey\"><img src=\"https://avatars2.githubusercontent.com/u/4985201?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Dylan Piercey</b></sub></a><br /><a href=\"#ideas-DylanPiercey\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"http://ochrona.jawne.info.pl\"><img src=\"https://avatars1.githubusercontent.com/u/3618479?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Adam Dobrawy</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Aad-m\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=ad-m\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/amitrohatgi\"><img src=\"https://avatars3.githubusercontent.com/u/12177021?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>amitrohatgi</b></sub></a><br /><a href=\"#ideas-amitrohatgi\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/fengxinming\"><img src=\"https://avatars2.githubusercontent.com/u/6262382?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jesse Feng</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Afengxinming\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://qtmsheep.com\"><img src=\"https://avatars1.githubusercontent.com/u/7271496?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Nathanael Demacon</b></sub></a><br /><a href=\"#question-quantumsheep\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=quantumsheep\" title=\"Code\">💻</a> <a href=\"https://github.com/node-formidable/node-formidable/pulls?q=is%3Apr+reviewed-by%3Aquantumsheep\" title=\"Reviewed Pull Requests\">👀</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/MunMunMiao\"><img src=\"https://avatars1.githubusercontent.com/u/18216142?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>MunMunMiao</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AMunMunMiao\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/gabipetrovay\"><img src=\"https://avatars0.githubusercontent.com/u/1170398?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Gabriel Petrovay</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Agabipetrovay\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=gabipetrovay\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Elzair\"><img src=\"https://avatars0.githubusercontent.com/u/2352818?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Philip Woods</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=Elzair\" title=\"Code\">💻</a> <a href=\"#ideas-Elzair\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/dmolim\"><img src=\"https://avatars2.githubusercontent.com/u/7090374?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Dmitry Ivonin</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=dmolim\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://audiobox.fm\"><img src=\"https://avatars1.githubusercontent.com/u/12844?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Claudio Poli</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=masterkain\" title=\"Code\">💻</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\n## License\n\nFormidable is licensed under the [MIT License][license-url].\n\n<!-- badges -->\n<!-- prettier-ignore-start -->\n\n[codestyle-url]: https://github.com/airbnb/javascript\n[codestyle-img]: https://badgen.net/badge/code%20style/airbnb%20%2B%20prettier/ff5a5f?icon=airbnb&cache=300\n[codecov-url]: https://codecov.io/gh/node-formidable/node-formidable\n[codecov-img]: https://badgen.net/codecov/c/github/node-formidable/node-formidable/master?icon=codecov\n[npmv-canary-img]: https://badgen.net/npm/v/formidable/canary?icon=npm\n[npmv-dev-img]: https://badgen.net/npm/v/formidable/dev?icon=npm\n[npmv-img]: https://badgen.net/npm/v/formidable?icon=npm\n[npmv-url]: https://npmjs.com/package/formidable\n[license-img]: https://badgen.net/npm/license/formidable\n[license-url]: https://github.com/node-formidable/node-formidable/blob/master/LICENSE\n[chat-img]: https://badgen.net/badge/chat/on%20gitter/46BC99?icon=gitter\n[chat-url]: https://gitter.im/node-formidable/Lobby\n[libera-manifesto-url]: https://liberamanifesto.com\n[libera-manifesto-img]: https://badgen.net/badge/libera/manifesto/grey\n[renovateapp-url]: https://renovatebot.com\n[renovateapp-img]: https://badgen.net/badge/renovate/enabled/green?cache=300\n[prs-welcome-img]: https://badgen.net/badge/PRs/welcome/green?cache=300\n[prs-welcome-url]: http://makeapullrequest.com\n[twitter-url]: https://twitter.com/tunnckoCore\n[twitter-img]: https://badgen.net/twitter/follow/tunnckoCore?icon=twitter&color=1da1f2&cache=300\n\n[npm-weekly-img]: https://badgen.net/npm/dw/formidable?icon=npm&cache=300\n[npm-monthly-img]: https://badgen.net/npm/dm/formidable?icon=npm&cache=300\n[npm-yearly-img]: https://badgen.net/npm/dy/formidable?icon=npm&cache=300\n[npm-alltime-img]: https://badgen.net/npm/dt/formidable?icon=npm&cache=300&label=total%20downloads\n\n[nodejs-img]: https://badgen.net/badge/node/>=%2010.13/green?cache=300\n\n[ccommits-url]: https://conventionalcommits.org/\n[ccommits-img]: https://badgen.net/badge/conventional%20commits/v1.0.0/green?cache=300\n\n[contributing-url]: https://github.com/node-formidable/node-formidable/blob/master/CONTRIBUTING.md\n[code_of_conduct-url]: https://github.com/node-formidable/node-formidable/blob/master/CODE_OF_CONDUCT.md\n\n[open-issue-url]: https://github.com/node-formidable/node-formidable/issues/new\n\n[tidelift-url]: https://tidelift.com/subscription/pkg/npm-formidable?utm_source=npm-formidable&utm_medium=referral&utm_campaign=enterprise\n[tidelift-img]: https://badgen.net/badge/tidelift/subscription/4B5168?labelColor=F6914D\n\n[kofi-url]: https://ko-fi.com/tunnckoCore/commissions\n[kofi-img]: https://badgen.net/badge/ko-fi/support/29abe0c2?cache=300&icon=https://rawcdn.githack.com/tunnckoCore/badgen-icons/f8264c6414e0bec449dd86f2241d50a9b89a1203/icons/kofi.svg\n\n[linux-build-img]: https://badgen-net.charlike.now.sh/github/checks/node-formidable/node-formidable?label=linux%20build&icon=github\n[macos-build-img]: https://badgen-net.charlike.now.sh/github/checks/node-formidable/node-formidable?label=macos%20build&icon=github\n[windows-build-img]: https://badgen-net.charlike.now.sh/github/checks/node-formidable/node-formidable?label=windows%20build&icon=github\n[build-url]: https://github.com/node-formidable/node-formidable/actions?query=workflow%3Anodejs\n<!-- prettier-ignore-end -->\n","readmeFilename":"README.md","gitHead":"1fc3034d7868d017003296577dc3b50a6af0f131","bugs":{"url":"https://github.com/node-formidable/formidable/issues"},"_id":"formidable@2.0.0-canary.20200226.1","_nodeVersion":"12.14.0","_npmVersion":"6.13.7","dist":{"integrity":"sha512-Jw0JteCIQ4Qiz0tEd7u7F8cbbLvYRt6416uYiUzTUgHAJVfxmV1Glca0KLM6BcH0X9cLhZT4KieoJkuGf7XmlQ==","shasum":"caa1619d37364e8c9bd8f678c280ef1c7d3a794b","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/formidable/-/formidable-2.0.0-canary.20200226.1.tgz","fileCount":71,"unpackedSize":2081534,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeVujWCRA9TVsSAnZWagAAaXMP/RkH/95vNLqbSahdKiM6\nUfQWaMRM+fPgzD6P+Y1q/GPQ8Ig+d1UuhOdptHdl2jOCU8tqmd1QcI86dQjC\n6c7BADmvy/Rm7QTpW9vFwwE0Du8Dzh3CoaeTW19X8FKLnny0yU7QOY6hXAfX\nMrzYMCmpl7aqF5bDO9kLJSiUeN1mtYytxytGcp7A/gYKbFiVH4K9FEqcx36t\njXVxzZEiAAoy4pzoTLXW9BP9AjRpPi8z7KDQY5btH2vTkAHiGB1OkP94t8uF\nMygyBjdTm9QUyq0LYi6zQvvIozF5eiCWtiLHVT4kVyUzTLLaH+Vr1viDCDb3\n1Vxg/03KQ+PakzwBUMBTUW87UHVNjw4jFxbm65n7i8mwFmVosPakmiA2aNE6\nreIew1CE168sahu6WHe5xiY7lfKruS70mXfejnJYnVpTxaiDPsQr6BWqAJ0D\nZxI/nW36rcqdeIVNXuaRpc4H0MVw6e8wE0bs8O4icNwYYgjXmFCVzVpt/k+p\nit0Mrq7vvgRjCvLXnXg5ey6klI2Pzi3kpKU6jDMZNf+joTlISGSuFts/Rt6d\njFc/wkhs6o6ca0MVk6R8ql50dLFeebMhV9Xt3pyBG8zKLCQEMxRxxZNZE/sS\nulbhI6hTJQ+SiQ/oa+YFtdJfexzx79u3HlvJgHkrE5VctDD2PGOYLQQ/wAGe\nhN7q\r\n=CWkA\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"felix@debuggable.com","name":"felixge"},{"email":"npmspam@geekhood.net","name":"kornel"},{"email":"nathanael.dmc@outlook.fr","name":"quantumsheep"},{"email":"opensource@tunnckocore.com","name":"tunnckocore"}],"_npmUser":{"name":"tunnckocore","email":"opensource@tunnckocore.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formidable_2.0.0-canary.20200226.1_1582754005527_0.17351514419650615"},"_hasShrinkwrap":false}},"name":"formidable","time":{"modified":"2020-03-10T13:52:42.255Z","created":"2011-01-18T21:38:52.010Z","0.3.0":"2011-01-18T21:38:52.010Z","0.4.0":"2011-01-18T21:38:52.010Z","0.5.0":"2011-01-18T21:38:52.010Z","0.6.0":"2011-01-18T21:38:52.010Z","0.7.0":"2011-01-18T21:38:52.010Z","0.8.0":"2011-01-18T21:38:52.010Z","0.9.0":"2011-01-18T21:38:52.010Z","0.9.1":"2011-01-18T21:38:52.010Z","0.9.2":"2011-01-18T21:38:52.010Z","0.9.3":"2011-01-18T21:38:52.010Z","0.9.4":"2011-01-18T21:38:52.010Z","0.9.5":"2011-01-18T21:38:52.010Z","0.9.6":"2011-01-18T21:38:52.010Z","0.9.7":"2011-01-18T21:38:52.010Z","0.9.8":"2011-01-18T21:38:52.010Z","0.9.9":"2011-01-18T21:38:52.010Z","0.9.10":"2011-01-18T21:38:52.010Z","0.9.11":"2011-01-18T21:38:52.010Z","1.0.0":"2011-04-13T20:44:27.943Z","1.0.1":"2011-04-27T12:08:45.419Z","1.0.2":"2011-05-23T10:10:50.452Z","1.0.3":"2011-09-10T22:32:10.344Z","1.0.4":"2011-09-15T21:53:54.455Z","1.0.5":"2011-09-16T19:48:47.627Z","1.0.6":"2011-09-21T06:17:40.012Z","1.0.7":"2011-11-04T09:28:17.232Z","1.0.8":"2011-11-29T07:56:38.907Z","1.0.9":"2012-03-08T10:44:43.803Z","1.0.10":"2012-06-03T20:18:59.345Z","1.0.11":"2012-06-04T10:16:26.223Z","1.0.12":"2013-02-21T14:28:48.523Z","1.0.13":"2013-03-16T19:41:26.120Z","1.0.14":"2013-05-02T21:10:20.666Z","1.0.15":"2014-06-17T11:19:21.607Z","1.0.16":"2014-12-18T10:22:52.035Z","1.0.17":"2015-02-12T08:44:50.814Z","1.1.1":"2017-01-15T21:10:51.229Z","1.2.0":"2018-03-07T13:11:31.806Z","1.2.1":"2018-03-20T15:30:05.677Z","2.0.0-canary.20200129.2":"2020-01-29T04:11:46.502Z","2.0.0-canary.20200129.3":"2020-01-29T04:43:01.893Z","2.0.0-canary.20200129.4":"2020-01-29T04:53:39.430Z","2.0.0-canary.20200129.5":"2020-01-29T05:57:54.479Z","2.0.0-canary.20200129.10":"2020-01-29T17:39:05.156Z","2.0.0-canary.20200129.32":"2020-01-29T18:33:52.093Z","2.0.0-dev.20200130.1":"2020-01-30T01:15:59.017Z","2.0.0-canary.20200131.1":"2020-01-31T08:50:23.406Z","2.0.0-dev.20200131.2":"2020-01-31T09:15:48.744Z","2.0.0-canary.20200212.1":"2020-02-12T13:43:34.842Z","1.2.2":"2020-02-25T15:08:09.762Z","2.0.0-canary.20200226.1":"2020-02-26T21:53:26.311Z"},"readmeFilename":"","_id":"formidable","homepage":"https://github.com/node-formidable/formidable"}