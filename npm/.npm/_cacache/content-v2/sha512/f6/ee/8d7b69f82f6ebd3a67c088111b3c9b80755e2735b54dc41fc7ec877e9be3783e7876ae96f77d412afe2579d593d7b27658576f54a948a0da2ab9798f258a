{"maintainers":[{"name":"jenkins-npm","email":"devops@pon.com"}],"dist-tags":{"latest":"3.0.1"},"versions":{"2.1.9":{"name":"mind-module-vehicle","version":"2.1.9","scripts":{"build":"ngc -p tsconfig.json","lint":"tslint --type-check --project tsconfig.json src/**/*.ts","test":"tsc && karma start","test-singlerun":"tsc && karma start --single-run"},"publishConfig":{"registry":"https://nexusrepo.pondevelopment.com/repository/mind-npm/"},"repository":{"type":"git","url":"git+ssh://git@bitbucket.org/pondevelopment/mind-module-template.git"},"author":{"name":"Mats Odolphij","email":"mats@odolphij.nl"},"keywords":["angular"],"license":"MIT","bugs":{"url":"https://pondevelopment.atlassian.net/"},"main":"dist/index.js","types":"dist/index.d.ts","dependencies":{"@angular/common":"^4.4.3","@angular/compiler":"^4.4.3","@angular/compiler-cli":"^4.4.3","@angular/core":"^4.4.3","@angular/http":"^4.4.3","mind-module-authentication":"^1.0.4","mind-module-error-handling":"^1.1.1","mind-module-service":"^2.0.0","rxjs":"^5.4.3","zone.js":"^0.8.17"},"devDependencies":{"@angular/platform-browser":"^4.4.3","@angular/platform-browser-dynamic":"^4.4.3","@types/jasmine":"2.5.38","@types/node":"^6.0.88","angular-mocks":"^1.6.6","codelyzer":"~2.0.0","core-js":"^2.5.1","jasmine-core":"~2.5.2","jasmine-spec-reporter":"~3.2.0","karma":"~1.4.1","karma-cli":"~1.0.1","karma-coverage":"^1.1.1","karma-coverage-istanbul-reporter":"^0.2.0","karma-jasmine":"~1.1.0","karma-jasmine-html-reporter":"^0.2.2","karma-phantomjs-launcher":"^1.0.4","karma-typescript":"^3.0.6","karma-typescript-angular2-transform":"^1.0.2","protractor":"^5.1.2","ts-node":"~2.0.0","tslint":"~4.5.0","typescript":"^2.3.4"},"engines":{"node":">=6.0.0"},"gitHead":"0b8e4a74b8732a46f4b65c743b5b78810fe2b92e","readme":"# mind-module-vehicle\n\n### Contains\nVehicle related services and utilities.<br/>\nVehicle model classes and interfaces.\n\n### Note\nThis readme explains how to use this module in your app. Including an example of how to use the \n`VehicleService`.\n\n## Installation\n\nTo install this library, run:\n\n```bash\n$ npm install mind-module-service --save\n$ npm install mind-module-vehicle --save\n```\n\nThen, include the `VehicleModule` in your Angular `NgModule`:\n\n```typescript\n\n// Import your library\nimport { VehicleModule } from 'mind-module-vehicle';\n// Import the configuration\nimport { ServiceConfig } from 'mind-module-service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    VehicleModule // <--------------------- The thingamagiggy here!\n  ],\n  providers: [\n    {\n      provide: ServiceConfig, // <--------- Note that you must provide an instance of the ServiceConfig\n      useValue: new ServiceConfig('https://pon-test.device-insight.com', 'api/v1')\n    }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\nNote that you *must* provide an instance of the `ServiceConfig` class for DI. This configuration tells the Account service where it can find the account backend.\n\nAlso you *must* have set up a `CredentialStorage` from the [`mind-module-authentication`](https://bitbucket.org/pondevelopment/mind-module-authentication). This is needed for the `VehicleService` to deal with the authenticating of any request made against the platform.\n\nThe `AccountModule` will only prepare the `AccountServiceImpl` for DI. To only depend on the `AccountService` interface, you should include a line like the one below in the providers of your `NgModule`:\n\n```typescript\n{provide: VehicleService, useExisting: VehicleServiceImpl}\n```\n\n## Using the module\n\n\n\nOnce the `VehicleService` has been injected, it provides the following API:\n\n```typescript\nclass VehicleService {\n\n  /* Retrieve the last known location of the vehicle. */\n  public getLastKnownPosition(vehicleId: number): Promise<GeoLocation>;\n\n  /* Returns the accounts (first) [[Vehicle]] or undefined if there is no vehicle linked to the account */\n  public getVehicle(): Promise<Vehicle | undefined>;\n\n  /* Returns a [[Page]] of the accounts [[Vehicle]]s */\n  public getVehicles(pageOptions: PageOptions = new PageOptions()): Promise<Page<Vehicle>>;\n\n  /* Returns the [[Vehicle]] associated with the given ID */\n  public getVehicleById(vehicleId: number): Promise<Vehicle>;\n}\n```\n\nIf the `VehicleService` has been configured to be injected, simply inject into the dependent classes:\n\n```typescript\nimport { VehicleService } from 'mind-module-vehicle';\n\nclass MyComponent {\n  constructor(private vehicleService: VehicleService) {}\n\n  vehicleLocation(vehicleId: string) {\n    data = this.vehicleService\n      .getLastKnownPosition(vehicleId)\n      .then(this.doSomethingWithTheVehicleLocation);\n  }  \n}\n```\n\n## Development\n\nTo generate all `*.js`, `*.js.map` and `*.d.ts` files:\n\n```bash\n$ npm run tsc\n```\n\nAfterwards, the compiled `js` files can be found in the `./dist` directory.\n\nTo lint all `*.ts` files:\n\n```bash\n$ npm run lint\n```\n\nDuring development the unit tests can automatically be run using PhantomJS:\n\n```bash\n$ npm test\n```\n\nWhen a file has been changed/added/deleted, the tests will automatically be rerun.\n\nThe coverage of the tests will be monitored. The results can be found in: `./coverage/PhantomJS <some version and platform>/index.html`. To view the results, simply open this file in your favorite browser (supporting javascript).\n\nTo test your changes locally in an angular app, you could link this module to your global `node_modules` without publishing the module:\n\n```bash\n$ cd /path/to/mind-module-vehicle/\n$ npm link\n$ cd /path/to/your/angular2/app/\n$ npm link mind-module-vehicle\n```\n\nThis will create a symlink between the `mind-module-vehicle` and the `node_modules` of your angular 2 app.\n\n## License\n\nMIT Â© [Mind mobility](mailto:info@mindmobility.nl)\n","readmeFilename":"README.md","description":"### Contains Vehicle related services and utilities.<br/> Vehicle model classes and interfaces.","homepage":"https://bitbucket.org/pondevelopment/mind-module-template#readme","_id":"mind-module-vehicle@2.1.9","_npmVersion":"5.6.0","_nodeVersion":"7.8.0","_npmUser":{"name":"ponJenkinsIntegration","email":"info@pondevelopment.com"},"maintainers":[{"name":"ponJenkinsIntegration","email":"info@pondevelopment.com"}],"dist":{"integrity":"sha512-VihEmeKCp8wVXVhfizjJ+yMBuTSyHjI0kTnZmgzVP3kSF7fTLiyLt1dE5OHzncnsB4YwGlWesLug7ri6Tf5zkA==","shasum":"c5fa8edbbd65d39c744e02cd5d30474a3cb4e6d5","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/mind-module-vehicle/-/mind-module-vehicle-2.1.9.tgz"}},"3.0.0":{"name":"mind-module-vehicle","version":"3.0.0","scripts":{"build":"ngc -p tsconfig.json","lint":"tslint --type-check --project tsconfig.json src/**/*.ts","test":"tsc && karma start","test-singlerun":"tsc && karma start --single-run"},"publishConfig":{"registry":"https://nexusrepo.pondevelopment.com/repository/mind-npm/"},"repository":{"type":"git","url":"git+ssh://git@bitbucket.org/pondevelopment/mind-module-template.git"},"author":{"name":"Mats Odolphij","email":"mats@odolphij.nl"},"keywords":["angular"],"license":"MIT","bugs":{"url":"https://pondevelopment.atlassian.net/"},"main":"dist/index.js","types":"dist/index.d.ts","dependencies":{"@angular/common":"7.2.2","@angular/compiler":"7.2.2","@angular/compiler-cli":"7.2.2","@angular/core":"7.2.2","@angular/http":"7.2.2","mind-module-authentication":"^1.0.4","mind-module-error-handling":"^1.1.1","mind-module-service":"^2.0.0","rxjs":"6.5.1","rxjs-compat":"^6.5.2","zone.js":"^0.8.17"},"devDependencies":{"@angular/platform-browser":"7.2.2","@angular/platform-browser-dynamic":"7.2.2","@types/jasmine":"2.5.38","@types/node":"^6.0.88","angular-mocks":"^1.6.6","codelyzer":"~2.0.0","core-js":"^2.5.1","jasmine-core":"~2.5.2","jasmine-spec-reporter":"~3.2.0","karma":"~4.1.0","karma-chrome-launcher":"~2.2.0","karma-cli":"~1.0.1","karma-coverage":"^1.1.1","karma-coverage-istanbul-reporter":"~2.0.1","karma-jasmine":"~1.1.2","karma-jasmine-html-reporter":"^0.2.2","karma-phantomjs-launcher":"^1.0.4","karma-typescript":"^3.0.0","karma-typescript-angular2-transform":"^1.0.0","protractor":"^5.1.2","ts-node":"~2.0.0","tslint":"~4.5.0","typescript":"~3.1.6"},"engines":{"node":">=6.0.0"},"gitHead":"94b30112b1f4b788c4141d521a50606fef633be9","readme":"# mind-module-vehicle\n\n### Contains\nVehicle related services and utilities.<br/>\nVehicle model classes and interfaces.\n\n### Note\nThis readme explains how to use this module in your app. Including an example of how to use the \n`VehicleService`.\n\n## Installation\n\nTo install this library, run:\n\n```bash\n$ npm install mind-module-service --save\n$ npm install mind-module-vehicle --save\n```\n\nThen, include the `VehicleModule` in your Angular `NgModule`:\n\n```typescript\n\n// Import your library\nimport { VehicleModule } from 'mind-module-vehicle';\n// Import the configuration\nimport { ServiceConfig } from 'mind-module-service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    VehicleModule // <--------------------- The thingamagiggy here!\n  ],\n  providers: [\n    {\n      provide: ServiceConfig, // <--------- Note that you must provide an instance of the ServiceConfig\n      useValue: new ServiceConfig('https://pon-test.device-insight.com', 'api/v1')\n    }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\nNote that you *must* provide an instance of the `ServiceConfig` class for DI. This configuration tells the Account service where it can find the account backend.\n\nAlso you *must* have set up a `CredentialStorage` from the [`mind-module-authentication`](https://bitbucket.org/pondevelopment/mind-module-authentication). This is needed for the `VehicleService` to deal with the authenticating of any request made against the platform.\n\nThe `AccountModule` will only prepare the `AccountServiceImpl` for DI. To only depend on the `AccountService` interface, you should include a line like the one below in the providers of your `NgModule`:\n\n```typescript\n{provide: VehicleService, useExisting: VehicleServiceImpl}\n```\n\n## Using the module\n\n\n\nOnce the `VehicleService` has been injected, it provides the following API:\n\n```typescript\nclass VehicleService {\n\n  /* Retrieve the last known location of the vehicle. */\n  public getLastKnownPosition(vehicleId: number): Promise<GeoLocation>;\n\n  /* Returns the accounts (first) [[Vehicle]] or undefined if there is no vehicle linked to the account */\n  public getVehicle(): Promise<Vehicle | undefined>;\n\n  /* Returns a [[Page]] of the accounts [[Vehicle]]s */\n  public getVehicles(pageOptions: PageOptions = new PageOptions()): Promise<Page<Vehicle>>;\n\n  /* Returns the [[Vehicle]] associated with the given ID */\n  public getVehicleById(vehicleId: number): Promise<Vehicle>;\n}\n```\n\nIf the `VehicleService` has been configured to be injected, simply inject into the dependent classes:\n\n```typescript\nimport { VehicleService } from 'mind-module-vehicle';\n\nclass MyComponent {\n  constructor(private vehicleService: VehicleService) {}\n\n  vehicleLocation(vehicleId: string) {\n    data = this.vehicleService\n      .getLastKnownPosition(vehicleId)\n      .then(this.doSomethingWithTheVehicleLocation);\n  }  \n}\n```\n\n## Development\n\nTo generate all `*.js`, `*.js.map` and `*.d.ts` files:\n\n```bash\n$ npm run tsc\n```\n\nAfterwards, the compiled `js` files can be found in the `./dist` directory.\n\nTo lint all `*.ts` files:\n\n```bash\n$ npm run lint\n```\n\nDuring development the unit tests can automatically be run using PhantomJS:\n\n```bash\n$ npm test\n```\n\nWhen a file has been changed/added/deleted, the tests will automatically be rerun.\n\nThe coverage of the tests will be monitored. The results can be found in: `./coverage/PhantomJS <some version and platform>/index.html`. To view the results, simply open this file in your favorite browser (supporting javascript).\n\nTo test your changes locally in an angular app, you could link this module to your global `node_modules` without publishing the module:\n\n```bash\n$ cd /path/to/mind-module-vehicle/\n$ npm link\n$ cd /path/to/your/angular2/app/\n$ npm link mind-module-vehicle\n```\n\nThis will create a symlink between the `mind-module-vehicle` and the `node_modules` of your angular 2 app.\n\n## License\n\nMIT Â© [Mind mobility](mailto:info@mindmobility.nl)\n","readmeFilename":"README.md","description":"### Contains Vehicle related services and utilities.<br/> Vehicle model classes and interfaces.","homepage":"https://bitbucket.org/pondevelopment/mind-module-template#readme","_id":"mind-module-vehicle@3.0.0","_npmVersion":"5.6.0","_nodeVersion":"8.11.4","_npmUser":{"name":"jenkins-npm","email":"devops@pon.com"},"maintainers":[{"name":"jenkins-npm","email":"devops@pon.com"}],"dist":{"integrity":"sha512-knNEAdQNaxAWnAVmdLoFhg2AMQo9QxJ6SICFeNJUDweCzYzt2++l4kx8aWW6esgZr//nySmqBX+kZjbnufa9Iw==","shasum":"da3a10d44917c3d742bd3de8c9a2134f6a0809ba","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/mind-module-vehicle/-/mind-module-vehicle-3.0.0.tgz"}},"3.0.1":{"name":"mind-module-vehicle","version":"3.0.1","scripts":{"build":"ngc -p tsconfig.json","lint":"tslint --type-check --project tsconfig.json src/**/*.ts","test":"tsc && karma start","test-singlerun":"tsc && karma start --single-run"},"publishConfig":{"registry":"https://nexusrepo.pondevelopment.com/repository/mind-npm/"},"repository":{"type":"git","url":"git+ssh://git@bitbucket.org/pondevelopment/mind-module-template.git"},"author":{"name":"Mats Odolphij","email":"mats@odolphij.nl"},"keywords":["angular"],"license":"MIT","bugs":{"url":"https://pondevelopment.atlassian.net/"},"main":"dist/index.js","types":"dist/index.d.ts","dependencies":{"@angular/common":"7.2.2","@angular/compiler":"7.2.2","@angular/compiler-cli":"7.2.2","@angular/core":"7.2.2","@angular/http":"7.2.2","mind-module-authentication":"^1.0.4","mind-module-error-handling":"^1.1.1","mind-module-service":"2.1.2","rxjs":"6.5.1","rxjs-compat":"^6.5.2","zone.js":"^0.8.17"},"devDependencies":{"@angular/platform-browser":"7.2.2","@angular/platform-browser-dynamic":"7.2.2","@types/jasmine":"2.5.38","@types/node":"^6.0.88","angular-mocks":"^1.6.6","codelyzer":"~2.0.0","core-js":"^2.5.1","jasmine-core":"~2.5.2","jasmine-spec-reporter":"~3.2.0","karma":"~4.1.0","karma-chrome-launcher":"~2.2.0","karma-cli":"~1.0.1","karma-coverage":"^1.1.1","karma-coverage-istanbul-reporter":"~2.0.1","karma-jasmine":"~1.1.2","karma-jasmine-html-reporter":"^0.2.2","karma-typescript":"^3.0.6","karma-typescript-angular2-transform":"^1.0.2","protractor":"^5.1.2","ts-node":"~2.0.0","tslint":"~4.5.0","typescript":"~3.1.6"},"engines":{"node":">=6.0.0"},"gitHead":"296ea09da1dc4f89497c6efd6989e791cc41b5ce","readme":"# mind-module-vehicle\n\n### Contains\nVehicle related services and utilities.<br/>\nVehicle model classes and interfaces.\n\n### Note\nThis readme explains how to use this module in your app. Including an example of how to use the \n`VehicleService`.\n\n## Installation\n\nTo install this library, run:\n\n```bash\n$ npm install mind-module-service --save\n$ npm install mind-module-vehicle --save\n```\n\nThen, include the `VehicleModule` in your Angular `NgModule`:\n\n```typescript\n\n// Import your library\nimport { VehicleModule } from 'mind-module-vehicle';\n// Import the configuration\nimport { ServiceConfig } from 'mind-module-service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    VehicleModule // <--------------------- The thingamagiggy here!\n  ],\n  providers: [\n    {\n      provide: ServiceConfig, // <--------- Note that you must provide an instance of the ServiceConfig\n      useValue: new ServiceConfig('https://pon-test.device-insight.com', 'api/v1')\n    }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\nNote that you *must* provide an instance of the `ServiceConfig` class for DI. This configuration tells the Account service where it can find the account backend.\n\nAlso you *must* have set up a `CredentialStorage` from the [`mind-module-authentication`](https://bitbucket.org/pondevelopment/mind-module-authentication). This is needed for the `VehicleService` to deal with the authenticating of any request made against the platform.\n\nThe `AccountModule` will only prepare the `AccountServiceImpl` for DI. To only depend on the `AccountService` interface, you should include a line like the one below in the providers of your `NgModule`:\n\n```typescript\n{provide: VehicleService, useExisting: VehicleServiceImpl}\n```\n\n## Using the module\n\n\n\nOnce the `VehicleService` has been injected, it provides the following API:\n\n```typescript\nclass VehicleService {\n\n  /* Retrieve the last known location of the vehicle. */\n  public getLastKnownPosition(vehicleId: number): Promise<GeoLocation>;\n\n  /* Returns the accounts (first) [[Vehicle]] or undefined if there is no vehicle linked to the account */\n  public getVehicle(): Promise<Vehicle | undefined>;\n\n  /* Returns a [[Page]] of the accounts [[Vehicle]]s */\n  public getVehicles(pageOptions: PageOptions = new PageOptions()): Promise<Page<Vehicle>>;\n\n  /* Returns the [[Vehicle]] associated with the given ID */\n  public getVehicleById(vehicleId: number): Promise<Vehicle>;\n}\n```\n\nIf the `VehicleService` has been configured to be injected, simply inject into the dependent classes:\n\n```typescript\nimport { VehicleService } from 'mind-module-vehicle';\n\nclass MyComponent {\n  constructor(private vehicleService: VehicleService) {}\n\n  vehicleLocation(vehicleId: string) {\n    data = this.vehicleService\n      .getLastKnownPosition(vehicleId)\n      .then(this.doSomethingWithTheVehicleLocation);\n  }  \n}\n```\n\n## Development\n\nTo generate all `*.js`, `*.js.map` and `*.d.ts` files:\n\n```bash\n$ npm run tsc\n```\n\nAfterwards, the compiled `js` files can be found in the `./dist` directory.\n\nTo lint all `*.ts` files:\n\n```bash\n$ npm run lint\n```\n\nDuring development the unit tests can automatically be run using PhantomJS:\n\n```bash\n$ npm test\n```\n\nWhen a file has been changed/added/deleted, the tests will automatically be rerun.\n\nThe coverage of the tests will be monitored. The results can be found in: `./coverage/PhantomJS <some version and platform>/index.html`. To view the results, simply open this file in your favorite browser (supporting javascript).\n\nTo test your changes locally in an angular app, you could link this module to your global `node_modules` without publishing the module:\n\n```bash\n$ cd /path/to/mind-module-vehicle/\n$ npm link\n$ cd /path/to/your/angular2/app/\n$ npm link mind-module-vehicle\n```\n\nThis will create a symlink between the `mind-module-vehicle` and the `node_modules` of your angular 2 app.\n\n## License\n\nMIT Â© [Mind mobility](mailto:info@mindmobility.nl)\n","readmeFilename":"README.md","description":"### Contains Vehicle related services and utilities.<br/> Vehicle model classes and interfaces.","homepage":"https://bitbucket.org/pondevelopment/mind-module-template#readme","_id":"mind-module-vehicle@3.0.1","_nodeVersion":"8.17.0","_npmVersion":"6.13.4","_npmUser":{"name":"jenkins-npm","email":"devops@pon.com"},"maintainers":[{"name":"jenkins-npm","email":"devops@pon.com"}],"dist":{"integrity":"sha512-oN7GrOymrrT6bCIhQHi8mudteH/NtKkmx3ttS9oS0Ge78VkHA+l4JXLarmsony/GS8xby0S9SIIWPBeFaXRC3A==","shasum":"0acb4fcc6aa0d1b8689af07a2cbce2369e0661a1","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/mind-module-vehicle/-/mind-module-vehicle-3.0.1.tgz"}}},"name":"mind-module-vehicle","_rev":"152","description":"### Contains Vehicle related services and utilities.<br/> Vehicle model classes and interfaces.","readme":"# mind-module-vehicle\n\n### Contains\nVehicle related services and utilities.<br/>\nVehicle model classes and interfaces.\n\n### Note\nThis readme explains how to use this module in your app. Including an example of how to use the \n`VehicleService`.\n\n## Installation\n\nTo install this library, run:\n\n```bash\n$ npm install mind-module-service --save\n$ npm install mind-module-vehicle --save\n```\n\nThen, include the `VehicleModule` in your Angular `NgModule`:\n\n```typescript\n\n// Import your library\nimport { VehicleModule } from 'mind-module-vehicle';\n// Import the configuration\nimport { ServiceConfig } from 'mind-module-service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    VehicleModule // <--------------------- The thingamagiggy here!\n  ],\n  providers: [\n    {\n      provide: ServiceConfig, // <--------- Note that you must provide an instance of the ServiceConfig\n      useValue: new ServiceConfig('https://pon-test.device-insight.com', 'api/v1')\n    }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\nNote that you *must* provide an instance of the `ServiceConfig` class for DI. This configuration tells the Account service where it can find the account backend.\n\nAlso you *must* have set up a `CredentialStorage` from the [`mind-module-authentication`](https://bitbucket.org/pondevelopment/mind-module-authentication). This is needed for the `VehicleService` to deal with the authenticating of any request made against the platform.\n\nThe `AccountModule` will only prepare the `AccountServiceImpl` for DI. To only depend on the `AccountService` interface, you should include a line like the one below in the providers of your `NgModule`:\n\n```typescript\n{provide: VehicleService, useExisting: VehicleServiceImpl}\n```\n\n## Using the module\n\n\n\nOnce the `VehicleService` has been injected, it provides the following API:\n\n```typescript\nclass VehicleService {\n\n  /* Retrieve the last known location of the vehicle. */\n  public getLastKnownPosition(vehicleId: number): Promise<GeoLocation>;\n\n  /* Returns the accounts (first) [[Vehicle]] or undefined if there is no vehicle linked to the account */\n  public getVehicle(): Promise<Vehicle | undefined>;\n\n  /* Returns a [[Page]] of the accounts [[Vehicle]]s */\n  public getVehicles(pageOptions: PageOptions = new PageOptions()): Promise<Page<Vehicle>>;\n\n  /* Returns the [[Vehicle]] associated with the given ID */\n  public getVehicleById(vehicleId: number): Promise<Vehicle>;\n}\n```\n\nIf the `VehicleService` has been configured to be injected, simply inject into the dependent classes:\n\n```typescript\nimport { VehicleService } from 'mind-module-vehicle';\n\nclass MyComponent {\n  constructor(private vehicleService: VehicleService) {}\n\n  vehicleLocation(vehicleId: string) {\n    data = this.vehicleService\n      .getLastKnownPosition(vehicleId)\n      .then(this.doSomethingWithTheVehicleLocation);\n  }  \n}\n```\n\n## Development\n\nTo generate all `*.js`, `*.js.map` and `*.d.ts` files:\n\n```bash\n$ npm run tsc\n```\n\nAfterwards, the compiled `js` files can be found in the `./dist` directory.\n\nTo lint all `*.ts` files:\n\n```bash\n$ npm run lint\n```\n\nDuring development the unit tests can automatically be run using PhantomJS:\n\n```bash\n$ npm test\n```\n\nWhen a file has been changed/added/deleted, the tests will automatically be rerun.\n\nThe coverage of the tests will be monitored. The results can be found in: `./coverage/PhantomJS <some version and platform>/index.html`. To view the results, simply open this file in your favorite browser (supporting javascript).\n\nTo test your changes locally in an angular app, you could link this module to your global `node_modules` without publishing the module:\n\n```bash\n$ cd /path/to/mind-module-vehicle/\n$ npm link\n$ cd /path/to/your/angular2/app/\n$ npm link mind-module-vehicle\n```\n\nThis will create a symlink between the `mind-module-vehicle` and the `node_modules` of your angular 2 app.\n\n## License\n\nMIT Â© [Mind mobility](mailto:info@mindmobility.nl)\n","time":{"created":"2019-03-13T11:13:28.653Z","2.1.9":"2019-03-13T11:13:28.653Z","modified":"2020-03-10T09:51:10.138Z","3.0.0":"2019-05-21T13:29:10.719Z","3.0.1":"2020-02-11T15:50:59.072Z"},"_id":"mind-module-vehicle"}