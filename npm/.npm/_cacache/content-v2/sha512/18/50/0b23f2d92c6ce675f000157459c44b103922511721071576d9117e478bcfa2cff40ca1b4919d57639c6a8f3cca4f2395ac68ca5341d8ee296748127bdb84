{"maintainers":[{"name":"jenkins-npm","email":"devops@pon.com"}],"dist-tags":{"latest":"2.1.2"},"versions":{"2.1.0":{"name":"mind-module-service","version":"2.1.0","scripts":{"build":"ngc -p tsconfig.json","lint":"tslint --type-check --project tsconfig.json src/**/*.ts","test":"tsc && karma start","test-singlerun":"tsc && karma start --single-run"},"publishConfig":{"registry":"https://nexusrepo.pondevelopment.com/repository/mind-npm/"},"repository":{"type":"git","url":"git+ssh://git@bitbucket.org/pondevelopment/mind-module-service.git"},"author":{"name":"Han van Venrooij","email":"han.van.venrooij@sioux.eu"},"keywords":["angular"],"license":"MIT","bugs":{"url":"https://pondevelopment.atlassian.net/"},"main":"dist/index.js","module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"@angular/common":"4.4.3","@angular/core":"4.4.3","@angular/http":"4.4.3","mind-module-authentication":"^1.0.1","mind-module-error-handling":"^1.2.0","rxjs":"^5.1.0"},"devDependencies":{"@angular/common":"4.4.3","@angular/compiler":"4.4.3","@angular/compiler-cli":"4.4.3","@angular/core":"4.4.3","@angular/http":"4.4.3","@angular/platform-browser":"4.4.3","@angular/platform-browser-dynamic":"4.4.3","@types/jasmine":"2.5.38","@types/node":"~6.0.60","codelyzer":"~2.0.0","core-js":"^2.4.1","jasmine-core":"~2.5.2","jasmine-spec-reporter":"~3.2.0","karma":"~1.4.1","karma-cli":"~1.0.1","karma-coverage":"^1.1.1","karma-coverage-istanbul-reporter":"^0.2.0","karma-jasmine":"~1.1.0","karma-jasmine-html-reporter":"^0.2.2","karma-phantomjs-launcher":"^1.0.4","karma-typescript":"^3.0.0","karma-typescript-angular2-transform":"^1.0.0","mind-module-authentication":"^1.0.1","mind-module-error-handling":"^1.2.0","protractor":"~5.1.0","rxjs":"^5.1.0","ts-mockito":"^1.2.0","ts-node":"~2.0.0","tslint":"~4.5.0","typescript":"2.9.2","zone.js":"^0.8.4"},"engines":{"node":">=6.0.0"},"dependencies":{"@types/lodash":"^4.14.77","lodash":"^4.17.4","moment-es6":"^1.0.0"},"gitHead":"3862468ea385e81156db3ae842bd988c9c743b84","readme":"# mind-module-service\n\nThis module provides some basic functionalitiy for every MIND service.\n \n## BaseService\n\nThe `BaseService` abstract class provides some utilities to simplify requesting resources from the API. Extend this class to get access to the following functionality:\n\n```typescript\nclass MyService extends BaseService {\n  constructor(http: Http, credentialStorage: CredentialStorage) {\n    super(http, credentialStorage);\n  }\n  \n  /**\n  * This handles the HTTP responses from a request. \n  * This will throw the appropriate MindErrors for any bad responses, and \n  * in case the response was ok, it will return the same response\n  */\n  static handleHttpResponse(response: Response): Response;\n  \n  /**\n  * Performs a request to the url.\n  * This deals with setting the Authorization header to respect the OAuth token \n  * stored in the CredentialStorage, as well as wrapping any network error into \n  * a MindError. \n  */\n  protected performRequest(\n      url: string,\n      body?: any,\n      method: RequestMethod = RequestMethod.Get,\n      urlParams: URLSearchParams = new URLSearchParams(),\n      additionalHeaders: Headers = new Headers()): Promise<Response>;\n  \n  /**\n  * Performs a request to the url.\n  * This deals with setting the Authorization header to a basic authentication \n  * header representing the client as configured in the ServiceConfig, as well \n  * as wrapping any network error into a MindError. \n  */\n  protected performRequest(\n      url: string,\n      body?: any,\n      method: RequestMethod = RequestMethod.Get,\n      urlParams: URLSearchParams = new URLSearchParams(),\n      additionalHeaders: Headers = new Headers()): Promise<Response>;\n}\n```\n\n## ServiceConfig\n\nThe `ServiceConfig` class, has the properties to determine how the API server is configured w.r.t the URL.\n\nIt can be included in your Angular 2 application by providing an instance in your `app.module.ts` file:\n\n\n```typescript\n@NgModule({\n  ...\n  providers: [\n    ...\n    {provide: ServiceConfig, useValue: new ServiceConfig('https://pon-test.device-insight.com', 'api/v1', 'ourClientId', 'ourClientSecret')}\n    ...\n  ]\n})\nexport class MyModule {}\n```\n\nThen to use it in a `Service`, simply inject the config:\n\n```typescript\nclass MyService {\n  constructor(private config: ServiceConfig) {}\n  \n  private vehicleUrl(vehicleId: number) {\n    this.config.getUrl(`vehicles/${vehicleId}`); // given vehicleId = 42 this returns https://pon-test.device-insight.com/api/v1/vehicles/42\n  }\n}\n```\n## Request models\n\nFinally, this module also provides some models to have consistent generic models. These models are listed below:\n\n### Pagination\nThere is a straightforward class for a page of data:  `Page<T>`. An instance of this class, has pagination information in its `page` property. The data is stored as an `T[]` in the `data` property.\n\nAdditionally, to request a page of data from the API, create an instance of the `PageOptions` class, and call its `urlParams()` method to create the appropriate url parameters. \n\n### Sorting\nFinally the `Sorting` class is a simple model to provide sorting options to an endpoint (that supports sorting). To request a particular sorting, create an instance of the `Sorting` class, and call its `urlParams()` method to create the appropriate url parameters and add to to the HTTP request. Note that you can combine multiple sortings on a single request.\n","readmeFilename":"README.md","description":"This module provides some basic functionalitiy for every MIND service.","homepage":"https://bitbucket.org/pondevelopment/mind-module-service#readme","_id":"mind-module-service@2.1.0","_npmVersion":"5.6.0","_nodeVersion":"7.8.0","_npmUser":{"name":"ponJenkinsIntegration","email":"info@pondevelopment.com"},"maintainers":[{"name":"ponJenkinsIntegration","email":"info@pondevelopment.com"}],"dist":{"integrity":"sha512-KavMTP9j+M9QKsHWjIvS/LVTJ3LJAi9HEsyCaRAcOplFMrZK80+lAjovTQkN+kCuhu9JCYBne/Zeg3MLiWkKnA==","shasum":"d99cf18877d73e63307e7b96a3f0c5f187754509","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/mind-module-service/-/mind-module-service-2.1.0.tgz"}},"2.1.1":{"name":"mind-module-service","version":"2.1.1","scripts":{"build":"ngc -p tsconfig.json","lint":"tslint --type-check --project tsconfig.json src/**/*.ts","test":"tsc && karma start","test-singlerun":"tsc && karma start --single-run"},"publishConfig":{"registry":"https://nexusrepo.pondevelopment.com/repository/mind-npm/"},"repository":{"type":"git","url":"git+ssh://git@bitbucket.org/pondevelopment/mind-module-service.git"},"author":{"name":"Han van Venrooij","email":"han.van.venrooij@sioux.eu"},"keywords":["angular"],"license":"MIT","bugs":{"url":"https://pondevelopment.atlassian.net/"},"main":"dist/index.js","module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"@angular/common":"4.4.3","@angular/core":"4.4.3","@angular/http":"4.4.3","mind-module-authentication":"^1.0.1","mind-module-error-handling":"^1.2.0","rxjs":"^5.1.0"},"devDependencies":{"@angular/common":"4.4.3","@angular/compiler":"4.4.3","@angular/compiler-cli":"4.4.3","@angular/core":"4.4.3","@angular/http":"4.4.3","@angular/platform-browser":"4.4.3","@angular/platform-browser-dynamic":"4.4.3","@types/jasmine":"2.5.38","@types/node":"~6.0.60","codelyzer":"~2.0.0","core-js":"^2.4.1","jasmine-core":"~2.5.2","jasmine-spec-reporter":"~3.2.0","karma":"~1.4.1","karma-cli":"~1.0.1","karma-coverage":"^1.1.1","karma-coverage-istanbul-reporter":"^0.2.0","karma-jasmine":"~1.1.0","karma-jasmine-html-reporter":"^0.2.2","karma-phantomjs-launcher":"^1.0.4","karma-typescript":"^3.0.0","karma-typescript-angular2-transform":"^1.0.0","mind-module-authentication":"^1.0.1","mind-module-error-handling":"^1.2.0","protractor":"~5.1.0","rxjs":"^5.1.0","ts-mockito":"^1.2.0","ts-node":"~2.0.0","tslint":"~4.5.0","typescript":"2.9.2","zone.js":"^0.8.4"},"engines":{"node":">=6.0.0"},"dependencies":{"@types/lodash":"^4.14.77","lodash":"^4.17.4","moment-es6":"^1.0.0"},"gitHead":"d663bd37c1fc4b7b369bc3eecf2abdcf8ec4fb77","readme":"# mind-module-service\n\nThis module provides some basic functionalitiy for every MIND service.\n \n## BaseService\n\nThe `BaseService` abstract class provides some utilities to simplify requesting resources from the API. Extend this class to get access to the following functionality:\n\n```typescript\nclass MyService extends BaseService {\n  constructor(http: Http, credentialStorage: CredentialStorage) {\n    super(http, credentialStorage);\n  }\n  \n  /**\n  * This handles the HTTP responses from a request. \n  * This will throw the appropriate MindErrors for any bad responses, and \n  * in case the response was ok, it will return the same response\n  */\n  static handleHttpResponse(response: Response): Response;\n  \n  /**\n  * Performs a request to the url.\n  * This deals with setting the Authorization header to respect the OAuth token \n  * stored in the CredentialStorage, as well as wrapping any network error into \n  * a MindError. \n  */\n  protected performRequest(\n      url: string,\n      body?: any,\n      method: RequestMethod = RequestMethod.Get,\n      urlParams: URLSearchParams = new URLSearchParams(),\n      additionalHeaders: Headers = new Headers()): Promise<Response>;\n  \n  /**\n  * Performs a request to the url.\n  * This deals with setting the Authorization header to a basic authentication \n  * header representing the client as configured in the ServiceConfig, as well \n  * as wrapping any network error into a MindError. \n  */\n  protected performRequest(\n      url: string,\n      body?: any,\n      method: RequestMethod = RequestMethod.Get,\n      urlParams: URLSearchParams = new URLSearchParams(),\n      additionalHeaders: Headers = new Headers()): Promise<Response>;\n}\n```\n\n## ServiceConfig\n\nThe `ServiceConfig` class, has the properties to determine how the API server is configured w.r.t the URL.\n\nIt can be included in your Angular 2 application by providing an instance in your `app.module.ts` file:\n\n\n```typescript\n@NgModule({\n  ...\n  providers: [\n    ...\n    {provide: ServiceConfig, useValue: new ServiceConfig('https://pon-test.device-insight.com', 'api/v1', 'ourClientId', 'ourClientSecret')}\n    ...\n  ]\n})\nexport class MyModule {}\n```\n\nThen to use it in a `Service`, simply inject the config:\n\n```typescript\nclass MyService {\n  constructor(private config: ServiceConfig) {}\n  \n  private vehicleUrl(vehicleId: number) {\n    this.config.getUrl(`vehicles/${vehicleId}`); // given vehicleId = 42 this returns https://pon-test.device-insight.com/api/v1/vehicles/42\n  }\n}\n```\n## Request models\n\nFinally, this module also provides some models to have consistent generic models. These models are listed below:\n\n### Pagination\nThere is a straightforward class for a page of data:  `Page<T>`. An instance of this class, has pagination information in its `page` property. The data is stored as an `T[]` in the `data` property.\n\nAdditionally, to request a page of data from the API, create an instance of the `PageOptions` class, and call its `urlParams()` method to create the appropriate url parameters. \n\n### Sorting\nFinally the `Sorting` class is a simple model to provide sorting options to an endpoint (that supports sorting). To request a particular sorting, create an instance of the `Sorting` class, and call its `urlParams()` method to create the appropriate url parameters and add to to the HTTP request. Note that you can combine multiple sortings on a single request.\n","readmeFilename":"README.md","description":"This module provides some basic functionalitiy for every MIND service.","homepage":"https://bitbucket.org/pondevelopment/mind-module-service#readme","_id":"mind-module-service@2.1.1","_npmVersion":"5.6.0","_nodeVersion":"8.11.4","_npmUser":{"name":"ponJenkinsIntegration","email":"info@pondevelopment.com"},"maintainers":[{"name":"ponJenkinsIntegration","email":"info@pondevelopment.com"}],"dist":{"integrity":"sha512-6Ai6WNxbAoXK1D9sZjMPXg9fgsLFFvyRUICY2vqYzTcvtpoz7MEFx2La3G7+G9v21u8VmEi9oMHDDbXedyiOSw==","shasum":"d7b62c05ec78073f6c00ac6ca64313d70b1b589c","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/mind-module-service/-/mind-module-service-2.1.1.tgz"}},"2.1.2":{"name":"mind-module-service","version":"2.1.2","scripts":{"build":"ngc -p tsconfig.json","lint":"tslint --type-check --project tsconfig.json src/**/*.ts","test":"tsc && karma start","test-singlerun":"tsc && karma start --single-run"},"publishConfig":{"registry":"https://nexusrepo.pondevelopment.com/repository/mind-npm/"},"repository":{"type":"git","url":"git+ssh://git@bitbucket.org/pondevelopment/mind-module-service.git"},"author":{"name":"Han van Venrooij","email":"han.van.venrooij@sioux.eu"},"keywords":["angular"],"license":"MIT","bugs":{"url":"https://pondevelopment.atlassian.net/"},"main":"dist/index.js","module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"@angular/common":"4.4.3","@angular/core":"4.4.3","@angular/http":"4.4.3","mind-module-authentication":"^1.0.1","mind-module-error-handling":"^1.2.0","rxjs":"^5.1.0"},"devDependencies":{"@angular/common":"4.4.3","@angular/compiler":"4.4.3","@angular/compiler-cli":"4.4.3","@angular/core":"4.4.3","@angular/http":"4.4.3","@angular/platform-browser":"4.4.3","@angular/platform-browser-dynamic":"4.4.3","@types/jasmine":"2.5.38","@types/node":"^6.0.118","codelyzer":"~2.0.0","core-js":"^2.4.1","jasmine-core":"~2.5.2","jasmine-spec-reporter":"~3.2.0","karma":"~1.4.1","karma-chrome-launcher":"^3.1.0","karma-cli":"~1.0.1","karma-coverage":"^1.1.1","karma-coverage-istanbul-reporter":"^0.2.0","karma-jasmine":"~1.1.0","karma-jasmine-html-reporter":"^0.2.2","karma-typescript":"^3.0.0","karma-typescript-angular2-transform":"^1.0.0","mind-module-authentication":"^1.0.1","mind-module-error-handling":"^1.2.0","protractor":"~5.1.0","rxjs":"^5.1.0","ts-mockito":"^1.2.0","ts-node":"~2.0.0","tslint":"~4.5.0","typescript":"2.9.2","zone.js":"^0.8.4"},"engines":{"node":">=8.0.0"},"dependencies":{"@types/lodash":"^4.14.108","lodash":"^4.17.5","moment-es6":"^1.0.0","ts-md5":"^1.2.7"},"gitHead":"b342618bb139d1d5040e2a32f4340f8aa9304cc3","readme":"# mind-module-service\n\nThis module provides some basic functionalitiy for every MIND service.\n \n## BaseService\n\nThe `BaseService` abstract class provides some utilities to simplify requesting resources from the API. Extend this class to get access to the following functionality:\n\n```typescript\nclass MyService extends BaseService {\n  constructor(http: Http, credentialStorage: CredentialStorage) {\n    super(http, credentialStorage);\n  }\n  \n  /**\n  * This handles the HTTP responses from a request. \n  * This will throw the appropriate MindErrors for any bad responses, and \n  * in case the response was ok, it will return the same response\n  */\n  static handleHttpResponse(response: Response): Response;\n  \n  /**\n  * Performs a request to the url.\n  * This deals with setting the Authorization header to respect the OAuth token \n  * stored in the CredentialStorage, as well as wrapping any network error into \n  * a MindError. \n  */\n  protected performRequest(\n      url: string,\n      body?: any,\n      method: RequestMethod = RequestMethod.Get,\n      urlParams: URLSearchParams = new URLSearchParams(),\n      additionalHeaders: Headers = new Headers()): Promise<Response>;\n  \n  /**\n  * Performs a request to the url.\n  * This deals with setting the Authorization header to a basic authentication \n  * header representing the client as configured in the ServiceConfig, as well \n  * as wrapping any network error into a MindError. \n  */\n  protected performRequest(\n      url: string,\n      body?: any,\n      method: RequestMethod = RequestMethod.Get,\n      urlParams: URLSearchParams = new URLSearchParams(),\n      additionalHeaders: Headers = new Headers()): Promise<Response>;\n}\n```\n\n## ServiceConfig\n\nThe `ServiceConfig` class, has the properties to determine how the API server is configured w.r.t the URL.\n\nIt can be included in your Angular 2 application by providing an instance in your `app.module.ts` file:\n\n\n```typescript\n@NgModule({\n  ...\n  providers: [\n    ...\n    {provide: ServiceConfig, useValue: new ServiceConfig('https://pon-test.device-insight.com', 'api/v1', 'ourClientId', 'ourClientSecret')}\n    ...\n  ]\n})\nexport class MyModule {}\n```\n\nThen to use it in a `Service`, simply inject the config:\n\n```typescript\nclass MyService {\n  constructor(private config: ServiceConfig) {}\n  \n  private vehicleUrl(vehicleId: number) {\n    this.config.getUrl(`vehicles/${vehicleId}`); // given vehicleId = 42 this returns https://pon-test.device-insight.com/api/v1/vehicles/42\n  }\n}\n```\n## Request models\n\nFinally, this module also provides some models to have consistent generic models. These models are listed below:\n\n### Pagination\nThere is a straightforward class for a page of data:  `Page<T>`. An instance of this class, has pagination information in its `page` property. The data is stored as an `T[]` in the `data` property.\n\nAdditionally, to request a page of data from the API, create an instance of the `PageOptions` class, and call its `urlParams()` method to create the appropriate url parameters. \n\n### Sorting\nFinally the `Sorting` class is a simple model to provide sorting options to an endpoint (that supports sorting). To request a particular sorting, create an instance of the `Sorting` class, and call its `urlParams()` method to create the appropriate url parameters and add to to the HTTP request. Note that you can combine multiple sortings on a single request.\n","readmeFilename":"README.md","description":"This module provides some basic functionalitiy for every MIND service.","homepage":"https://bitbucket.org/pondevelopment/mind-module-service#readme","_id":"mind-module-service@2.1.2","_nodeVersion":"8.17.0","_npmVersion":"6.13.4","_npmUser":{"name":"jenkins-npm","email":"devops@pon.com"},"maintainers":[{"name":"jenkins-npm","email":"devops@pon.com"}],"dist":{"integrity":"sha512-ury1zS7Qw2RNnIRJNZDrrCIKA0qvVargj3LKu0LrRJU/lNKiJL9AxtaY86Ps2g6fE7ht/5ULcxPFd0X16Kv0sA==","shasum":"f1c2189d03a55ac16791ca91790ad3af4b3acac3","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/mind-module-service/-/mind-module-service-2.1.2.tgz"}}},"name":"mind-module-service","_rev":"535","description":"This module provides some basic functionalitiy for every MIND service.","readme":"# mind-module-service\n\nThis module provides some basic functionalitiy for every MIND service.\n \n## BaseService\n\nThe `BaseService` abstract class provides some utilities to simplify requesting resources from the API. Extend this class to get access to the following functionality:\n\n```typescript\nclass MyService extends BaseService {\n  constructor(http: Http, credentialStorage: CredentialStorage) {\n    super(http, credentialStorage);\n  }\n  \n  /**\n  * This handles the HTTP responses from a request. \n  * This will throw the appropriate MindErrors for any bad responses, and \n  * in case the response was ok, it will return the same response\n  */\n  static handleHttpResponse(response: Response): Response;\n  \n  /**\n  * Performs a request to the url.\n  * This deals with setting the Authorization header to respect the OAuth token \n  * stored in the CredentialStorage, as well as wrapping any network error into \n  * a MindError. \n  */\n  protected performRequest(\n      url: string,\n      body?: any,\n      method: RequestMethod = RequestMethod.Get,\n      urlParams: URLSearchParams = new URLSearchParams(),\n      additionalHeaders: Headers = new Headers()): Promise<Response>;\n  \n  /**\n  * Performs a request to the url.\n  * This deals with setting the Authorization header to a basic authentication \n  * header representing the client as configured in the ServiceConfig, as well \n  * as wrapping any network error into a MindError. \n  */\n  protected performRequest(\n      url: string,\n      body?: any,\n      method: RequestMethod = RequestMethod.Get,\n      urlParams: URLSearchParams = new URLSearchParams(),\n      additionalHeaders: Headers = new Headers()): Promise<Response>;\n}\n```\n\n## ServiceConfig\n\nThe `ServiceConfig` class, has the properties to determine how the API server is configured w.r.t the URL.\n\nIt can be included in your Angular 2 application by providing an instance in your `app.module.ts` file:\n\n\n```typescript\n@NgModule({\n  ...\n  providers: [\n    ...\n    {provide: ServiceConfig, useValue: new ServiceConfig('https://pon-test.device-insight.com', 'api/v1', 'ourClientId', 'ourClientSecret')}\n    ...\n  ]\n})\nexport class MyModule {}\n```\n\nThen to use it in a `Service`, simply inject the config:\n\n```typescript\nclass MyService {\n  constructor(private config: ServiceConfig) {}\n  \n  private vehicleUrl(vehicleId: number) {\n    this.config.getUrl(`vehicles/${vehicleId}`); // given vehicleId = 42 this returns https://pon-test.device-insight.com/api/v1/vehicles/42\n  }\n}\n```\n## Request models\n\nFinally, this module also provides some models to have consistent generic models. These models are listed below:\n\n### Pagination\nThere is a straightforward class for a page of data:  `Page<T>`. An instance of this class, has pagination information in its `page` property. The data is stored as an `T[]` in the `data` property.\n\nAdditionally, to request a page of data from the API, create an instance of the `PageOptions` class, and call its `urlParams()` method to create the appropriate url parameters. \n\n### Sorting\nFinally the `Sorting` class is a simple model to provide sorting options to an endpoint (that supports sorting). To request a particular sorting, create an instance of the `Sorting` class, and call its `urlParams()` method to create the appropriate url parameters and add to to the HTTP request. Note that you can combine multiple sortings on a single request.\n","time":{"2.1.0":"2019-03-13T11:01:26.206Z","created":"2019-03-13T11:01:26.206Z","modified":"2020-03-06T09:54:46.234Z","2.1.1":"2019-03-19T13:02:31.541Z","2.1.2":"2020-02-11T13:24:26.631Z"},"_id":"mind-module-service"}