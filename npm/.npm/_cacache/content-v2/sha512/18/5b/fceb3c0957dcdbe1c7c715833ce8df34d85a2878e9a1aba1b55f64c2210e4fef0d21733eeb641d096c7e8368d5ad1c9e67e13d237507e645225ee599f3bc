{"maintainers":[{"name":"jenkins-npm","email":"devops@pon.com"}],"dist-tags":{"latest":"5.0.4"},"versions":{"5.0.2":{"name":"mind-module-trip","version":"5.0.2","scripts":{"build":"ngc -p tsconfig.json","lint":"tslint --type-check --project tsconfig.json src/**/*.ts","test":"tsc && karma start","test-singlerun":"tsc && karma start --single-run"},"publishConfig":{"registry":"https://nexusrepo.pondevelopment.com/repository/mind-npm/"},"repository":{"type":"git","url":"git+ssh://git@bitbucket.org/pondevelopment/mind-module-trip.git"},"author":{"name":"Kahin Sett","email":"kahin.sett@pon.com"},"keywords":["angular"],"license":"MIT","bugs":{"url":"https://pondevelopment.atlassian.net/"},"main":"dist/index.js","module":"dist/index.js","types":"dist/index.d.ts","dependencies":{"lodash":"^4.17.4","moment-es6":"^1.0.0","zone.js":"^0.8.12"},"peerDependencies":{"@angular/common":"^4.0.0","@angular/core":"^4.0.0","@angular/http":"^4.0.0","mind-module-authentication":"^1.0.1","mind-module-error-handling":"^1.1.0","mind-module-service":"^2.0.0"},"devDependencies":{"@angular/common":"^4.0.0","@angular/compiler":"^4.0.0","@angular/compiler-cli":"^4.0.0","@angular/core":"^4.0.0","@angular/http":"^4.0.0","@angular/platform-browser":"^4.0.0","@angular/platform-browser-dynamic":"^4.0.0","@types/jasmine":"2.5.38","@types/node":"~6.0.60","@types/lodash":"4.14.55","codelyzer":"~2.0.0","core-js":"^2.4.1","jasmine-core":"~2.5.2","jasmine-spec-reporter":"~3.2.0","karma":"~1.4.1","karma-cli":"~1.0.1","karma-coverage":"^1.1.1","karma-coverage-istanbul-reporter":"^0.2.0","karma-jasmine":"~1.1.0","karma-jasmine-html-reporter":"^0.2.2","karma-phantomjs-launcher":"^1.0.4","karma-chrome-launcher":"^2.2.0","karma-typescript":"^3.0.0","karma-typescript-angular2-transform":"^1.0.0","mind-module-authentication":"^1.0.1","mind-module-error-handling":"^1.2.0","mind-module-service":"^2.1.0","protractor":"~5.1.0","ts-mockito":"^1.2.0","ts-node":"~2.0.0","tslint":"~4.5.0","rxjs":"5.4.3","typescript":"~2.2.0"},"engines":{"node":">=6.0.0"},"gitHead":"59a1bde851254517d4d484f907500596312f19ff","readme":"# mind-module-trip\n\n## Installation\n\nTo install this library, run:\n\n```bash\n$ npm install mind-module-trip --save\n```\n\n## Usage\n\n### Setup\n\nTo use the services provided by the `mind-module-trip`, a `ServiceConfig` instance needs to be prepared for injection in the application. This can be configured in your application module by:\n\n```typescript\n@NgModule({\n  ...\n  providers: [\n    ...\n    {provide: ServiceConfig, useValue: new ServiceConfig('https://pon-test.device-insight.com', 'api/v1')}\n    ...\n  ]\n})\nexport class MyModule {}\n```\n\nThe `TripModule` will only prepare the `TripServiceImpl` and `TripStatisticsServiceImpl` for DI. To only depend on the `TripService` and `TripStatisticsService` interfaces, you should include lines like the ones below in the providers of your `NgModule`:\n\n```typescript\n{provide: TripService, useExisting: TripServiceImpl}\n{provide: TripStatisticsService, useExisting: TripStatisticsServiceImpl}\n```\n\n### TripService\n\nOnce you've prepared the `TripService` for DI as described above, you can inject the `TripService` into your own components/modules:\n\n```typescript\nimport { TripService } from 'mind-module-trip';\n\nclass MyClass { \n  constructor(private tripService: TripService) {}\n\n  retrieveLatestTrip(driverId: number) {\n    this.tripService.getLatestTrip(driverId).then(trip => {\n      if (trip) {\n        // Do something with the trip\n      } else {\n        // There's no latest trip for the given driver\n      }\n    }); \n  } \n}\n```\n\nOnce the `TripService` has been injected, it provides the following API:\n\n```typescript\nabstract class TripService {\n  /* Returns the trip identified with the given [[tripUUID]] */\n  getTrip(tripUUID: string): Promise<Trip>;\n\n  /* Updates the [[Trip]] at CenterSight */\n  updateTrip(trip: Trip): Promise<Trip>;\n\n  /* Returns the last trip for the given [[driverId]] */\n  getLatestTrip(driverId: number): Promise<Trip | undefined>;\n\n  /* Returns the trips for the given [[driverId]]. */\n  getTrips(driverId: number, pageOptions?: PageOptions, sortOptions?: Sorting[]): Promise<Page<Trip>>;\n\n  /* Returns the trips for the given [[driverId]] that match the [[filterOptions]]. */\n  getFilteredTrips(\n    driverId: number,\n    filterOptions: TripFilterOptions,\n    pageOptions: PageOptions = new PageOptions(),\n    sortOptions: Sorting[] = [new Sorting('endTs', 'desc')]\n  ): Promise<Page<Trip>>;\n\n  /* Returns the trip positions for the given trip */\n  getTripPositions(trip: Trip): Promise<{lat: number, lon: number}[]>;\n\n  /* Returns the [[AccelerationEvent]]s associated with the given trip. */\n  getAccelerationEvents(trip: Trip): Promise<AccelerationEvent[]>;\n\n  /* Returns the [[SpeedingEvent]]s associated with the given trip. */\n  getSpeedingEvents(trip: Trip): Promise<SpeedingEvent[]>;\n}\n```\n\n### TripStatisticsService\n\nTo use the `TripStatisticsService` in an Angular application, simply inject into the dependent classes:\n\n```typescript\nimport { TripStatisticsService } from 'mind-module-trip';\n\nclass MyClass { \n  constructor(private tripService: TripStatisticsService) {}\n\n  retrieveLatestTrip(driverId: number, year: number) {\n    this.tripService.getTripStatistics(driverId, year).then(statistics => {\n      const {totalDistance, totalDuration, totalAmount} = statistics;\n      // Do stuff with the statistics\n    }); \n  } \n}\n```\n\nOnce the `TripStatisticsService` has been injected, it provides the following API:\n\n```typescript\nabstract class TripStatisticsService {\n  /* Returns the [[TripStatistics]] for the given [[driverID]] and the given [[year]] */\n  getTripStatistics(driverId: number, year: number = new Date().getFullYear()): Promise<TripStatistics>;\n\n  /* Return the total trip distance (in meters) for the given [[driverId]] in the given [[year]]. */\n  getTotalTripDistance(driverId: number, year: number = new Date().getFullYear()): Promise<number>;\n\n  /* Return the total trip duration (in seconds) for the given [[driverId]] in the given [[year]]. */\n  getTotalTripDuration(driverId: number, year: number = new Date().getFullYear()): Promise<number>;\n\n  /* Return the total amount of trips for the given [[driverId]] in the given [[year]]. */\n  getTotalTripAmount(driverId: number, year: number = new Date().getFullYear()): Promise<number>;\n\n  /* Return the total driven private kms for the given [[driverId]]. */\n  getTotalPrivateKm(driverId: number);\n\n  /* Return the private km quota for the given [[driverId]]. */\n  getPrivateKmQuota(driverId: number): Promise<number>;\n}\n```\n\n## Development\n\nTo generate all `*.js`, `*.js.map` and `*.d.ts` files:\n\n```bash\n$ npm run tsc\n```\n\nAfterwards, the compiled `js` files can be found in the `./dist` directory.\n\nTo lint all `*.ts` files:\n\n```bash\n$ npm run lint\n```\n\nDuring development the unit tests can automatically be run using PhantomJS:\n\n```bash\n$ npm test\n```\n\nWhen a file has been changed/added/deleted, the tests will automatically be rerun.\n\nThe coverage of the tests will be monitored. The results can be found in: `./coverage/PhantomJS <some version and platform>/index.html`. To view the results, simply open this file in your favorite browser (supporting javascript).\n\nTo test your changes locally in an angular app, you could link this module to your global `node_modules` without publishing the module:\n\n```bash\n$ cd /path/to/mind-module-trip/\n$ npm link\n$ cd /path/to/your/angular2/app/\n$ npm link mind-module-trip\n```\n\nThis will create a symlink between the `mind-module-trip` and the `node_modules` of your angular 2 app.\n\n## License\n\nMIT Â© [Mind mobility](mailto:info@mindmobility.nl)\n","readmeFilename":"README.md","description":"## Installation","homepage":"https://bitbucket.org/pondevelopment/mind-module-trip#readme","_id":"mind-module-trip@5.0.2","_npmVersion":"5.6.0","_nodeVersion":"7.8.0","_npmUser":{"name":"ponJenkinsIntegration","email":"info@pondevelopment.com"},"maintainers":[{"name":"ponJenkinsIntegration","email":"info@pondevelopment.com"}],"dist":{"integrity":"sha512-PtBgxsB4R/UqvJe6pHFkCImJ58awe0fgkntEVN+eo0eNlQ5Rmk7YzQFhYh9YBeP++c0FzmenbbTBP4lstjVTvQ==","shasum":"0d67eadb4408c660daaa757bcc6591dbf9939195","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/mind-module-trip/-/mind-module-trip-5.0.2.tgz"}},"5.0.3":{"name":"mind-module-trip","version":"5.0.3","scripts":{"build":"ngc -p tsconfig.json","lint":"tslint --type-check --project tsconfig.json src/**/*.ts","test":"tsc && karma start","test-singlerun":"tsc && karma start --single-run"},"publishConfig":{"registry":"https://nexusrepo.pondevelopment.com/repository/mind-npm/"},"repository":{"type":"git","url":"git+ssh://git@bitbucket.org/pondevelopment/mind-module-trip.git"},"author":{"name":"Kahin Sett","email":"kahin.sett@pon.com"},"keywords":["angular"],"license":"MIT","bugs":{"url":"https://pondevelopment.atlassian.net/"},"main":"dist/index.js","module":"dist/index.js","types":"dist/index.d.ts","dependencies":{"lodash":"^4.17.4","moment-es6":"^1.0.0","zone.js":"^0.8.12"},"peerDependencies":{"@angular/common":"^4.0.0","@angular/core":"^4.0.0","@angular/http":"^4.0.0","mind-module-authentication":"^1.0.1","mind-module-error-handling":"^1.1.0","mind-module-service":"^2.0.0"},"devDependencies":{"@angular/common":"^4.0.0","@angular/compiler":"^4.0.0","@angular/compiler-cli":"^4.0.0","@angular/core":"^4.0.0","@angular/http":"^4.0.0","@angular/platform-browser":"^4.0.0","@angular/platform-browser-dynamic":"^4.0.0","@types/jasmine":"2.5.38","@types/node":"~6.0.60","@types/lodash":"4.14.55","codelyzer":"~2.0.0","core-js":"^2.4.1","jasmine-core":"~2.5.2","jasmine-spec-reporter":"~3.2.0","karma":"~1.4.1","karma-cli":"~1.0.1","karma-coverage":"^1.1.1","karma-coverage-istanbul-reporter":"^0.2.0","karma-jasmine":"~1.1.0","karma-jasmine-html-reporter":"^0.2.2","karma-phantomjs-launcher":"^1.0.4","karma-chrome-launcher":"^2.2.0","karma-typescript":"^3.0.0","karma-typescript-angular2-transform":"^1.0.0","mind-module-authentication":"^1.0.1","mind-module-error-handling":"^1.2.0","mind-module-service":"^2.1.1","protractor":"~5.1.0","ts-mockito":"^1.2.0","ts-node":"~2.0.0","tslint":"~4.5.0","rxjs":"5.4.3","typescript":"~2.2.0"},"engines":{"node":">=6.0.0"},"gitHead":"576f52b884ae2becf8550b5893824a6a5497f7d2","readme":"# mind-module-trip\n\n## Installation\n\nTo install this library, run:\n\n```bash\n$ npm install mind-module-trip --save\n```\n\n## Usage\n\n### Setup\n\nTo use the services provided by the `mind-module-trip`, a `ServiceConfig` instance needs to be prepared for injection in the application. This can be configured in your application module by:\n\n```typescript\n@NgModule({\n  ...\n  providers: [\n    ...\n    {provide: ServiceConfig, useValue: new ServiceConfig('https://pon-test.device-insight.com', 'api/v1')}\n    ...\n  ]\n})\nexport class MyModule {}\n```\n\nThe `TripModule` will only prepare the `TripServiceImpl` and `TripStatisticsServiceImpl` for DI. To only depend on the `TripService` and `TripStatisticsService` interfaces, you should include lines like the ones below in the providers of your `NgModule`:\n\n```typescript\n{provide: TripService, useExisting: TripServiceImpl}\n{provide: TripStatisticsService, useExisting: TripStatisticsServiceImpl}\n```\n\n### TripService\n\nOnce you've prepared the `TripService` for DI as described above, you can inject the `TripService` into your own components/modules:\n\n```typescript\nimport { TripService } from 'mind-module-trip';\n\nclass MyClass { \n  constructor(private tripService: TripService) {}\n\n  retrieveLatestTrip(driverId: number) {\n    this.tripService.getLatestTrip(driverId).then(trip => {\n      if (trip) {\n        // Do something with the trip\n      } else {\n        // There's no latest trip for the given driver\n      }\n    }); \n  } \n}\n```\n\nOnce the `TripService` has been injected, it provides the following API:\n\n```typescript\nabstract class TripService {\n  /* Returns the trip identified with the given [[tripUUID]] */\n  getTrip(tripUUID: string): Promise<Trip>;\n\n  /* Updates the [[Trip]] at CenterSight */\n  updateTrip(trip: Trip): Promise<Trip>;\n\n  /* Returns the last trip for the given [[driverId]] */\n  getLatestTrip(driverId: number): Promise<Trip | undefined>;\n\n  /* Returns the trips for the given [[driverId]]. */\n  getTrips(driverId: number, pageOptions?: PageOptions, sortOptions?: Sorting[]): Promise<Page<Trip>>;\n\n  /* Returns the trips for the given [[driverId]] that match the [[filterOptions]]. */\n  getFilteredTrips(\n    driverId: number,\n    filterOptions: TripFilterOptions,\n    pageOptions: PageOptions = new PageOptions(),\n    sortOptions: Sorting[] = [new Sorting('endTs', 'desc')]\n  ): Promise<Page<Trip>>;\n\n  /* Returns the trip positions for the given trip */\n  getTripPositions(trip: Trip): Promise<{lat: number, lon: number}[]>;\n\n  /* Returns the [[AccelerationEvent]]s associated with the given trip. */\n  getAccelerationEvents(trip: Trip): Promise<AccelerationEvent[]>;\n\n  /* Returns the [[SpeedingEvent]]s associated with the given trip. */\n  getSpeedingEvents(trip: Trip): Promise<SpeedingEvent[]>;\n}\n```\n\n### TripStatisticsService\n\nTo use the `TripStatisticsService` in an Angular application, simply inject into the dependent classes:\n\n```typescript\nimport { TripStatisticsService } from 'mind-module-trip';\n\nclass MyClass { \n  constructor(private tripService: TripStatisticsService) {}\n\n  retrieveLatestTrip(driverId: number, year: number) {\n    this.tripService.getTripStatistics(driverId, year).then(statistics => {\n      const {totalDistance, totalDuration, totalAmount} = statistics;\n      // Do stuff with the statistics\n    }); \n  } \n}\n```\n\nOnce the `TripStatisticsService` has been injected, it provides the following API:\n\n```typescript\nabstract class TripStatisticsService {\n  /* Returns the [[TripStatistics]] for the given [[driverID]] and the given [[year]] */\n  getTripStatistics(driverId: number, year: number = new Date().getFullYear()): Promise<TripStatistics>;\n\n  /* Return the total trip distance (in meters) for the given [[driverId]] in the given [[year]]. */\n  getTotalTripDistance(driverId: number, year: number = new Date().getFullYear()): Promise<number>;\n\n  /* Return the total trip duration (in seconds) for the given [[driverId]] in the given [[year]]. */\n  getTotalTripDuration(driverId: number, year: number = new Date().getFullYear()): Promise<number>;\n\n  /* Return the total amount of trips for the given [[driverId]] in the given [[year]]. */\n  getTotalTripAmount(driverId: number, year: number = new Date().getFullYear()): Promise<number>;\n\n  /* Return the total driven private kms for the given [[driverId]]. */\n  getTotalPrivateKm(driverId: number);\n\n  /* Return the private km quota for the given [[driverId]]. */\n  getPrivateKmQuota(driverId: number): Promise<number>;\n}\n```\n\n## Development\n\nTo generate all `*.js`, `*.js.map` and `*.d.ts` files:\n\n```bash\n$ npm run tsc\n```\n\nAfterwards, the compiled `js` files can be found in the `./dist` directory.\n\nTo lint all `*.ts` files:\n\n```bash\n$ npm run lint\n```\n\nDuring development the unit tests can automatically be run using PhantomJS:\n\n```bash\n$ npm test\n```\n\nWhen a file has been changed/added/deleted, the tests will automatically be rerun.\n\nThe coverage of the tests will be monitored. The results can be found in: `./coverage/PhantomJS <some version and platform>/index.html`. To view the results, simply open this file in your favorite browser (supporting javascript).\n\nTo test your changes locally in an angular app, you could link this module to your global `node_modules` without publishing the module:\n\n```bash\n$ cd /path/to/mind-module-trip/\n$ npm link\n$ cd /path/to/your/angular2/app/\n$ npm link mind-module-trip\n```\n\nThis will create a symlink between the `mind-module-trip` and the `node_modules` of your angular 2 app.\n\n## License\n\nMIT Â© [Mind mobility](mailto:info@mindmobility.nl)\n","readmeFilename":"README.md","description":"## Installation","homepage":"https://bitbucket.org/pondevelopment/mind-module-trip#readme","_id":"mind-module-trip@5.0.3","_npmVersion":"5.6.0","_nodeVersion":"8.11.4","_npmUser":{"name":"jenkins-npm","email":"devops@pon.com"},"maintainers":[{"name":"jenkins-npm","email":"devops@pon.com"}],"dist":{"integrity":"sha512-dXhaDjf0AptxzuasyvXCv1RlVc239WCorlC6aE6QrJEwmXqEFmfvvM2lqnz/TdTun17l4rhrOOy6WE6xxfiWiA==","shasum":"9d67a8ae047ccb4ec63542bf69afbb28c4ef3e3d","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/mind-module-trip/-/mind-module-trip-5.0.3.tgz"}},"5.0.4":{"name":"mind-module-trip","version":"5.0.4","scripts":{"build":"ngc -p tsconfig.json","lint":"tslint --type-check --project tsconfig.json src/**/*.ts","test":"tsc && karma start","test-singlerun":"tsc && karma start --single-run"},"publishConfig":{"registry":"https://nexusrepo.pondevelopment.com/repository/mind-npm/"},"repository":{"type":"git","url":"git+ssh://git@bitbucket.org/pondevelopment/mind-module-trip.git"},"author":{"name":"Kahin Sett","email":"kahin.sett@pon.com"},"keywords":["angular"],"license":"MIT","bugs":{"url":"https://pondevelopment.atlassian.net/"},"main":"dist/index.js","module":"dist/index.js","types":"dist/index.d.ts","dependencies":{"lodash":"^4.17.4","moment-es6":"^1.0.0","zone.js":"^0.8.12"},"peerDependencies":{"@angular/common":"^4.0.0","@angular/core":"^4.0.0","@angular/http":"^4.0.0","mind-module-authentication":"^1.0.1","mind-module-error-handling":"^1.1.0","mind-module-service":"^2.0.0"},"devDependencies":{"@angular/common":"^4.0.0","@angular/compiler":"^4.0.0","@angular/compiler-cli":"^4.0.0","@angular/core":"^4.0.0","@angular/http":"^4.0.0","@angular/platform-browser":"^4.0.0","@angular/platform-browser-dynamic":"^4.0.0","@types/jasmine":"2.5.38","@types/node":"~6.0.60","@types/lodash":"4.14.55","codelyzer":"~2.0.0","core-js":"^2.4.1","jasmine-core":"~2.5.2","jasmine-spec-reporter":"~3.2.0","karma":"~1.4.1","karma-cli":"~1.0.1","karma-coverage":"^1.1.1","karma-coverage-istanbul-reporter":"^0.2.0","karma-jasmine":"~1.1.0","karma-jasmine-html-reporter":"^0.2.2","karma-chrome-launcher":"^2.2.0","karma-typescript":"^3.0.0","karma-typescript-angular2-transform":"^1.0.0","mind-module-authentication":"^1.0.1","mind-module-error-handling":"^1.2.0","mind-module-service":"^2.1.1","protractor":"~5.1.0","ts-mockito":"^1.2.0","ts-node":"~2.0.0","tslint":"~4.5.0","rxjs":"5.4.3","typescript":"~2.2.0"},"engines":{"node":">=6.0.0"},"gitHead":"231615266bf4838635b9ea398e1a306c1d9f7b02","readme":"# mind-module-trip\n\n## Installation\n\nTo install this library, run:\n\n```bash\n$ npm install mind-module-trip --save\n```\n\n## Usage\n\n### Setup\n\nTo use the services provided by the `mind-module-trip`, a `ServiceConfig` instance needs to be prepared for injection in the application. This can be configured in your application module by:\n\n```typescript\n@NgModule({\n  ...\n  providers: [\n    ...\n    {provide: ServiceConfig, useValue: new ServiceConfig('https://pon-test.device-insight.com', 'api/v1')}\n    ...\n  ]\n})\nexport class MyModule {}\n```\n\nThe `TripModule` will only prepare the `TripServiceImpl` and `TripStatisticsServiceImpl` for DI. To only depend on the `TripService` and `TripStatisticsService` interfaces, you should include lines like the ones below in the providers of your `NgModule`:\n\n```typescript\n{provide: TripService, useExisting: TripServiceImpl}\n{provide: TripStatisticsService, useExisting: TripStatisticsServiceImpl}\n```\n\n### TripService\n\nOnce you've prepared the `TripService` for DI as described above, you can inject the `TripService` into your own components/modules:\n\n```typescript\nimport { TripService } from 'mind-module-trip';\n\nclass MyClass { \n  constructor(private tripService: TripService) {}\n\n  retrieveLatestTrip(driverId: number) {\n    this.tripService.getLatestTrip(driverId).then(trip => {\n      if (trip) {\n        // Do something with the trip\n      } else {\n        // There's no latest trip for the given driver\n      }\n    }); \n  } \n}\n```\n\nOnce the `TripService` has been injected, it provides the following API:\n\n```typescript\nabstract class TripService {\n  /* Returns the trip identified with the given [[tripUUID]] */\n  getTrip(tripUUID: string): Promise<Trip>;\n\n  /* Updates the [[Trip]] at CenterSight */\n  updateTrip(trip: Trip): Promise<Trip>;\n\n  /* Returns the last trip for the given [[driverId]] */\n  getLatestTrip(driverId: number): Promise<Trip | undefined>;\n\n  /* Returns the trips for the given [[driverId]]. */\n  getTrips(driverId: number, pageOptions?: PageOptions, sortOptions?: Sorting[]): Promise<Page<Trip>>;\n\n  /* Returns the trips for the given [[driverId]] that match the [[filterOptions]]. */\n  getFilteredTrips(\n    driverId: number,\n    filterOptions: TripFilterOptions,\n    pageOptions: PageOptions = new PageOptions(),\n    sortOptions: Sorting[] = [new Sorting('endTs', 'desc')]\n  ): Promise<Page<Trip>>;\n\n  /* Returns the trip positions for the given trip */\n  getTripPositions(trip: Trip): Promise<{lat: number, lon: number}[]>;\n\n  /* Returns the [[AccelerationEvent]]s associated with the given trip. */\n  getAccelerationEvents(trip: Trip): Promise<AccelerationEvent[]>;\n\n  /* Returns the [[SpeedingEvent]]s associated with the given trip. */\n  getSpeedingEvents(trip: Trip): Promise<SpeedingEvent[]>;\n}\n```\n\n### TripStatisticsService\n\nTo use the `TripStatisticsService` in an Angular application, simply inject into the dependent classes:\n\n```typescript\nimport { TripStatisticsService } from 'mind-module-trip';\n\nclass MyClass { \n  constructor(private tripService: TripStatisticsService) {}\n\n  retrieveLatestTrip(driverId: number, year: number) {\n    this.tripService.getTripStatistics(driverId, year).then(statistics => {\n      const {totalDistance, totalDuration, totalAmount} = statistics;\n      // Do stuff with the statistics\n    }); \n  } \n}\n```\n\nOnce the `TripStatisticsService` has been injected, it provides the following API:\n\n```typescript\nabstract class TripStatisticsService {\n  /* Returns the [[TripStatistics]] for the given [[driverID]] and the given [[year]] */\n  getTripStatistics(driverId: number, year: number = new Date().getFullYear()): Promise<TripStatistics>;\n\n  /* Return the total trip distance (in meters) for the given [[driverId]] in the given [[year]]. */\n  getTotalTripDistance(driverId: number, year: number = new Date().getFullYear()): Promise<number>;\n\n  /* Return the total trip duration (in seconds) for the given [[driverId]] in the given [[year]]. */\n  getTotalTripDuration(driverId: number, year: number = new Date().getFullYear()): Promise<number>;\n\n  /* Return the total amount of trips for the given [[driverId]] in the given [[year]]. */\n  getTotalTripAmount(driverId: number, year: number = new Date().getFullYear()): Promise<number>;\n\n  /* Return the total driven private kms for the given [[driverId]]. */\n  getTotalPrivateKm(driverId: number);\n\n  /* Return the private km quota for the given [[driverId]]. */\n  getPrivateKmQuota(driverId: number): Promise<number>;\n}\n```\n\n## Development\n\nTo generate all `*.js`, `*.js.map` and `*.d.ts` files:\n\n```bash\n$ npm run tsc\n```\n\nAfterwards, the compiled `js` files can be found in the `./dist` directory.\n\nTo lint all `*.ts` files:\n\n```bash\n$ npm run lint\n```\n\nDuring development the unit tests can automatically be run using PhantomJS:\n\n```bash\n$ npm test\n```\n\nWhen a file has been changed/added/deleted, the tests will automatically be rerun.\n\nThe coverage of the tests will be monitored. The results can be found in: `./coverage/PhantomJS <some version and platform>/index.html`. To view the results, simply open this file in your favorite browser (supporting javascript).\n\nTo test your changes locally in an angular app, you could link this module to your global `node_modules` without publishing the module:\n\n```bash\n$ cd /path/to/mind-module-trip/\n$ npm link\n$ cd /path/to/your/angular2/app/\n$ npm link mind-module-trip\n```\n\nThis will create a symlink between the `mind-module-trip` and the `node_modules` of your angular 2 app.\n\n## License\n\nMIT Â© [Mind mobility](mailto:info@mindmobility.nl)\n","readmeFilename":"README.md","description":"## Installation","homepage":"https://bitbucket.org/pondevelopment/mind-module-trip#readme","_id":"mind-module-trip@5.0.4","_nodeVersion":"8.17.0","_npmVersion":"6.13.4","_npmUser":{"name":"jenkins-npm","email":"devops@pon.com"},"maintainers":[{"name":"jenkins-npm","email":"devops@pon.com"}],"dist":{"integrity":"sha512-q7X1aBY1ybZLNIrdqscAKlV3e6KI8woSZ0jlk6c7VSl2nCmh6CiAdSjjW+HnDptG6HTU5cJ2IzuSTaBCpjDnDw==","shasum":"13ec5a4c67011f5f0e1a292ac00f35468288beb6","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/mind-module-trip/-/mind-module-trip-5.0.4.tgz"}}},"name":"mind-module-trip","_rev":"170","description":"## Installation","readme":"# mind-module-trip\n\n## Installation\n\nTo install this library, run:\n\n```bash\n$ npm install mind-module-trip --save\n```\n\n## Usage\n\n### Setup\n\nTo use the services provided by the `mind-module-trip`, a `ServiceConfig` instance needs to be prepared for injection in the application. This can be configured in your application module by:\n\n```typescript\n@NgModule({\n  ...\n  providers: [\n    ...\n    {provide: ServiceConfig, useValue: new ServiceConfig('https://pon-test.device-insight.com', 'api/v1')}\n    ...\n  ]\n})\nexport class MyModule {}\n```\n\nThe `TripModule` will only prepare the `TripServiceImpl` and `TripStatisticsServiceImpl` for DI. To only depend on the `TripService` and `TripStatisticsService` interfaces, you should include lines like the ones below in the providers of your `NgModule`:\n\n```typescript\n{provide: TripService, useExisting: TripServiceImpl}\n{provide: TripStatisticsService, useExisting: TripStatisticsServiceImpl}\n```\n\n### TripService\n\nOnce you've prepared the `TripService` for DI as described above, you can inject the `TripService` into your own components/modules:\n\n```typescript\nimport { TripService } from 'mind-module-trip';\n\nclass MyClass { \n  constructor(private tripService: TripService) {}\n\n  retrieveLatestTrip(driverId: number) {\n    this.tripService.getLatestTrip(driverId).then(trip => {\n      if (trip) {\n        // Do something with the trip\n      } else {\n        // There's no latest trip for the given driver\n      }\n    }); \n  } \n}\n```\n\nOnce the `TripService` has been injected, it provides the following API:\n\n```typescript\nabstract class TripService {\n  /* Returns the trip identified with the given [[tripUUID]] */\n  getTrip(tripUUID: string): Promise<Trip>;\n\n  /* Updates the [[Trip]] at CenterSight */\n  updateTrip(trip: Trip): Promise<Trip>;\n\n  /* Returns the last trip for the given [[driverId]] */\n  getLatestTrip(driverId: number): Promise<Trip | undefined>;\n\n  /* Returns the trips for the given [[driverId]]. */\n  getTrips(driverId: number, pageOptions?: PageOptions, sortOptions?: Sorting[]): Promise<Page<Trip>>;\n\n  /* Returns the trips for the given [[driverId]] that match the [[filterOptions]]. */\n  getFilteredTrips(\n    driverId: number,\n    filterOptions: TripFilterOptions,\n    pageOptions: PageOptions = new PageOptions(),\n    sortOptions: Sorting[] = [new Sorting('endTs', 'desc')]\n  ): Promise<Page<Trip>>;\n\n  /* Returns the trip positions for the given trip */\n  getTripPositions(trip: Trip): Promise<{lat: number, lon: number}[]>;\n\n  /* Returns the [[AccelerationEvent]]s associated with the given trip. */\n  getAccelerationEvents(trip: Trip): Promise<AccelerationEvent[]>;\n\n  /* Returns the [[SpeedingEvent]]s associated with the given trip. */\n  getSpeedingEvents(trip: Trip): Promise<SpeedingEvent[]>;\n}\n```\n\n### TripStatisticsService\n\nTo use the `TripStatisticsService` in an Angular application, simply inject into the dependent classes:\n\n```typescript\nimport { TripStatisticsService } from 'mind-module-trip';\n\nclass MyClass { \n  constructor(private tripService: TripStatisticsService) {}\n\n  retrieveLatestTrip(driverId: number, year: number) {\n    this.tripService.getTripStatistics(driverId, year).then(statistics => {\n      const {totalDistance, totalDuration, totalAmount} = statistics;\n      // Do stuff with the statistics\n    }); \n  } \n}\n```\n\nOnce the `TripStatisticsService` has been injected, it provides the following API:\n\n```typescript\nabstract class TripStatisticsService {\n  /* Returns the [[TripStatistics]] for the given [[driverID]] and the given [[year]] */\n  getTripStatistics(driverId: number, year: number = new Date().getFullYear()): Promise<TripStatistics>;\n\n  /* Return the total trip distance (in meters) for the given [[driverId]] in the given [[year]]. */\n  getTotalTripDistance(driverId: number, year: number = new Date().getFullYear()): Promise<number>;\n\n  /* Return the total trip duration (in seconds) for the given [[driverId]] in the given [[year]]. */\n  getTotalTripDuration(driverId: number, year: number = new Date().getFullYear()): Promise<number>;\n\n  /* Return the total amount of trips for the given [[driverId]] in the given [[year]]. */\n  getTotalTripAmount(driverId: number, year: number = new Date().getFullYear()): Promise<number>;\n\n  /* Return the total driven private kms for the given [[driverId]]. */\n  getTotalPrivateKm(driverId: number);\n\n  /* Return the private km quota for the given [[driverId]]. */\n  getPrivateKmQuota(driverId: number): Promise<number>;\n}\n```\n\n## Development\n\nTo generate all `*.js`, `*.js.map` and `*.d.ts` files:\n\n```bash\n$ npm run tsc\n```\n\nAfterwards, the compiled `js` files can be found in the `./dist` directory.\n\nTo lint all `*.ts` files:\n\n```bash\n$ npm run lint\n```\n\nDuring development the unit tests can automatically be run using PhantomJS:\n\n```bash\n$ npm test\n```\n\nWhen a file has been changed/added/deleted, the tests will automatically be rerun.\n\nThe coverage of the tests will be monitored. The results can be found in: `./coverage/PhantomJS <some version and platform>/index.html`. To view the results, simply open this file in your favorite browser (supporting javascript).\n\nTo test your changes locally in an angular app, you could link this module to your global `node_modules` without publishing the module:\n\n```bash\n$ cd /path/to/mind-module-trip/\n$ npm link\n$ cd /path/to/your/angular2/app/\n$ npm link mind-module-trip\n```\n\nThis will create a symlink between the `mind-module-trip` and the `node_modules` of your angular 2 app.\n\n## License\n\nMIT Â© [Mind mobility](mailto:info@mindmobility.nl)\n","time":{"created":"2019-03-13T11:09:32.318Z","modified":"2020-02-11T12:24:21.070Z","5.0.2":"2019-03-13T11:09:32.318Z","5.0.3":"2019-04-04T09:33:29.556Z","5.0.4":"2020-02-11T12:24:21.070Z"},"_id":"mind-module-trip"}