{"maintainers":[{"name":"ponJenkinsIntegration","email":"info@pondevelopment.com"}],"dist-tags":{"latest":"5.1.1"},"versions":{"5.1.0":{"name":"mind-module-account","version":"5.1.0","scripts":{"build":"ngc -p tsconfig.json","lint":"tslint --type-check --project tsconfig.json src/**/*.ts","test":"tsc && karma start","test-singlerun":"tsc && karma start --single-run"},"publishConfig":{"registry":"https://nexusrepo.pondevelopment.com/repository/mind-npm/"},"repository":{"type":"git","url":"git+ssh://git@bitbucket.org/pondevelopment/mind-module-account.git"},"author":{"name":"Han van Venrooij","email":"han.van.venrooij@pon.com"},"keywords":["angular"],"license":"MIT","bugs":{"url":"https://pondevelopment.atlassian.net/"},"main":"dist/index.js","module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"@angular/common":"4.4.3","@angular/core":"4.4.3","@angular/http":"4.4.3","mind-module-error-handling":"^1.2.0","mind-module-service":"^2.1.0","rxjs":"^5.1.0","zone.js":"^0.8.4"},"devDependencies":{"@angular/common":"4.4.3","@angular/compiler":"4.4.3","@angular/compiler-cli":"4.4.3","@angular/core":"4.4.3","@angular/http":"4.4.3","@angular/platform-browser":"4.4.3","@angular/platform-browser-dynamic":"4.4.3","@types/jasmine":"2.5.38","@types/node":"~6.0.60","@types/lodash":"4.14.55","codelyzer":"~2.0.0","core-js":"^2.4.1","jasmine-core":"~2.5.2","jasmine-spec-reporter":"~3.2.0","karma":"~1.4.1","karma-cli":"~1.0.1","karma-coverage":"^1.1.1","karma-coverage-istanbul-reporter":"^0.2.0","karma-jasmine":"~1.1.0","karma-jasmine-html-reporter":"^0.2.2","karma-phantomjs-launcher":"^1.0.4","karma-typescript":"^3.0.0","karma-typescript-angular2-transform":"^1.0.0","mind-module-authentication":"^1.0.1","mind-module-error-handling":"^1.2.0","mind-module-service":"^2.1.0","protractor":"~5.1.0","ts-mockito":"^1.2.0","ts-node":"~2.0.0","tslint":"~4.5.0","typescript":"~2.2.0","rxjs":"^5.1.0","zone.js":"^0.8.4"},"engines":{"node":">=6.0.0"},"gitHead":"a30d06723d5a549e028becf4df12530aab9b05b2","readme":"# mind-module-authentication\n\nThis repo contains a service to retrieve account information from the centersight platform.\n\n## Usage\n\nTo install this library, run:\n\n```bash\n$ npm install mind-module-service --save\n$ npm install mind-module-account --save\n```\n\nThen, include the `AccountModule` in your Angular `NgModule`:\n\n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n// Import your library\nimport { AccountModule } from 'mind-module-account';\n// Import the configuration\nimport { ServiceConfig } from 'mind-module-service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AccountModule // <--------------------- The thingamagiggy here!\n  ],\n  providers: [\n    {\n      provide: ServiceConfig, // <--------- Note that you must provide an instance of the AuthConfig\n      useValue: new ServiceConfig('https://pon-test.device-insight.com', 'api/v1')\n    }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\nNote that you *must* provide an instance of the `ServiceConfig` class for DI. This configuration tells the Account service where it can find the account backend.\n\nAlso you *must* have set up a `CredentialStorage` from the [`mind-module-authentication`](https://bitbucket.org/pondevelopment/mind-module-authentication). This is needed for the `AccountService` to deal with the authenticating any requests made against the platform.\n\n### Account service \n\nThe authentication service provides the following interface:\n```typescript\nabstract class AccountService {\n  /** Resets the password of the account associated with the given [[email]]. */\n  abstract resetPassword(email: string): Promise<void>;\n\n  /** Returns the account information associated with the given account number */\n  abstract getAccount(accountNumber: string): Promise<Account>;\n\n  /** Returns the account information associated with the logged in user */\n  abstract getOwnAccount(): Promise<Account>;\n\n  /** Updates the given [[Account]] associated with the account number of the given account. */\n  abstract updateAccount(account: Account): Promise<Account>;\n\n  /** Changes the password for the logged in account */\n  abstract changePassword(oldPassword: string, newPassword: string): Promise<void>;\n}\n```\n\nThe `AccountModule` will only prepare the `AccountServiceImpl` for DI. To only depend on the `AccountService` interface, you should include a line like the one below in the providers of your `NgModule`:\n\n```typescript\n{provide: AccountService, useExisting: AccountServiceImpl}\n```\n\nOnce you've prepared the `AccountService` for DI as described above, you can inject the `AccountService` into your own components/modules:\n\n```typescript\nimport {\n  Account,\n  AccountService\n} from 'mind-module-account';\n\n@Component({\n  selector: 'my-component',\n  template: `...`\n})\nclass MyComponent {\n  constructor(private accountService: AccountService) { // <----- Injection happens here\n  }\n  \n  getAndModifyOwnAccount() {\n    this.accountService\n      .getOwnAccount() // <-------------------------------------- Retrieve your account\n      .then(this.modifyAccount)\n      .then(modifiedAccount => \n        this.accountService.updateAccount(modifiedAccount) // <-- Store any modifications to the account\n      )\n      .catch(this.handleErrors)\n  }\n  \n  ...\n}\n```\n## Development\n\nTo generate all `*.js`, `*.js.map` and `*.d.ts` files:\n\n```bash\n$ npm run tsc\n```\n\nAfterwards, the compiled `js` files can be found in the `./dist` directory.\n\nTo lint all `*.ts` files:\n\n```bash\n$ npm run lint\n```\n\nDuring development the unit tests can automatically be run using PhantomJS:\n\n```bash\n$ npm test\n```\n\nWhen a file has been changed/added/deleted, the tests will automatically be rerun.\n\nThe coverage of the tests will be monitored. The results can be found in: `./coverage/PhantomJS <some version and platform>/index.html`. To view the results, simply open this file in your favorite browser (supporting javascript).\n\nTo test your changes locally in an angular app, you could link this module to your global `node_modules` without publishing the module:\n\n```bash\n$ cd /path/to/mind-module-account/\n$ npm link\n$ cd /path/to/your/angular2/app/\n$ npm link mind-module-account\n```\n\nThis will create a symlink between the `mind-module-account` and the `node_modules` of your angular 2 app.\n\n## License\n\nMIT Â© [Mind mobility](mailto:info@mindmobility.nl)\n","readmeFilename":"README.md","description":"This repo contains a service to retrieve account information from the centersight platform.","homepage":"https://bitbucket.org/pondevelopment/mind-module-account#readme","_id":"mind-module-account@5.1.0","_npmVersion":"5.6.0","_nodeVersion":"7.8.0","_npmUser":{"name":"ponJenkinsIntegration","email":"info@pondevelopment.com"},"maintainers":[{"name":"ponJenkinsIntegration","email":"info@pondevelopment.com"}],"dist":{"integrity":"sha512-qaRApe+WzqzUIvUSrPoFnJphJjWMfwvkIPmnFkHyhPdkkZW4gHy0LE1Dut1ZQbJs2esku2d3W2hXPfxqTUgdCQ==","shasum":"724702f0e4b4023ca5dd1b224f80e6b95fe8e188","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/mind-module-account/-/mind-module-account-5.1.0.tgz"}},"5.1.1":{"name":"mind-module-account","version":"5.1.1","scripts":{"build":"ngc -p tsconfig.json","lint":"tslint --type-check --project tsconfig.json src/**/*.ts","test":"tsc && karma start","test-singlerun":"tsc && karma start --single-run"},"publishConfig":{"registry":"https://nexusrepo.pondevelopment.com/repository/mind-npm/"},"repository":{"type":"git","url":"git+ssh://git@bitbucket.org/pondevelopment/mind-module-account.git"},"author":{"name":"Han van Venrooij","email":"han.van.venrooij@pon.com"},"keywords":["angular"],"license":"MIT","bugs":{"url":"https://pondevelopment.atlassian.net/"},"main":"dist/index.js","module":"dist/index.js","types":"dist/index.d.ts","peerDependencies":{"@angular/common":"4.4.3","@angular/core":"4.4.3","@angular/http":"4.4.3","mind-module-error-handling":"^1.2.0","mind-module-service":"^2.1.0","rxjs":"^5.1.0","zone.js":"^0.8.4"},"devDependencies":{"@angular/common":"4.4.3","@angular/compiler":"4.4.3","@angular/compiler-cli":"4.4.3","@angular/core":"4.4.3","@angular/http":"4.4.3","@angular/platform-browser":"4.4.3","@angular/platform-browser-dynamic":"4.4.3","@types/jasmine":"2.5.38","@types/node":"~6.0.60","@types/lodash":"4.14.55","codelyzer":"~2.0.0","core-js":"^2.4.1","jasmine-core":"~2.5.2","jasmine-spec-reporter":"~3.2.0","karma":"~1.4.1","karma-cli":"~1.0.1","karma-coverage":"^1.1.1","karma-coverage-istanbul-reporter":"^0.2.0","karma-jasmine":"~1.1.0","karma-jasmine-html-reporter":"^0.2.2","karma-phantomjs-launcher":"^1.0.4","karma-typescript":"^3.0.0","karma-typescript-angular2-transform":"^1.0.0","mind-module-authentication":"^1.0.1","mind-module-error-handling":"^1.2.0","mind-module-service":"^2.1.0","protractor":"~5.1.0","ts-mockito":"^1.2.0","ts-node":"~2.0.0","tslint":"~4.5.0","typescript":"~2.2.0","rxjs":"^5.1.0","zone.js":"^0.8.4"},"engines":{"node":">=6.0.0"},"gitHead":"567017e0706fd735c9825164832429cec8d0542a","readme":"# mind-module-authentication\n\nThis repo contains a service to retrieve account information from the centersight platform.\n\n## Usage\n\nTo install this library, run:\n\n```bash\n$ npm install mind-module-service --save\n$ npm install mind-module-account --save\n```\n\nThen, include the `AccountModule` in your Angular `NgModule`:\n\n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n// Import your library\nimport { AccountModule } from 'mind-module-account';\n// Import the configuration\nimport { ServiceConfig } from 'mind-module-service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AccountModule // <--------------------- The thingamagiggy here!\n  ],\n  providers: [\n    {\n      provide: ServiceConfig, // <--------- Note that you must provide an instance of the AuthConfig\n      useValue: new ServiceConfig('https://pon-test.device-insight.com', 'api/v1')\n    }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\nNote that you *must* provide an instance of the `ServiceConfig` class for DI. This configuration tells the Account service where it can find the account backend.\n\nAlso you *must* have set up a `CredentialStorage` from the [`mind-module-authentication`](https://bitbucket.org/pondevelopment/mind-module-authentication). This is needed for the `AccountService` to deal with the authenticating any requests made against the platform.\n\n### Account service \n\nThe authentication service provides the following interface:\n```typescript\nabstract class AccountService {\n  /** Resets the password of the account associated with the given [[email]]. */\n  abstract resetPassword(email: string): Promise<void>;\n\n  /** Returns the account information associated with the given account number */\n  abstract getAccount(accountNumber: string): Promise<Account>;\n\n  /** Returns the account information associated with the logged in user */\n  abstract getOwnAccount(): Promise<Account>;\n\n  /** Updates the given [[Account]] associated with the account number of the given account. */\n  abstract updateAccount(account: Account): Promise<Account>;\n\n  /** Changes the password for the logged in account */\n  abstract changePassword(oldPassword: string, newPassword: string): Promise<void>;\n}\n```\n\nThe `AccountModule` will only prepare the `AccountServiceImpl` for DI. To only depend on the `AccountService` interface, you should include a line like the one below in the providers of your `NgModule`:\n\n```typescript\n{provide: AccountService, useExisting: AccountServiceImpl}\n```\n\nOnce you've prepared the `AccountService` for DI as described above, you can inject the `AccountService` into your own components/modules:\n\n```typescript\nimport {\n  Account,\n  AccountService\n} from 'mind-module-account';\n\n@Component({\n  selector: 'my-component',\n  template: `...`\n})\nclass MyComponent {\n  constructor(private accountService: AccountService) { // <----- Injection happens here\n  }\n  \n  getAndModifyOwnAccount() {\n    this.accountService\n      .getOwnAccount() // <-------------------------------------- Retrieve your account\n      .then(this.modifyAccount)\n      .then(modifiedAccount => \n        this.accountService.updateAccount(modifiedAccount) // <-- Store any modifications to the account\n      )\n      .catch(this.handleErrors)\n  }\n  \n  ...\n}\n```\n## Development\n\nTo generate all `*.js`, `*.js.map` and `*.d.ts` files:\n\n```bash\n$ npm run tsc\n```\n\nAfterwards, the compiled `js` files can be found in the `./dist` directory.\n\nTo lint all `*.ts` files:\n\n```bash\n$ npm run lint\n```\n\nDuring development the unit tests can automatically be run using PhantomJS:\n\n```bash\n$ npm test\n```\n\nWhen a file has been changed/added/deleted, the tests will automatically be rerun.\n\nThe coverage of the tests will be monitored. The results can be found in: `./coverage/PhantomJS <some version and platform>/index.html`. To view the results, simply open this file in your favorite browser (supporting javascript).\n\nTo test your changes locally in an angular app, you could link this module to your global `node_modules` without publishing the module:\n\n```bash\n$ cd /path/to/mind-module-account/\n$ npm link\n$ cd /path/to/your/angular2/app/\n$ npm link mind-module-account\n```\n\nThis will create a symlink between the `mind-module-account` and the `node_modules` of your angular 2 app.\n\n## License\n\nMIT Â© [Mind mobility](mailto:info@mindmobility.nl)\n","readmeFilename":"README.md","description":"This repo contains a service to retrieve account information from the centersight platform.","homepage":"https://bitbucket.org/pondevelopment/mind-module-account#readme","_id":"mind-module-account@5.1.1","_npmVersion":"5.6.0","_nodeVersion":"8.11.4","_npmUser":{"name":"ponJenkinsIntegration","email":"info@pondevelopment.com"},"maintainers":[{"name":"ponJenkinsIntegration","email":"info@pondevelopment.com"}],"dist":{"integrity":"sha512-teJlh/nXNnhtXS7N8ZU9DWjUUkviMDpQn9m5FZDKNqswxR0TPbzNUb788kw0iAGFPSp8mVuMaOvx/LqsmSY4RA==","shasum":"384e75272ce850daa4d6f94a3948a673f90b80a5","tarball":"https://nexusrepo.pondevelopment.com/repository/npm-all/mind-module-account/-/mind-module-account-5.1.1.tgz"}}},"name":"mind-module-account","_rev":"119","description":"This repo contains a service to retrieve account information from the centersight platform.","readme":"# mind-module-authentication\n\nThis repo contains a service to retrieve account information from the centersight platform.\n\n## Usage\n\nTo install this library, run:\n\n```bash\n$ npm install mind-module-service --save\n$ npm install mind-module-account --save\n```\n\nThen, include the `AccountModule` in your Angular `NgModule`:\n\n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n// Import your library\nimport { AccountModule } from 'mind-module-account';\n// Import the configuration\nimport { ServiceConfig } from 'mind-module-service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AccountModule // <--------------------- The thingamagiggy here!\n  ],\n  providers: [\n    {\n      provide: ServiceConfig, // <--------- Note that you must provide an instance of the AuthConfig\n      useValue: new ServiceConfig('https://pon-test.device-insight.com', 'api/v1')\n    }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\nNote that you *must* provide an instance of the `ServiceConfig` class for DI. This configuration tells the Account service where it can find the account backend.\n\nAlso you *must* have set up a `CredentialStorage` from the [`mind-module-authentication`](https://bitbucket.org/pondevelopment/mind-module-authentication). This is needed for the `AccountService` to deal with the authenticating any requests made against the platform.\n\n### Account service \n\nThe authentication service provides the following interface:\n```typescript\nabstract class AccountService {\n  /** Resets the password of the account associated with the given [[email]]. */\n  abstract resetPassword(email: string): Promise<void>;\n\n  /** Returns the account information associated with the given account number */\n  abstract getAccount(accountNumber: string): Promise<Account>;\n\n  /** Returns the account information associated with the logged in user */\n  abstract getOwnAccount(): Promise<Account>;\n\n  /** Updates the given [[Account]] associated with the account number of the given account. */\n  abstract updateAccount(account: Account): Promise<Account>;\n\n  /** Changes the password for the logged in account */\n  abstract changePassword(oldPassword: string, newPassword: string): Promise<void>;\n}\n```\n\nThe `AccountModule` will only prepare the `AccountServiceImpl` for DI. To only depend on the `AccountService` interface, you should include a line like the one below in the providers of your `NgModule`:\n\n```typescript\n{provide: AccountService, useExisting: AccountServiceImpl}\n```\n\nOnce you've prepared the `AccountService` for DI as described above, you can inject the `AccountService` into your own components/modules:\n\n```typescript\nimport {\n  Account,\n  AccountService\n} from 'mind-module-account';\n\n@Component({\n  selector: 'my-component',\n  template: `...`\n})\nclass MyComponent {\n  constructor(private accountService: AccountService) { // <----- Injection happens here\n  }\n  \n  getAndModifyOwnAccount() {\n    this.accountService\n      .getOwnAccount() // <-------------------------------------- Retrieve your account\n      .then(this.modifyAccount)\n      .then(modifiedAccount => \n        this.accountService.updateAccount(modifiedAccount) // <-- Store any modifications to the account\n      )\n      .catch(this.handleErrors)\n  }\n  \n  ...\n}\n```\n## Development\n\nTo generate all `*.js`, `*.js.map` and `*.d.ts` files:\n\n```bash\n$ npm run tsc\n```\n\nAfterwards, the compiled `js` files can be found in the `./dist` directory.\n\nTo lint all `*.ts` files:\n\n```bash\n$ npm run lint\n```\n\nDuring development the unit tests can automatically be run using PhantomJS:\n\n```bash\n$ npm test\n```\n\nWhen a file has been changed/added/deleted, the tests will automatically be rerun.\n\nThe coverage of the tests will be monitored. The results can be found in: `./coverage/PhantomJS <some version and platform>/index.html`. To view the results, simply open this file in your favorite browser (supporting javascript).\n\nTo test your changes locally in an angular app, you could link this module to your global `node_modules` without publishing the module:\n\n```bash\n$ cd /path/to/mind-module-account/\n$ npm link\n$ cd /path/to/your/angular2/app/\n$ npm link mind-module-account\n```\n\nThis will create a symlink between the `mind-module-account` and the `node_modules` of your angular 2 app.\n\n## License\n\nMIT Â© [Mind mobility](mailto:info@mindmobility.nl)\n","time":{"created":"2019-03-13T09:40:18.225Z","modified":"2019-03-19T13:02:22.850Z","5.1.0":"2019-03-13T09:40:18.225Z","5.1.1":"2019-03-19T13:02:22.850Z"},"_id":"mind-module-account"}